// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/babyname/fate/ent/ncharacter"
	"github.com/babyname/fate/ent/predicate"
)

// NCharacterUpdate is the builder for updating NCharacter entities.
type NCharacterUpdate struct {
	config
	hooks    []Hook
	mutation *NCharacterMutation
}

// Where appends a list predicates to the NCharacterUpdate builder.
func (nu *NCharacterUpdate) Where(ps ...predicate.NCharacter) *NCharacterUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetPinYin sets the "pin_yin" field.
func (nu *NCharacterUpdate) SetPinYin(s string) *NCharacterUpdate {
	nu.mutation.SetPinYin(s)
	return nu
}

// SetChID sets the "ch_id" field.
func (nu *NCharacterUpdate) SetChID(i int64) *NCharacterUpdate {
	nu.mutation.ResetChID()
	nu.mutation.SetChID(i)
	return nu
}

// AddChID adds i to the "ch_id" field.
func (nu *NCharacterUpdate) AddChID(i int64) *NCharacterUpdate {
	nu.mutation.AddChID(i)
	return nu
}

// SetCh sets the "ch" field.
func (nu *NCharacterUpdate) SetCh(s string) *NCharacterUpdate {
	nu.mutation.SetCh(s)
	return nu
}

// SetRadical sets the "radical" field.
func (nu *NCharacterUpdate) SetRadical(s string) *NCharacterUpdate {
	nu.mutation.SetRadical(s)
	return nu
}

// SetRadicalStroke sets the "radical_stroke" field.
func (nu *NCharacterUpdate) SetRadicalStroke(i int) *NCharacterUpdate {
	nu.mutation.ResetRadicalStroke()
	nu.mutation.SetRadicalStroke(i)
	return nu
}

// AddRadicalStroke adds i to the "radical_stroke" field.
func (nu *NCharacterUpdate) AddRadicalStroke(i int) *NCharacterUpdate {
	nu.mutation.AddRadicalStroke(i)
	return nu
}

// SetTotalStroke sets the "total_stroke" field.
func (nu *NCharacterUpdate) SetTotalStroke(i int) *NCharacterUpdate {
	nu.mutation.ResetTotalStroke()
	nu.mutation.SetTotalStroke(i)
	return nu
}

// AddTotalStroke adds i to the "total_stroke" field.
func (nu *NCharacterUpdate) AddTotalStroke(i int) *NCharacterUpdate {
	nu.mutation.AddTotalStroke(i)
	return nu
}

// SetIsKangXi sets the "is_kang_xi" field.
func (nu *NCharacterUpdate) SetIsKangXi(b bool) *NCharacterUpdate {
	nu.mutation.SetIsKangXi(b)
	return nu
}

// SetRelateKangXi sets the "relate_kang_xi" field.
func (nu *NCharacterUpdate) SetRelateKangXi(s string) *NCharacterUpdate {
	nu.mutation.SetRelateKangXi(s)
	return nu
}

// SetRelateSimple sets the "relate_simple" field.
func (nu *NCharacterUpdate) SetRelateSimple(s string) *NCharacterUpdate {
	nu.mutation.SetRelateSimple(s)
	return nu
}

// SetRelateTraditional sets the "relate_traditional" field.
func (nu *NCharacterUpdate) SetRelateTraditional(s string) *NCharacterUpdate {
	nu.mutation.SetRelateTraditional(s)
	return nu
}

// SetRelateVariant sets the "relate_variant" field.
func (nu *NCharacterUpdate) SetRelateVariant(s string) *NCharacterUpdate {
	nu.mutation.SetRelateVariant(s)
	return nu
}

// SetNameScience sets the "name_science" field.
func (nu *NCharacterUpdate) SetNameScience(b bool) *NCharacterUpdate {
	nu.mutation.SetNameScience(b)
	return nu
}

// SetScienceStroke sets the "science_stroke" field.
func (nu *NCharacterUpdate) SetScienceStroke(i int) *NCharacterUpdate {
	nu.mutation.ResetScienceStroke()
	nu.mutation.SetScienceStroke(i)
	return nu
}

// AddScienceStroke adds i to the "science_stroke" field.
func (nu *NCharacterUpdate) AddScienceStroke(i int) *NCharacterUpdate {
	nu.mutation.AddScienceStroke(i)
	return nu
}

// SetWuXing sets the "wu_xing" field.
func (nu *NCharacterUpdate) SetWuXing(s string) *NCharacterUpdate {
	nu.mutation.SetWuXing(s)
	return nu
}

// SetLucky sets the "lucky" field.
func (nu *NCharacterUpdate) SetLucky(s string) *NCharacterUpdate {
	nu.mutation.SetLucky(s)
	return nu
}

// SetRegular sets the "regular" field.
func (nu *NCharacterUpdate) SetRegular(b bool) *NCharacterUpdate {
	nu.mutation.SetRegular(b)
	return nu
}

// SetComment sets the "comment" field.
func (nu *NCharacterUpdate) SetComment(s string) *NCharacterUpdate {
	nu.mutation.SetComment(s)
	return nu
}

// Mutation returns the NCharacterMutation object of the builder.
func (nu *NCharacterUpdate) Mutation() *NCharacterMutation {
	return nu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NCharacterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NCharacterUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NCharacterUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NCharacterUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nu *NCharacterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ncharacter.Table, ncharacter.Columns, sqlgraph.NewFieldSpec(ncharacter.FieldID, field.TypeString))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.PinYin(); ok {
		_spec.SetField(ncharacter.FieldPinYin, field.TypeString, value)
	}
	if value, ok := nu.mutation.ChID(); ok {
		_spec.SetField(ncharacter.FieldChID, field.TypeInt64, value)
	}
	if value, ok := nu.mutation.AddedChID(); ok {
		_spec.AddField(ncharacter.FieldChID, field.TypeInt64, value)
	}
	if value, ok := nu.mutation.Ch(); ok {
		_spec.SetField(ncharacter.FieldCh, field.TypeString, value)
	}
	if value, ok := nu.mutation.Radical(); ok {
		_spec.SetField(ncharacter.FieldRadical, field.TypeString, value)
	}
	if value, ok := nu.mutation.RadicalStroke(); ok {
		_spec.SetField(ncharacter.FieldRadicalStroke, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedRadicalStroke(); ok {
		_spec.AddField(ncharacter.FieldRadicalStroke, field.TypeInt, value)
	}
	if value, ok := nu.mutation.TotalStroke(); ok {
		_spec.SetField(ncharacter.FieldTotalStroke, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedTotalStroke(); ok {
		_spec.AddField(ncharacter.FieldTotalStroke, field.TypeInt, value)
	}
	if value, ok := nu.mutation.IsKangXi(); ok {
		_spec.SetField(ncharacter.FieldIsKangXi, field.TypeBool, value)
	}
	if value, ok := nu.mutation.RelateKangXi(); ok {
		_spec.SetField(ncharacter.FieldRelateKangXi, field.TypeString, value)
	}
	if value, ok := nu.mutation.RelateSimple(); ok {
		_spec.SetField(ncharacter.FieldRelateSimple, field.TypeString, value)
	}
	if value, ok := nu.mutation.RelateTraditional(); ok {
		_spec.SetField(ncharacter.FieldRelateTraditional, field.TypeString, value)
	}
	if value, ok := nu.mutation.RelateVariant(); ok {
		_spec.SetField(ncharacter.FieldRelateVariant, field.TypeString, value)
	}
	if value, ok := nu.mutation.NameScience(); ok {
		_spec.SetField(ncharacter.FieldNameScience, field.TypeBool, value)
	}
	if value, ok := nu.mutation.ScienceStroke(); ok {
		_spec.SetField(ncharacter.FieldScienceStroke, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedScienceStroke(); ok {
		_spec.AddField(ncharacter.FieldScienceStroke, field.TypeInt, value)
	}
	if value, ok := nu.mutation.WuXing(); ok {
		_spec.SetField(ncharacter.FieldWuXing, field.TypeString, value)
	}
	if value, ok := nu.mutation.Lucky(); ok {
		_spec.SetField(ncharacter.FieldLucky, field.TypeString, value)
	}
	if value, ok := nu.mutation.Regular(); ok {
		_spec.SetField(ncharacter.FieldRegular, field.TypeBool, value)
	}
	if value, ok := nu.mutation.Comment(); ok {
		_spec.SetField(ncharacter.FieldComment, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ncharacter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NCharacterUpdateOne is the builder for updating a single NCharacter entity.
type NCharacterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NCharacterMutation
}

// SetPinYin sets the "pin_yin" field.
func (nuo *NCharacterUpdateOne) SetPinYin(s string) *NCharacterUpdateOne {
	nuo.mutation.SetPinYin(s)
	return nuo
}

// SetChID sets the "ch_id" field.
func (nuo *NCharacterUpdateOne) SetChID(i int64) *NCharacterUpdateOne {
	nuo.mutation.ResetChID()
	nuo.mutation.SetChID(i)
	return nuo
}

// AddChID adds i to the "ch_id" field.
func (nuo *NCharacterUpdateOne) AddChID(i int64) *NCharacterUpdateOne {
	nuo.mutation.AddChID(i)
	return nuo
}

// SetCh sets the "ch" field.
func (nuo *NCharacterUpdateOne) SetCh(s string) *NCharacterUpdateOne {
	nuo.mutation.SetCh(s)
	return nuo
}

// SetRadical sets the "radical" field.
func (nuo *NCharacterUpdateOne) SetRadical(s string) *NCharacterUpdateOne {
	nuo.mutation.SetRadical(s)
	return nuo
}

// SetRadicalStroke sets the "radical_stroke" field.
func (nuo *NCharacterUpdateOne) SetRadicalStroke(i int) *NCharacterUpdateOne {
	nuo.mutation.ResetRadicalStroke()
	nuo.mutation.SetRadicalStroke(i)
	return nuo
}

// AddRadicalStroke adds i to the "radical_stroke" field.
func (nuo *NCharacterUpdateOne) AddRadicalStroke(i int) *NCharacterUpdateOne {
	nuo.mutation.AddRadicalStroke(i)
	return nuo
}

// SetTotalStroke sets the "total_stroke" field.
func (nuo *NCharacterUpdateOne) SetTotalStroke(i int) *NCharacterUpdateOne {
	nuo.mutation.ResetTotalStroke()
	nuo.mutation.SetTotalStroke(i)
	return nuo
}

// AddTotalStroke adds i to the "total_stroke" field.
func (nuo *NCharacterUpdateOne) AddTotalStroke(i int) *NCharacterUpdateOne {
	nuo.mutation.AddTotalStroke(i)
	return nuo
}

// SetIsKangXi sets the "is_kang_xi" field.
func (nuo *NCharacterUpdateOne) SetIsKangXi(b bool) *NCharacterUpdateOne {
	nuo.mutation.SetIsKangXi(b)
	return nuo
}

// SetRelateKangXi sets the "relate_kang_xi" field.
func (nuo *NCharacterUpdateOne) SetRelateKangXi(s string) *NCharacterUpdateOne {
	nuo.mutation.SetRelateKangXi(s)
	return nuo
}

// SetRelateSimple sets the "relate_simple" field.
func (nuo *NCharacterUpdateOne) SetRelateSimple(s string) *NCharacterUpdateOne {
	nuo.mutation.SetRelateSimple(s)
	return nuo
}

// SetRelateTraditional sets the "relate_traditional" field.
func (nuo *NCharacterUpdateOne) SetRelateTraditional(s string) *NCharacterUpdateOne {
	nuo.mutation.SetRelateTraditional(s)
	return nuo
}

// SetRelateVariant sets the "relate_variant" field.
func (nuo *NCharacterUpdateOne) SetRelateVariant(s string) *NCharacterUpdateOne {
	nuo.mutation.SetRelateVariant(s)
	return nuo
}

// SetNameScience sets the "name_science" field.
func (nuo *NCharacterUpdateOne) SetNameScience(b bool) *NCharacterUpdateOne {
	nuo.mutation.SetNameScience(b)
	return nuo
}

// SetScienceStroke sets the "science_stroke" field.
func (nuo *NCharacterUpdateOne) SetScienceStroke(i int) *NCharacterUpdateOne {
	nuo.mutation.ResetScienceStroke()
	nuo.mutation.SetScienceStroke(i)
	return nuo
}

// AddScienceStroke adds i to the "science_stroke" field.
func (nuo *NCharacterUpdateOne) AddScienceStroke(i int) *NCharacterUpdateOne {
	nuo.mutation.AddScienceStroke(i)
	return nuo
}

// SetWuXing sets the "wu_xing" field.
func (nuo *NCharacterUpdateOne) SetWuXing(s string) *NCharacterUpdateOne {
	nuo.mutation.SetWuXing(s)
	return nuo
}

// SetLucky sets the "lucky" field.
func (nuo *NCharacterUpdateOne) SetLucky(s string) *NCharacterUpdateOne {
	nuo.mutation.SetLucky(s)
	return nuo
}

// SetRegular sets the "regular" field.
func (nuo *NCharacterUpdateOne) SetRegular(b bool) *NCharacterUpdateOne {
	nuo.mutation.SetRegular(b)
	return nuo
}

// SetComment sets the "comment" field.
func (nuo *NCharacterUpdateOne) SetComment(s string) *NCharacterUpdateOne {
	nuo.mutation.SetComment(s)
	return nuo
}

// Mutation returns the NCharacterMutation object of the builder.
func (nuo *NCharacterUpdateOne) Mutation() *NCharacterMutation {
	return nuo.mutation
}

// Where appends a list predicates to the NCharacterUpdate builder.
func (nuo *NCharacterUpdateOne) Where(ps ...predicate.NCharacter) *NCharacterUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NCharacterUpdateOne) Select(field string, fields ...string) *NCharacterUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated NCharacter entity.
func (nuo *NCharacterUpdateOne) Save(ctx context.Context) (*NCharacter, error) {
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NCharacterUpdateOne) SaveX(ctx context.Context) *NCharacter {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NCharacterUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NCharacterUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nuo *NCharacterUpdateOne) sqlSave(ctx context.Context) (_node *NCharacter, err error) {
	_spec := sqlgraph.NewUpdateSpec(ncharacter.Table, ncharacter.Columns, sqlgraph.NewFieldSpec(ncharacter.FieldID, field.TypeString))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NCharacter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ncharacter.FieldID)
		for _, f := range fields {
			if !ncharacter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ncharacter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.PinYin(); ok {
		_spec.SetField(ncharacter.FieldPinYin, field.TypeString, value)
	}
	if value, ok := nuo.mutation.ChID(); ok {
		_spec.SetField(ncharacter.FieldChID, field.TypeInt64, value)
	}
	if value, ok := nuo.mutation.AddedChID(); ok {
		_spec.AddField(ncharacter.FieldChID, field.TypeInt64, value)
	}
	if value, ok := nuo.mutation.Ch(); ok {
		_spec.SetField(ncharacter.FieldCh, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Radical(); ok {
		_spec.SetField(ncharacter.FieldRadical, field.TypeString, value)
	}
	if value, ok := nuo.mutation.RadicalStroke(); ok {
		_spec.SetField(ncharacter.FieldRadicalStroke, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedRadicalStroke(); ok {
		_spec.AddField(ncharacter.FieldRadicalStroke, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.TotalStroke(); ok {
		_spec.SetField(ncharacter.FieldTotalStroke, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedTotalStroke(); ok {
		_spec.AddField(ncharacter.FieldTotalStroke, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.IsKangXi(); ok {
		_spec.SetField(ncharacter.FieldIsKangXi, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.RelateKangXi(); ok {
		_spec.SetField(ncharacter.FieldRelateKangXi, field.TypeString, value)
	}
	if value, ok := nuo.mutation.RelateSimple(); ok {
		_spec.SetField(ncharacter.FieldRelateSimple, field.TypeString, value)
	}
	if value, ok := nuo.mutation.RelateTraditional(); ok {
		_spec.SetField(ncharacter.FieldRelateTraditional, field.TypeString, value)
	}
	if value, ok := nuo.mutation.RelateVariant(); ok {
		_spec.SetField(ncharacter.FieldRelateVariant, field.TypeString, value)
	}
	if value, ok := nuo.mutation.NameScience(); ok {
		_spec.SetField(ncharacter.FieldNameScience, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.ScienceStroke(); ok {
		_spec.SetField(ncharacter.FieldScienceStroke, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedScienceStroke(); ok {
		_spec.AddField(ncharacter.FieldScienceStroke, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.WuXing(); ok {
		_spec.SetField(ncharacter.FieldWuXing, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Lucky(); ok {
		_spec.SetField(ncharacter.FieldLucky, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Regular(); ok {
		_spec.SetField(ncharacter.FieldRegular, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.Comment(); ok {
		_spec.SetField(ncharacter.FieldComment, field.TypeString, value)
	}
	_node = &NCharacter{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ncharacter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
