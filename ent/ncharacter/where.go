// Code generated by ent, DO NOT EDIT.

package ncharacter

import (
	"entgo.io/ent/dialect/sql"
	"github.com/babyname/fate/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContainsFold(FieldID, id))
}

// PinYin applies equality check predicate on the "pin_yin" field. It's identical to PinYinEQ.
func PinYin(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldPinYin, v))
}

// ChID applies equality check predicate on the "ch_id" field. It's identical to ChIDEQ.
func ChID(v int64) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldChID, v))
}

// Ch applies equality check predicate on the "ch" field. It's identical to ChEQ.
func Ch(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldCh, v))
}

// Radical applies equality check predicate on the "radical" field. It's identical to RadicalEQ.
func Radical(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldRadical, v))
}

// RadicalStroke applies equality check predicate on the "radical_stroke" field. It's identical to RadicalStrokeEQ.
func RadicalStroke(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldRadicalStroke, v))
}

// TotalStroke applies equality check predicate on the "total_stroke" field. It's identical to TotalStrokeEQ.
func TotalStroke(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldTotalStroke, v))
}

// IsKangXi applies equality check predicate on the "is_kang_xi" field. It's identical to IsKangXiEQ.
func IsKangXi(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldIsKangXi, v))
}

// RelateKangXi applies equality check predicate on the "relate_kang_xi" field. It's identical to RelateKangXiEQ.
func RelateKangXi(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldRelateKangXi, v))
}

// RelateSimple applies equality check predicate on the "relate_simple" field. It's identical to RelateSimpleEQ.
func RelateSimple(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldRelateSimple, v))
}

// RelateTraditional applies equality check predicate on the "relate_traditional" field. It's identical to RelateTraditionalEQ.
func RelateTraditional(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldRelateTraditional, v))
}

// RelateVariant applies equality check predicate on the "relate_variant" field. It's identical to RelateVariantEQ.
func RelateVariant(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldRelateVariant, v))
}

// NameScience applies equality check predicate on the "name_science" field. It's identical to NameScienceEQ.
func NameScience(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldNameScience, v))
}

// ScienceStroke applies equality check predicate on the "science_stroke" field. It's identical to ScienceStrokeEQ.
func ScienceStroke(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldScienceStroke, v))
}

// WuXing applies equality check predicate on the "wu_xing" field. It's identical to WuXingEQ.
func WuXing(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldWuXing, v))
}

// Lucky applies equality check predicate on the "lucky" field. It's identical to LuckyEQ.
func Lucky(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldLucky, v))
}

// Regular applies equality check predicate on the "regular" field. It's identical to RegularEQ.
func Regular(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldRegular, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldComment, v))
}

// PinYinEQ applies the EQ predicate on the "pin_yin" field.
func PinYinEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldPinYin, v))
}

// PinYinNEQ applies the NEQ predicate on the "pin_yin" field.
func PinYinNEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldPinYin, v))
}

// PinYinIn applies the In predicate on the "pin_yin" field.
func PinYinIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldPinYin, vs...))
}

// PinYinNotIn applies the NotIn predicate on the "pin_yin" field.
func PinYinNotIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldPinYin, vs...))
}

// PinYinGT applies the GT predicate on the "pin_yin" field.
func PinYinGT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldPinYin, v))
}

// PinYinGTE applies the GTE predicate on the "pin_yin" field.
func PinYinGTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldPinYin, v))
}

// PinYinLT applies the LT predicate on the "pin_yin" field.
func PinYinLT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldPinYin, v))
}

// PinYinLTE applies the LTE predicate on the "pin_yin" field.
func PinYinLTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldPinYin, v))
}

// PinYinContains applies the Contains predicate on the "pin_yin" field.
func PinYinContains(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContains(FieldPinYin, v))
}

// PinYinHasPrefix applies the HasPrefix predicate on the "pin_yin" field.
func PinYinHasPrefix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasPrefix(FieldPinYin, v))
}

// PinYinHasSuffix applies the HasSuffix predicate on the "pin_yin" field.
func PinYinHasSuffix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasSuffix(FieldPinYin, v))
}

// PinYinEqualFold applies the EqualFold predicate on the "pin_yin" field.
func PinYinEqualFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEqualFold(FieldPinYin, v))
}

// PinYinContainsFold applies the ContainsFold predicate on the "pin_yin" field.
func PinYinContainsFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContainsFold(FieldPinYin, v))
}

// ChIDEQ applies the EQ predicate on the "ch_id" field.
func ChIDEQ(v int64) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldChID, v))
}

// ChIDNEQ applies the NEQ predicate on the "ch_id" field.
func ChIDNEQ(v int64) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldChID, v))
}

// ChIDIn applies the In predicate on the "ch_id" field.
func ChIDIn(vs ...int64) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldChID, vs...))
}

// ChIDNotIn applies the NotIn predicate on the "ch_id" field.
func ChIDNotIn(vs ...int64) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldChID, vs...))
}

// ChIDGT applies the GT predicate on the "ch_id" field.
func ChIDGT(v int64) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldChID, v))
}

// ChIDGTE applies the GTE predicate on the "ch_id" field.
func ChIDGTE(v int64) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldChID, v))
}

// ChIDLT applies the LT predicate on the "ch_id" field.
func ChIDLT(v int64) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldChID, v))
}

// ChIDLTE applies the LTE predicate on the "ch_id" field.
func ChIDLTE(v int64) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldChID, v))
}

// ChEQ applies the EQ predicate on the "ch" field.
func ChEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldCh, v))
}

// ChNEQ applies the NEQ predicate on the "ch" field.
func ChNEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldCh, v))
}

// ChIn applies the In predicate on the "ch" field.
func ChIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldCh, vs...))
}

// ChNotIn applies the NotIn predicate on the "ch" field.
func ChNotIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldCh, vs...))
}

// ChGT applies the GT predicate on the "ch" field.
func ChGT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldCh, v))
}

// ChGTE applies the GTE predicate on the "ch" field.
func ChGTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldCh, v))
}

// ChLT applies the LT predicate on the "ch" field.
func ChLT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldCh, v))
}

// ChLTE applies the LTE predicate on the "ch" field.
func ChLTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldCh, v))
}

// ChContains applies the Contains predicate on the "ch" field.
func ChContains(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContains(FieldCh, v))
}

// ChHasPrefix applies the HasPrefix predicate on the "ch" field.
func ChHasPrefix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasPrefix(FieldCh, v))
}

// ChHasSuffix applies the HasSuffix predicate on the "ch" field.
func ChHasSuffix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasSuffix(FieldCh, v))
}

// ChEqualFold applies the EqualFold predicate on the "ch" field.
func ChEqualFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEqualFold(FieldCh, v))
}

// ChContainsFold applies the ContainsFold predicate on the "ch" field.
func ChContainsFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContainsFold(FieldCh, v))
}

// RadicalEQ applies the EQ predicate on the "radical" field.
func RadicalEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldRadical, v))
}

// RadicalNEQ applies the NEQ predicate on the "radical" field.
func RadicalNEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldRadical, v))
}

// RadicalIn applies the In predicate on the "radical" field.
func RadicalIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldRadical, vs...))
}

// RadicalNotIn applies the NotIn predicate on the "radical" field.
func RadicalNotIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldRadical, vs...))
}

// RadicalGT applies the GT predicate on the "radical" field.
func RadicalGT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldRadical, v))
}

// RadicalGTE applies the GTE predicate on the "radical" field.
func RadicalGTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldRadical, v))
}

// RadicalLT applies the LT predicate on the "radical" field.
func RadicalLT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldRadical, v))
}

// RadicalLTE applies the LTE predicate on the "radical" field.
func RadicalLTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldRadical, v))
}

// RadicalContains applies the Contains predicate on the "radical" field.
func RadicalContains(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContains(FieldRadical, v))
}

// RadicalHasPrefix applies the HasPrefix predicate on the "radical" field.
func RadicalHasPrefix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasPrefix(FieldRadical, v))
}

// RadicalHasSuffix applies the HasSuffix predicate on the "radical" field.
func RadicalHasSuffix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasSuffix(FieldRadical, v))
}

// RadicalEqualFold applies the EqualFold predicate on the "radical" field.
func RadicalEqualFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEqualFold(FieldRadical, v))
}

// RadicalContainsFold applies the ContainsFold predicate on the "radical" field.
func RadicalContainsFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContainsFold(FieldRadical, v))
}

// RadicalStrokeEQ applies the EQ predicate on the "radical_stroke" field.
func RadicalStrokeEQ(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldRadicalStroke, v))
}

// RadicalStrokeNEQ applies the NEQ predicate on the "radical_stroke" field.
func RadicalStrokeNEQ(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldRadicalStroke, v))
}

// RadicalStrokeIn applies the In predicate on the "radical_stroke" field.
func RadicalStrokeIn(vs ...int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldRadicalStroke, vs...))
}

// RadicalStrokeNotIn applies the NotIn predicate on the "radical_stroke" field.
func RadicalStrokeNotIn(vs ...int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldRadicalStroke, vs...))
}

// RadicalStrokeGT applies the GT predicate on the "radical_stroke" field.
func RadicalStrokeGT(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldRadicalStroke, v))
}

// RadicalStrokeGTE applies the GTE predicate on the "radical_stroke" field.
func RadicalStrokeGTE(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldRadicalStroke, v))
}

// RadicalStrokeLT applies the LT predicate on the "radical_stroke" field.
func RadicalStrokeLT(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldRadicalStroke, v))
}

// RadicalStrokeLTE applies the LTE predicate on the "radical_stroke" field.
func RadicalStrokeLTE(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldRadicalStroke, v))
}

// TotalStrokeEQ applies the EQ predicate on the "total_stroke" field.
func TotalStrokeEQ(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldTotalStroke, v))
}

// TotalStrokeNEQ applies the NEQ predicate on the "total_stroke" field.
func TotalStrokeNEQ(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldTotalStroke, v))
}

// TotalStrokeIn applies the In predicate on the "total_stroke" field.
func TotalStrokeIn(vs ...int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldTotalStroke, vs...))
}

// TotalStrokeNotIn applies the NotIn predicate on the "total_stroke" field.
func TotalStrokeNotIn(vs ...int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldTotalStroke, vs...))
}

// TotalStrokeGT applies the GT predicate on the "total_stroke" field.
func TotalStrokeGT(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldTotalStroke, v))
}

// TotalStrokeGTE applies the GTE predicate on the "total_stroke" field.
func TotalStrokeGTE(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldTotalStroke, v))
}

// TotalStrokeLT applies the LT predicate on the "total_stroke" field.
func TotalStrokeLT(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldTotalStroke, v))
}

// TotalStrokeLTE applies the LTE predicate on the "total_stroke" field.
func TotalStrokeLTE(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldTotalStroke, v))
}

// IsKangXiEQ applies the EQ predicate on the "is_kang_xi" field.
func IsKangXiEQ(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldIsKangXi, v))
}

// IsKangXiNEQ applies the NEQ predicate on the "is_kang_xi" field.
func IsKangXiNEQ(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldIsKangXi, v))
}

// RelateKangXiEQ applies the EQ predicate on the "relate_kang_xi" field.
func RelateKangXiEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldRelateKangXi, v))
}

// RelateKangXiNEQ applies the NEQ predicate on the "relate_kang_xi" field.
func RelateKangXiNEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldRelateKangXi, v))
}

// RelateKangXiIn applies the In predicate on the "relate_kang_xi" field.
func RelateKangXiIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldRelateKangXi, vs...))
}

// RelateKangXiNotIn applies the NotIn predicate on the "relate_kang_xi" field.
func RelateKangXiNotIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldRelateKangXi, vs...))
}

// RelateKangXiGT applies the GT predicate on the "relate_kang_xi" field.
func RelateKangXiGT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldRelateKangXi, v))
}

// RelateKangXiGTE applies the GTE predicate on the "relate_kang_xi" field.
func RelateKangXiGTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldRelateKangXi, v))
}

// RelateKangXiLT applies the LT predicate on the "relate_kang_xi" field.
func RelateKangXiLT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldRelateKangXi, v))
}

// RelateKangXiLTE applies the LTE predicate on the "relate_kang_xi" field.
func RelateKangXiLTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldRelateKangXi, v))
}

// RelateKangXiContains applies the Contains predicate on the "relate_kang_xi" field.
func RelateKangXiContains(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContains(FieldRelateKangXi, v))
}

// RelateKangXiHasPrefix applies the HasPrefix predicate on the "relate_kang_xi" field.
func RelateKangXiHasPrefix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasPrefix(FieldRelateKangXi, v))
}

// RelateKangXiHasSuffix applies the HasSuffix predicate on the "relate_kang_xi" field.
func RelateKangXiHasSuffix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasSuffix(FieldRelateKangXi, v))
}

// RelateKangXiEqualFold applies the EqualFold predicate on the "relate_kang_xi" field.
func RelateKangXiEqualFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEqualFold(FieldRelateKangXi, v))
}

// RelateKangXiContainsFold applies the ContainsFold predicate on the "relate_kang_xi" field.
func RelateKangXiContainsFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContainsFold(FieldRelateKangXi, v))
}

// RelateSimpleEQ applies the EQ predicate on the "relate_simple" field.
func RelateSimpleEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldRelateSimple, v))
}

// RelateSimpleNEQ applies the NEQ predicate on the "relate_simple" field.
func RelateSimpleNEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldRelateSimple, v))
}

// RelateSimpleIn applies the In predicate on the "relate_simple" field.
func RelateSimpleIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldRelateSimple, vs...))
}

// RelateSimpleNotIn applies the NotIn predicate on the "relate_simple" field.
func RelateSimpleNotIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldRelateSimple, vs...))
}

// RelateSimpleGT applies the GT predicate on the "relate_simple" field.
func RelateSimpleGT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldRelateSimple, v))
}

// RelateSimpleGTE applies the GTE predicate on the "relate_simple" field.
func RelateSimpleGTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldRelateSimple, v))
}

// RelateSimpleLT applies the LT predicate on the "relate_simple" field.
func RelateSimpleLT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldRelateSimple, v))
}

// RelateSimpleLTE applies the LTE predicate on the "relate_simple" field.
func RelateSimpleLTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldRelateSimple, v))
}

// RelateSimpleContains applies the Contains predicate on the "relate_simple" field.
func RelateSimpleContains(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContains(FieldRelateSimple, v))
}

// RelateSimpleHasPrefix applies the HasPrefix predicate on the "relate_simple" field.
func RelateSimpleHasPrefix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasPrefix(FieldRelateSimple, v))
}

// RelateSimpleHasSuffix applies the HasSuffix predicate on the "relate_simple" field.
func RelateSimpleHasSuffix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasSuffix(FieldRelateSimple, v))
}

// RelateSimpleEqualFold applies the EqualFold predicate on the "relate_simple" field.
func RelateSimpleEqualFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEqualFold(FieldRelateSimple, v))
}

// RelateSimpleContainsFold applies the ContainsFold predicate on the "relate_simple" field.
func RelateSimpleContainsFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContainsFold(FieldRelateSimple, v))
}

// RelateTraditionalEQ applies the EQ predicate on the "relate_traditional" field.
func RelateTraditionalEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldRelateTraditional, v))
}

// RelateTraditionalNEQ applies the NEQ predicate on the "relate_traditional" field.
func RelateTraditionalNEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldRelateTraditional, v))
}

// RelateTraditionalIn applies the In predicate on the "relate_traditional" field.
func RelateTraditionalIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldRelateTraditional, vs...))
}

// RelateTraditionalNotIn applies the NotIn predicate on the "relate_traditional" field.
func RelateTraditionalNotIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldRelateTraditional, vs...))
}

// RelateTraditionalGT applies the GT predicate on the "relate_traditional" field.
func RelateTraditionalGT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldRelateTraditional, v))
}

// RelateTraditionalGTE applies the GTE predicate on the "relate_traditional" field.
func RelateTraditionalGTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldRelateTraditional, v))
}

// RelateTraditionalLT applies the LT predicate on the "relate_traditional" field.
func RelateTraditionalLT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldRelateTraditional, v))
}

// RelateTraditionalLTE applies the LTE predicate on the "relate_traditional" field.
func RelateTraditionalLTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldRelateTraditional, v))
}

// RelateTraditionalContains applies the Contains predicate on the "relate_traditional" field.
func RelateTraditionalContains(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContains(FieldRelateTraditional, v))
}

// RelateTraditionalHasPrefix applies the HasPrefix predicate on the "relate_traditional" field.
func RelateTraditionalHasPrefix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasPrefix(FieldRelateTraditional, v))
}

// RelateTraditionalHasSuffix applies the HasSuffix predicate on the "relate_traditional" field.
func RelateTraditionalHasSuffix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasSuffix(FieldRelateTraditional, v))
}

// RelateTraditionalEqualFold applies the EqualFold predicate on the "relate_traditional" field.
func RelateTraditionalEqualFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEqualFold(FieldRelateTraditional, v))
}

// RelateTraditionalContainsFold applies the ContainsFold predicate on the "relate_traditional" field.
func RelateTraditionalContainsFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContainsFold(FieldRelateTraditional, v))
}

// RelateVariantEQ applies the EQ predicate on the "relate_variant" field.
func RelateVariantEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldRelateVariant, v))
}

// RelateVariantNEQ applies the NEQ predicate on the "relate_variant" field.
func RelateVariantNEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldRelateVariant, v))
}

// RelateVariantIn applies the In predicate on the "relate_variant" field.
func RelateVariantIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldRelateVariant, vs...))
}

// RelateVariantNotIn applies the NotIn predicate on the "relate_variant" field.
func RelateVariantNotIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldRelateVariant, vs...))
}

// RelateVariantGT applies the GT predicate on the "relate_variant" field.
func RelateVariantGT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldRelateVariant, v))
}

// RelateVariantGTE applies the GTE predicate on the "relate_variant" field.
func RelateVariantGTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldRelateVariant, v))
}

// RelateVariantLT applies the LT predicate on the "relate_variant" field.
func RelateVariantLT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldRelateVariant, v))
}

// RelateVariantLTE applies the LTE predicate on the "relate_variant" field.
func RelateVariantLTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldRelateVariant, v))
}

// RelateVariantContains applies the Contains predicate on the "relate_variant" field.
func RelateVariantContains(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContains(FieldRelateVariant, v))
}

// RelateVariantHasPrefix applies the HasPrefix predicate on the "relate_variant" field.
func RelateVariantHasPrefix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasPrefix(FieldRelateVariant, v))
}

// RelateVariantHasSuffix applies the HasSuffix predicate on the "relate_variant" field.
func RelateVariantHasSuffix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasSuffix(FieldRelateVariant, v))
}

// RelateVariantEqualFold applies the EqualFold predicate on the "relate_variant" field.
func RelateVariantEqualFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEqualFold(FieldRelateVariant, v))
}

// RelateVariantContainsFold applies the ContainsFold predicate on the "relate_variant" field.
func RelateVariantContainsFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContainsFold(FieldRelateVariant, v))
}

// NameScienceEQ applies the EQ predicate on the "name_science" field.
func NameScienceEQ(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldNameScience, v))
}

// NameScienceNEQ applies the NEQ predicate on the "name_science" field.
func NameScienceNEQ(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldNameScience, v))
}

// ScienceStrokeEQ applies the EQ predicate on the "science_stroke" field.
func ScienceStrokeEQ(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldScienceStroke, v))
}

// ScienceStrokeNEQ applies the NEQ predicate on the "science_stroke" field.
func ScienceStrokeNEQ(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldScienceStroke, v))
}

// ScienceStrokeIn applies the In predicate on the "science_stroke" field.
func ScienceStrokeIn(vs ...int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldScienceStroke, vs...))
}

// ScienceStrokeNotIn applies the NotIn predicate on the "science_stroke" field.
func ScienceStrokeNotIn(vs ...int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldScienceStroke, vs...))
}

// ScienceStrokeGT applies the GT predicate on the "science_stroke" field.
func ScienceStrokeGT(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldScienceStroke, v))
}

// ScienceStrokeGTE applies the GTE predicate on the "science_stroke" field.
func ScienceStrokeGTE(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldScienceStroke, v))
}

// ScienceStrokeLT applies the LT predicate on the "science_stroke" field.
func ScienceStrokeLT(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldScienceStroke, v))
}

// ScienceStrokeLTE applies the LTE predicate on the "science_stroke" field.
func ScienceStrokeLTE(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldScienceStroke, v))
}

// WuXingEQ applies the EQ predicate on the "wu_xing" field.
func WuXingEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldWuXing, v))
}

// WuXingNEQ applies the NEQ predicate on the "wu_xing" field.
func WuXingNEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldWuXing, v))
}

// WuXingIn applies the In predicate on the "wu_xing" field.
func WuXingIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldWuXing, vs...))
}

// WuXingNotIn applies the NotIn predicate on the "wu_xing" field.
func WuXingNotIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldWuXing, vs...))
}

// WuXingGT applies the GT predicate on the "wu_xing" field.
func WuXingGT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldWuXing, v))
}

// WuXingGTE applies the GTE predicate on the "wu_xing" field.
func WuXingGTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldWuXing, v))
}

// WuXingLT applies the LT predicate on the "wu_xing" field.
func WuXingLT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldWuXing, v))
}

// WuXingLTE applies the LTE predicate on the "wu_xing" field.
func WuXingLTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldWuXing, v))
}

// WuXingContains applies the Contains predicate on the "wu_xing" field.
func WuXingContains(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContains(FieldWuXing, v))
}

// WuXingHasPrefix applies the HasPrefix predicate on the "wu_xing" field.
func WuXingHasPrefix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasPrefix(FieldWuXing, v))
}

// WuXingHasSuffix applies the HasSuffix predicate on the "wu_xing" field.
func WuXingHasSuffix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasSuffix(FieldWuXing, v))
}

// WuXingEqualFold applies the EqualFold predicate on the "wu_xing" field.
func WuXingEqualFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEqualFold(FieldWuXing, v))
}

// WuXingContainsFold applies the ContainsFold predicate on the "wu_xing" field.
func WuXingContainsFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContainsFold(FieldWuXing, v))
}

// LuckyEQ applies the EQ predicate on the "lucky" field.
func LuckyEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldLucky, v))
}

// LuckyNEQ applies the NEQ predicate on the "lucky" field.
func LuckyNEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldLucky, v))
}

// LuckyIn applies the In predicate on the "lucky" field.
func LuckyIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldLucky, vs...))
}

// LuckyNotIn applies the NotIn predicate on the "lucky" field.
func LuckyNotIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldLucky, vs...))
}

// LuckyGT applies the GT predicate on the "lucky" field.
func LuckyGT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldLucky, v))
}

// LuckyGTE applies the GTE predicate on the "lucky" field.
func LuckyGTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldLucky, v))
}

// LuckyLT applies the LT predicate on the "lucky" field.
func LuckyLT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldLucky, v))
}

// LuckyLTE applies the LTE predicate on the "lucky" field.
func LuckyLTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldLucky, v))
}

// LuckyContains applies the Contains predicate on the "lucky" field.
func LuckyContains(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContains(FieldLucky, v))
}

// LuckyHasPrefix applies the HasPrefix predicate on the "lucky" field.
func LuckyHasPrefix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasPrefix(FieldLucky, v))
}

// LuckyHasSuffix applies the HasSuffix predicate on the "lucky" field.
func LuckyHasSuffix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasSuffix(FieldLucky, v))
}

// LuckyEqualFold applies the EqualFold predicate on the "lucky" field.
func LuckyEqualFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEqualFold(FieldLucky, v))
}

// LuckyContainsFold applies the ContainsFold predicate on the "lucky" field.
func LuckyContainsFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContainsFold(FieldLucky, v))
}

// RegularEQ applies the EQ predicate on the "regular" field.
func RegularEQ(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldRegular, v))
}

// RegularNEQ applies the NEQ predicate on the "regular" field.
func RegularNEQ(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldRegular, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasSuffix(FieldComment, v))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContainsFold(FieldComment, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NCharacter) predicate.NCharacter {
	return predicate.NCharacter(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NCharacter) predicate.NCharacter {
	return predicate.NCharacter(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NCharacter) predicate.NCharacter {
	return predicate.NCharacter(sql.NotPredicates(p))
}
