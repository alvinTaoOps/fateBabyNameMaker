// Code generated by ent, DO NOT EDIT.

package ncharacter

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the ncharacter type in the database.
	Label = "ncharacter"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "hash"
	// FieldPinYin holds the string denoting the pin_yin field in the database.
	FieldPinYin = "pin_yin"
	// FieldChID holds the string denoting the ch_id field in the database.
	FieldChID = "ch_id"
	// FieldCh holds the string denoting the ch field in the database.
	FieldCh = "ch"
	// FieldRadical holds the string denoting the radical field in the database.
	FieldRadical = "radical"
	// FieldRadicalStroke holds the string denoting the radical_stroke field in the database.
	FieldRadicalStroke = "radical_stroke"
	// FieldTotalStroke holds the string denoting the total_stroke field in the database.
	FieldTotalStroke = "total_stroke"
	// FieldIsKangXi holds the string denoting the is_kang_xi field in the database.
	FieldIsKangXi = "is_kang_xi"
	// FieldRelateKangXi holds the string denoting the relate_kang_xi field in the database.
	FieldRelateKangXi = "relate_kang_xi"
	// FieldRelateSimple holds the string denoting the relate_simple field in the database.
	FieldRelateSimple = "relate_simple"
	// FieldRelateTraditional holds the string denoting the relate_traditional field in the database.
	FieldRelateTraditional = "relate_traditional"
	// FieldRelateVariant holds the string denoting the relate_variant field in the database.
	FieldRelateVariant = "relate_variant"
	// FieldNameScience holds the string denoting the name_science field in the database.
	FieldNameScience = "name_science"
	// FieldScienceStroke holds the string denoting the science_stroke field in the database.
	FieldScienceStroke = "science_stroke"
	// FieldWuXing holds the string denoting the wu_xing field in the database.
	FieldWuXing = "wu_xing"
	// FieldLucky holds the string denoting the lucky field in the database.
	FieldLucky = "lucky"
	// FieldRegular holds the string denoting the regular field in the database.
	FieldRegular = "regular"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// Table holds the table name of the ncharacter in the database.
	Table = "n_character"
)

// Columns holds all SQL columns for ncharacter fields.
var Columns = []string{
	FieldID,
	FieldPinYin,
	FieldChID,
	FieldCh,
	FieldRadical,
	FieldRadicalStroke,
	FieldTotalStroke,
	FieldIsKangXi,
	FieldRelateKangXi,
	FieldRelateSimple,
	FieldRelateTraditional,
	FieldRelateVariant,
	FieldNameScience,
	FieldScienceStroke,
	FieldWuXing,
	FieldLucky,
	FieldRegular,
	FieldComment,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the NCharacter queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPinYin orders the results by the pin_yin field.
func ByPinYin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPinYin, opts...).ToFunc()
}

// ByChID orders the results by the ch_id field.
func ByChID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChID, opts...).ToFunc()
}

// ByCh orders the results by the ch field.
func ByCh(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCh, opts...).ToFunc()
}

// ByRadical orders the results by the radical field.
func ByRadical(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRadical, opts...).ToFunc()
}

// ByRadicalStroke orders the results by the radical_stroke field.
func ByRadicalStroke(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRadicalStroke, opts...).ToFunc()
}

// ByTotalStroke orders the results by the total_stroke field.
func ByTotalStroke(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalStroke, opts...).ToFunc()
}

// ByIsKangXi orders the results by the is_kang_xi field.
func ByIsKangXi(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsKangXi, opts...).ToFunc()
}

// ByRelateKangXi orders the results by the relate_kang_xi field.
func ByRelateKangXi(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelateKangXi, opts...).ToFunc()
}

// ByRelateSimple orders the results by the relate_simple field.
func ByRelateSimple(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelateSimple, opts...).ToFunc()
}

// ByRelateTraditional orders the results by the relate_traditional field.
func ByRelateTraditional(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelateTraditional, opts...).ToFunc()
}

// ByRelateVariant orders the results by the relate_variant field.
func ByRelateVariant(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelateVariant, opts...).ToFunc()
}

// ByNameScience orders the results by the name_science field.
func ByNameScience(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameScience, opts...).ToFunc()
}

// ByScienceStroke orders the results by the science_stroke field.
func ByScienceStroke(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScienceStroke, opts...).ToFunc()
}

// ByWuXing orders the results by the wu_xing field.
func ByWuXing(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWuXing, opts...).ToFunc()
}

// ByLucky orders the results by the lucky field.
func ByLucky(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLucky, opts...).ToFunc()
}

// ByRegular orders the results by the regular field.
func ByRegular(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegular, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}
