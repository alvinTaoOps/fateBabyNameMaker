// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/babyname/fate/ent/predicate"
	"github.com/babyname/fate/ent/wugelucky"
)

// WuGeLuckyUpdate is the builder for updating WuGeLucky entities.
type WuGeLuckyUpdate struct {
	config
	hooks    []Hook
	mutation *WuGeLuckyMutation
}

// Where appends a list predicates to the WuGeLuckyUpdate builder.
func (wglu *WuGeLuckyUpdate) Where(ps ...predicate.WuGeLucky) *WuGeLuckyUpdate {
	wglu.mutation.Where(ps...)
	return wglu
}

// SetLastStroke1 sets the "last_stroke_1" field.
func (wglu *WuGeLuckyUpdate) SetLastStroke1(i int32) *WuGeLuckyUpdate {
	wglu.mutation.ResetLastStroke1()
	wglu.mutation.SetLastStroke1(i)
	return wglu
}

// SetNillableLastStroke1 sets the "last_stroke_1" field if the given value is not nil.
func (wglu *WuGeLuckyUpdate) SetNillableLastStroke1(i *int32) *WuGeLuckyUpdate {
	if i != nil {
		wglu.SetLastStroke1(*i)
	}
	return wglu
}

// AddLastStroke1 adds i to the "last_stroke_1" field.
func (wglu *WuGeLuckyUpdate) AddLastStroke1(i int32) *WuGeLuckyUpdate {
	wglu.mutation.AddLastStroke1(i)
	return wglu
}

// ClearLastStroke1 clears the value of the "last_stroke_1" field.
func (wglu *WuGeLuckyUpdate) ClearLastStroke1() *WuGeLuckyUpdate {
	wglu.mutation.ClearLastStroke1()
	return wglu
}

// SetLastStroke2 sets the "last_stroke_2" field.
func (wglu *WuGeLuckyUpdate) SetLastStroke2(i int32) *WuGeLuckyUpdate {
	wglu.mutation.ResetLastStroke2()
	wglu.mutation.SetLastStroke2(i)
	return wglu
}

// SetNillableLastStroke2 sets the "last_stroke_2" field if the given value is not nil.
func (wglu *WuGeLuckyUpdate) SetNillableLastStroke2(i *int32) *WuGeLuckyUpdate {
	if i != nil {
		wglu.SetLastStroke2(*i)
	}
	return wglu
}

// AddLastStroke2 adds i to the "last_stroke_2" field.
func (wglu *WuGeLuckyUpdate) AddLastStroke2(i int32) *WuGeLuckyUpdate {
	wglu.mutation.AddLastStroke2(i)
	return wglu
}

// ClearLastStroke2 clears the value of the "last_stroke_2" field.
func (wglu *WuGeLuckyUpdate) ClearLastStroke2() *WuGeLuckyUpdate {
	wglu.mutation.ClearLastStroke2()
	return wglu
}

// SetFirstStroke1 sets the "first_stroke_1" field.
func (wglu *WuGeLuckyUpdate) SetFirstStroke1(i int32) *WuGeLuckyUpdate {
	wglu.mutation.ResetFirstStroke1()
	wglu.mutation.SetFirstStroke1(i)
	return wglu
}

// SetNillableFirstStroke1 sets the "first_stroke_1" field if the given value is not nil.
func (wglu *WuGeLuckyUpdate) SetNillableFirstStroke1(i *int32) *WuGeLuckyUpdate {
	if i != nil {
		wglu.SetFirstStroke1(*i)
	}
	return wglu
}

// AddFirstStroke1 adds i to the "first_stroke_1" field.
func (wglu *WuGeLuckyUpdate) AddFirstStroke1(i int32) *WuGeLuckyUpdate {
	wglu.mutation.AddFirstStroke1(i)
	return wglu
}

// ClearFirstStroke1 clears the value of the "first_stroke_1" field.
func (wglu *WuGeLuckyUpdate) ClearFirstStroke1() *WuGeLuckyUpdate {
	wglu.mutation.ClearFirstStroke1()
	return wglu
}

// SetFirstStroke2 sets the "first_stroke_2" field.
func (wglu *WuGeLuckyUpdate) SetFirstStroke2(i int32) *WuGeLuckyUpdate {
	wglu.mutation.ResetFirstStroke2()
	wglu.mutation.SetFirstStroke2(i)
	return wglu
}

// SetNillableFirstStroke2 sets the "first_stroke_2" field if the given value is not nil.
func (wglu *WuGeLuckyUpdate) SetNillableFirstStroke2(i *int32) *WuGeLuckyUpdate {
	if i != nil {
		wglu.SetFirstStroke2(*i)
	}
	return wglu
}

// AddFirstStroke2 adds i to the "first_stroke_2" field.
func (wglu *WuGeLuckyUpdate) AddFirstStroke2(i int32) *WuGeLuckyUpdate {
	wglu.mutation.AddFirstStroke2(i)
	return wglu
}

// ClearFirstStroke2 clears the value of the "first_stroke_2" field.
func (wglu *WuGeLuckyUpdate) ClearFirstStroke2() *WuGeLuckyUpdate {
	wglu.mutation.ClearFirstStroke2()
	return wglu
}

// SetTianGe sets the "tian_ge" field.
func (wglu *WuGeLuckyUpdate) SetTianGe(i int32) *WuGeLuckyUpdate {
	wglu.mutation.ResetTianGe()
	wglu.mutation.SetTianGe(i)
	return wglu
}

// SetNillableTianGe sets the "tian_ge" field if the given value is not nil.
func (wglu *WuGeLuckyUpdate) SetNillableTianGe(i *int32) *WuGeLuckyUpdate {
	if i != nil {
		wglu.SetTianGe(*i)
	}
	return wglu
}

// AddTianGe adds i to the "tian_ge" field.
func (wglu *WuGeLuckyUpdate) AddTianGe(i int32) *WuGeLuckyUpdate {
	wglu.mutation.AddTianGe(i)
	return wglu
}

// ClearTianGe clears the value of the "tian_ge" field.
func (wglu *WuGeLuckyUpdate) ClearTianGe() *WuGeLuckyUpdate {
	wglu.mutation.ClearTianGe()
	return wglu
}

// SetTianDaYan sets the "tian_da_yan" field.
func (wglu *WuGeLuckyUpdate) SetTianDaYan(s string) *WuGeLuckyUpdate {
	wglu.mutation.SetTianDaYan(s)
	return wglu
}

// SetNillableTianDaYan sets the "tian_da_yan" field if the given value is not nil.
func (wglu *WuGeLuckyUpdate) SetNillableTianDaYan(s *string) *WuGeLuckyUpdate {
	if s != nil {
		wglu.SetTianDaYan(*s)
	}
	return wglu
}

// ClearTianDaYan clears the value of the "tian_da_yan" field.
func (wglu *WuGeLuckyUpdate) ClearTianDaYan() *WuGeLuckyUpdate {
	wglu.mutation.ClearTianDaYan()
	return wglu
}

// SetRenGe sets the "ren_ge" field.
func (wglu *WuGeLuckyUpdate) SetRenGe(i int32) *WuGeLuckyUpdate {
	wglu.mutation.ResetRenGe()
	wglu.mutation.SetRenGe(i)
	return wglu
}

// SetNillableRenGe sets the "ren_ge" field if the given value is not nil.
func (wglu *WuGeLuckyUpdate) SetNillableRenGe(i *int32) *WuGeLuckyUpdate {
	if i != nil {
		wglu.SetRenGe(*i)
	}
	return wglu
}

// AddRenGe adds i to the "ren_ge" field.
func (wglu *WuGeLuckyUpdate) AddRenGe(i int32) *WuGeLuckyUpdate {
	wglu.mutation.AddRenGe(i)
	return wglu
}

// ClearRenGe clears the value of the "ren_ge" field.
func (wglu *WuGeLuckyUpdate) ClearRenGe() *WuGeLuckyUpdate {
	wglu.mutation.ClearRenGe()
	return wglu
}

// SetRenDaYan sets the "ren_da_yan" field.
func (wglu *WuGeLuckyUpdate) SetRenDaYan(s string) *WuGeLuckyUpdate {
	wglu.mutation.SetRenDaYan(s)
	return wglu
}

// SetNillableRenDaYan sets the "ren_da_yan" field if the given value is not nil.
func (wglu *WuGeLuckyUpdate) SetNillableRenDaYan(s *string) *WuGeLuckyUpdate {
	if s != nil {
		wglu.SetRenDaYan(*s)
	}
	return wglu
}

// ClearRenDaYan clears the value of the "ren_da_yan" field.
func (wglu *WuGeLuckyUpdate) ClearRenDaYan() *WuGeLuckyUpdate {
	wglu.mutation.ClearRenDaYan()
	return wglu
}

// SetDiGe sets the "di_ge" field.
func (wglu *WuGeLuckyUpdate) SetDiGe(i int32) *WuGeLuckyUpdate {
	wglu.mutation.ResetDiGe()
	wglu.mutation.SetDiGe(i)
	return wglu
}

// SetNillableDiGe sets the "di_ge" field if the given value is not nil.
func (wglu *WuGeLuckyUpdate) SetNillableDiGe(i *int32) *WuGeLuckyUpdate {
	if i != nil {
		wglu.SetDiGe(*i)
	}
	return wglu
}

// AddDiGe adds i to the "di_ge" field.
func (wglu *WuGeLuckyUpdate) AddDiGe(i int32) *WuGeLuckyUpdate {
	wglu.mutation.AddDiGe(i)
	return wglu
}

// ClearDiGe clears the value of the "di_ge" field.
func (wglu *WuGeLuckyUpdate) ClearDiGe() *WuGeLuckyUpdate {
	wglu.mutation.ClearDiGe()
	return wglu
}

// SetDiDaYan sets the "di_da_yan" field.
func (wglu *WuGeLuckyUpdate) SetDiDaYan(s string) *WuGeLuckyUpdate {
	wglu.mutation.SetDiDaYan(s)
	return wglu
}

// SetNillableDiDaYan sets the "di_da_yan" field if the given value is not nil.
func (wglu *WuGeLuckyUpdate) SetNillableDiDaYan(s *string) *WuGeLuckyUpdate {
	if s != nil {
		wglu.SetDiDaYan(*s)
	}
	return wglu
}

// ClearDiDaYan clears the value of the "di_da_yan" field.
func (wglu *WuGeLuckyUpdate) ClearDiDaYan() *WuGeLuckyUpdate {
	wglu.mutation.ClearDiDaYan()
	return wglu
}

// SetWaiGe sets the "wai_ge" field.
func (wglu *WuGeLuckyUpdate) SetWaiGe(i int32) *WuGeLuckyUpdate {
	wglu.mutation.ResetWaiGe()
	wglu.mutation.SetWaiGe(i)
	return wglu
}

// SetNillableWaiGe sets the "wai_ge" field if the given value is not nil.
func (wglu *WuGeLuckyUpdate) SetNillableWaiGe(i *int32) *WuGeLuckyUpdate {
	if i != nil {
		wglu.SetWaiGe(*i)
	}
	return wglu
}

// AddWaiGe adds i to the "wai_ge" field.
func (wglu *WuGeLuckyUpdate) AddWaiGe(i int32) *WuGeLuckyUpdate {
	wglu.mutation.AddWaiGe(i)
	return wglu
}

// ClearWaiGe clears the value of the "wai_ge" field.
func (wglu *WuGeLuckyUpdate) ClearWaiGe() *WuGeLuckyUpdate {
	wglu.mutation.ClearWaiGe()
	return wglu
}

// SetWaiDaYan sets the "wai_da_yan" field.
func (wglu *WuGeLuckyUpdate) SetWaiDaYan(s string) *WuGeLuckyUpdate {
	wglu.mutation.SetWaiDaYan(s)
	return wglu
}

// SetNillableWaiDaYan sets the "wai_da_yan" field if the given value is not nil.
func (wglu *WuGeLuckyUpdate) SetNillableWaiDaYan(s *string) *WuGeLuckyUpdate {
	if s != nil {
		wglu.SetWaiDaYan(*s)
	}
	return wglu
}

// ClearWaiDaYan clears the value of the "wai_da_yan" field.
func (wglu *WuGeLuckyUpdate) ClearWaiDaYan() *WuGeLuckyUpdate {
	wglu.mutation.ClearWaiDaYan()
	return wglu
}

// SetZongGe sets the "zong_ge" field.
func (wglu *WuGeLuckyUpdate) SetZongGe(i int32) *WuGeLuckyUpdate {
	wglu.mutation.ResetZongGe()
	wglu.mutation.SetZongGe(i)
	return wglu
}

// SetNillableZongGe sets the "zong_ge" field if the given value is not nil.
func (wglu *WuGeLuckyUpdate) SetNillableZongGe(i *int32) *WuGeLuckyUpdate {
	if i != nil {
		wglu.SetZongGe(*i)
	}
	return wglu
}

// AddZongGe adds i to the "zong_ge" field.
func (wglu *WuGeLuckyUpdate) AddZongGe(i int32) *WuGeLuckyUpdate {
	wglu.mutation.AddZongGe(i)
	return wglu
}

// ClearZongGe clears the value of the "zong_ge" field.
func (wglu *WuGeLuckyUpdate) ClearZongGe() *WuGeLuckyUpdate {
	wglu.mutation.ClearZongGe()
	return wglu
}

// SetZongDaYan sets the "zong_da_yan" field.
func (wglu *WuGeLuckyUpdate) SetZongDaYan(s string) *WuGeLuckyUpdate {
	wglu.mutation.SetZongDaYan(s)
	return wglu
}

// SetNillableZongDaYan sets the "zong_da_yan" field if the given value is not nil.
func (wglu *WuGeLuckyUpdate) SetNillableZongDaYan(s *string) *WuGeLuckyUpdate {
	if s != nil {
		wglu.SetZongDaYan(*s)
	}
	return wglu
}

// ClearZongDaYan clears the value of the "zong_da_yan" field.
func (wglu *WuGeLuckyUpdate) ClearZongDaYan() *WuGeLuckyUpdate {
	wglu.mutation.ClearZongDaYan()
	return wglu
}

// SetZongLucky sets the "zong_lucky" field.
func (wglu *WuGeLuckyUpdate) SetZongLucky(b bool) *WuGeLuckyUpdate {
	wglu.mutation.SetZongLucky(b)
	return wglu
}

// SetNillableZongLucky sets the "zong_lucky" field if the given value is not nil.
func (wglu *WuGeLuckyUpdate) SetNillableZongLucky(b *bool) *WuGeLuckyUpdate {
	if b != nil {
		wglu.SetZongLucky(*b)
	}
	return wglu
}

// ClearZongLucky clears the value of the "zong_lucky" field.
func (wglu *WuGeLuckyUpdate) ClearZongLucky() *WuGeLuckyUpdate {
	wglu.mutation.ClearZongLucky()
	return wglu
}

// SetZongSex sets the "zong_sex" field.
func (wglu *WuGeLuckyUpdate) SetZongSex(b bool) *WuGeLuckyUpdate {
	wglu.mutation.SetZongSex(b)
	return wglu
}

// SetNillableZongSex sets the "zong_sex" field if the given value is not nil.
func (wglu *WuGeLuckyUpdate) SetNillableZongSex(b *bool) *WuGeLuckyUpdate {
	if b != nil {
		wglu.SetZongSex(*b)
	}
	return wglu
}

// ClearZongSex clears the value of the "zong_sex" field.
func (wglu *WuGeLuckyUpdate) ClearZongSex() *WuGeLuckyUpdate {
	wglu.mutation.ClearZongSex()
	return wglu
}

// SetZongMax sets the "zong_max" field.
func (wglu *WuGeLuckyUpdate) SetZongMax(b bool) *WuGeLuckyUpdate {
	wglu.mutation.SetZongMax(b)
	return wglu
}

// SetNillableZongMax sets the "zong_max" field if the given value is not nil.
func (wglu *WuGeLuckyUpdate) SetNillableZongMax(b *bool) *WuGeLuckyUpdate {
	if b != nil {
		wglu.SetZongMax(*b)
	}
	return wglu
}

// ClearZongMax clears the value of the "zong_max" field.
func (wglu *WuGeLuckyUpdate) ClearZongMax() *WuGeLuckyUpdate {
	wglu.mutation.ClearZongMax()
	return wglu
}

// Mutation returns the WuGeLuckyMutation object of the builder.
func (wglu *WuGeLuckyUpdate) Mutation() *WuGeLuckyMutation {
	return wglu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wglu *WuGeLuckyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(wglu.hooks) == 0 {
		affected, err = wglu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WuGeLuckyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wglu.mutation = mutation
			affected, err = wglu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wglu.hooks) - 1; i >= 0; i-- {
			if wglu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wglu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wglu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wglu *WuGeLuckyUpdate) SaveX(ctx context.Context) int {
	affected, err := wglu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wglu *WuGeLuckyUpdate) Exec(ctx context.Context) error {
	_, err := wglu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wglu *WuGeLuckyUpdate) ExecX(ctx context.Context) {
	if err := wglu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wglu *WuGeLuckyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   wugelucky.Table,
			Columns: wugelucky.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: wugelucky.FieldID,
			},
		},
	}
	if ps := wglu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wglu.mutation.LastStroke1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldLastStroke1,
		})
	}
	if value, ok := wglu.mutation.AddedLastStroke1(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldLastStroke1,
		})
	}
	if wglu.mutation.LastStroke1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: wugelucky.FieldLastStroke1,
		})
	}
	if value, ok := wglu.mutation.LastStroke2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldLastStroke2,
		})
	}
	if value, ok := wglu.mutation.AddedLastStroke2(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldLastStroke2,
		})
	}
	if wglu.mutation.LastStroke2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: wugelucky.FieldLastStroke2,
		})
	}
	if value, ok := wglu.mutation.FirstStroke1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldFirstStroke1,
		})
	}
	if value, ok := wglu.mutation.AddedFirstStroke1(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldFirstStroke1,
		})
	}
	if wglu.mutation.FirstStroke1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: wugelucky.FieldFirstStroke1,
		})
	}
	if value, ok := wglu.mutation.FirstStroke2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldFirstStroke2,
		})
	}
	if value, ok := wglu.mutation.AddedFirstStroke2(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldFirstStroke2,
		})
	}
	if wglu.mutation.FirstStroke2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: wugelucky.FieldFirstStroke2,
		})
	}
	if value, ok := wglu.mutation.TianGe(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldTianGe,
		})
	}
	if value, ok := wglu.mutation.AddedTianGe(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldTianGe,
		})
	}
	if wglu.mutation.TianGeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: wugelucky.FieldTianGe,
		})
	}
	if value, ok := wglu.mutation.TianDaYan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wugelucky.FieldTianDaYan,
		})
	}
	if wglu.mutation.TianDaYanCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: wugelucky.FieldTianDaYan,
		})
	}
	if value, ok := wglu.mutation.RenGe(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldRenGe,
		})
	}
	if value, ok := wglu.mutation.AddedRenGe(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldRenGe,
		})
	}
	if wglu.mutation.RenGeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: wugelucky.FieldRenGe,
		})
	}
	if value, ok := wglu.mutation.RenDaYan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wugelucky.FieldRenDaYan,
		})
	}
	if wglu.mutation.RenDaYanCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: wugelucky.FieldRenDaYan,
		})
	}
	if value, ok := wglu.mutation.DiGe(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldDiGe,
		})
	}
	if value, ok := wglu.mutation.AddedDiGe(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldDiGe,
		})
	}
	if wglu.mutation.DiGeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: wugelucky.FieldDiGe,
		})
	}
	if value, ok := wglu.mutation.DiDaYan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wugelucky.FieldDiDaYan,
		})
	}
	if wglu.mutation.DiDaYanCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: wugelucky.FieldDiDaYan,
		})
	}
	if value, ok := wglu.mutation.WaiGe(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldWaiGe,
		})
	}
	if value, ok := wglu.mutation.AddedWaiGe(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldWaiGe,
		})
	}
	if wglu.mutation.WaiGeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: wugelucky.FieldWaiGe,
		})
	}
	if value, ok := wglu.mutation.WaiDaYan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wugelucky.FieldWaiDaYan,
		})
	}
	if wglu.mutation.WaiDaYanCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: wugelucky.FieldWaiDaYan,
		})
	}
	if value, ok := wglu.mutation.ZongGe(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldZongGe,
		})
	}
	if value, ok := wglu.mutation.AddedZongGe(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldZongGe,
		})
	}
	if wglu.mutation.ZongGeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: wugelucky.FieldZongGe,
		})
	}
	if value, ok := wglu.mutation.ZongDaYan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wugelucky.FieldZongDaYan,
		})
	}
	if wglu.mutation.ZongDaYanCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: wugelucky.FieldZongDaYan,
		})
	}
	if value, ok := wglu.mutation.ZongLucky(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: wugelucky.FieldZongLucky,
		})
	}
	if wglu.mutation.ZongLuckyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: wugelucky.FieldZongLucky,
		})
	}
	if value, ok := wglu.mutation.ZongSex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: wugelucky.FieldZongSex,
		})
	}
	if wglu.mutation.ZongSexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: wugelucky.FieldZongSex,
		})
	}
	if value, ok := wglu.mutation.ZongMax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: wugelucky.FieldZongMax,
		})
	}
	if wglu.mutation.ZongMaxCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: wugelucky.FieldZongMax,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wglu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wugelucky.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// WuGeLuckyUpdateOne is the builder for updating a single WuGeLucky entity.
type WuGeLuckyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WuGeLuckyMutation
}

// SetLastStroke1 sets the "last_stroke_1" field.
func (wgluo *WuGeLuckyUpdateOne) SetLastStroke1(i int32) *WuGeLuckyUpdateOne {
	wgluo.mutation.ResetLastStroke1()
	wgluo.mutation.SetLastStroke1(i)
	return wgluo
}

// SetNillableLastStroke1 sets the "last_stroke_1" field if the given value is not nil.
func (wgluo *WuGeLuckyUpdateOne) SetNillableLastStroke1(i *int32) *WuGeLuckyUpdateOne {
	if i != nil {
		wgluo.SetLastStroke1(*i)
	}
	return wgluo
}

// AddLastStroke1 adds i to the "last_stroke_1" field.
func (wgluo *WuGeLuckyUpdateOne) AddLastStroke1(i int32) *WuGeLuckyUpdateOne {
	wgluo.mutation.AddLastStroke1(i)
	return wgluo
}

// ClearLastStroke1 clears the value of the "last_stroke_1" field.
func (wgluo *WuGeLuckyUpdateOne) ClearLastStroke1() *WuGeLuckyUpdateOne {
	wgluo.mutation.ClearLastStroke1()
	return wgluo
}

// SetLastStroke2 sets the "last_stroke_2" field.
func (wgluo *WuGeLuckyUpdateOne) SetLastStroke2(i int32) *WuGeLuckyUpdateOne {
	wgluo.mutation.ResetLastStroke2()
	wgluo.mutation.SetLastStroke2(i)
	return wgluo
}

// SetNillableLastStroke2 sets the "last_stroke_2" field if the given value is not nil.
func (wgluo *WuGeLuckyUpdateOne) SetNillableLastStroke2(i *int32) *WuGeLuckyUpdateOne {
	if i != nil {
		wgluo.SetLastStroke2(*i)
	}
	return wgluo
}

// AddLastStroke2 adds i to the "last_stroke_2" field.
func (wgluo *WuGeLuckyUpdateOne) AddLastStroke2(i int32) *WuGeLuckyUpdateOne {
	wgluo.mutation.AddLastStroke2(i)
	return wgluo
}

// ClearLastStroke2 clears the value of the "last_stroke_2" field.
func (wgluo *WuGeLuckyUpdateOne) ClearLastStroke2() *WuGeLuckyUpdateOne {
	wgluo.mutation.ClearLastStroke2()
	return wgluo
}

// SetFirstStroke1 sets the "first_stroke_1" field.
func (wgluo *WuGeLuckyUpdateOne) SetFirstStroke1(i int32) *WuGeLuckyUpdateOne {
	wgluo.mutation.ResetFirstStroke1()
	wgluo.mutation.SetFirstStroke1(i)
	return wgluo
}

// SetNillableFirstStroke1 sets the "first_stroke_1" field if the given value is not nil.
func (wgluo *WuGeLuckyUpdateOne) SetNillableFirstStroke1(i *int32) *WuGeLuckyUpdateOne {
	if i != nil {
		wgluo.SetFirstStroke1(*i)
	}
	return wgluo
}

// AddFirstStroke1 adds i to the "first_stroke_1" field.
func (wgluo *WuGeLuckyUpdateOne) AddFirstStroke1(i int32) *WuGeLuckyUpdateOne {
	wgluo.mutation.AddFirstStroke1(i)
	return wgluo
}

// ClearFirstStroke1 clears the value of the "first_stroke_1" field.
func (wgluo *WuGeLuckyUpdateOne) ClearFirstStroke1() *WuGeLuckyUpdateOne {
	wgluo.mutation.ClearFirstStroke1()
	return wgluo
}

// SetFirstStroke2 sets the "first_stroke_2" field.
func (wgluo *WuGeLuckyUpdateOne) SetFirstStroke2(i int32) *WuGeLuckyUpdateOne {
	wgluo.mutation.ResetFirstStroke2()
	wgluo.mutation.SetFirstStroke2(i)
	return wgluo
}

// SetNillableFirstStroke2 sets the "first_stroke_2" field if the given value is not nil.
func (wgluo *WuGeLuckyUpdateOne) SetNillableFirstStroke2(i *int32) *WuGeLuckyUpdateOne {
	if i != nil {
		wgluo.SetFirstStroke2(*i)
	}
	return wgluo
}

// AddFirstStroke2 adds i to the "first_stroke_2" field.
func (wgluo *WuGeLuckyUpdateOne) AddFirstStroke2(i int32) *WuGeLuckyUpdateOne {
	wgluo.mutation.AddFirstStroke2(i)
	return wgluo
}

// ClearFirstStroke2 clears the value of the "first_stroke_2" field.
func (wgluo *WuGeLuckyUpdateOne) ClearFirstStroke2() *WuGeLuckyUpdateOne {
	wgluo.mutation.ClearFirstStroke2()
	return wgluo
}

// SetTianGe sets the "tian_ge" field.
func (wgluo *WuGeLuckyUpdateOne) SetTianGe(i int32) *WuGeLuckyUpdateOne {
	wgluo.mutation.ResetTianGe()
	wgluo.mutation.SetTianGe(i)
	return wgluo
}

// SetNillableTianGe sets the "tian_ge" field if the given value is not nil.
func (wgluo *WuGeLuckyUpdateOne) SetNillableTianGe(i *int32) *WuGeLuckyUpdateOne {
	if i != nil {
		wgluo.SetTianGe(*i)
	}
	return wgluo
}

// AddTianGe adds i to the "tian_ge" field.
func (wgluo *WuGeLuckyUpdateOne) AddTianGe(i int32) *WuGeLuckyUpdateOne {
	wgluo.mutation.AddTianGe(i)
	return wgluo
}

// ClearTianGe clears the value of the "tian_ge" field.
func (wgluo *WuGeLuckyUpdateOne) ClearTianGe() *WuGeLuckyUpdateOne {
	wgluo.mutation.ClearTianGe()
	return wgluo
}

// SetTianDaYan sets the "tian_da_yan" field.
func (wgluo *WuGeLuckyUpdateOne) SetTianDaYan(s string) *WuGeLuckyUpdateOne {
	wgluo.mutation.SetTianDaYan(s)
	return wgluo
}

// SetNillableTianDaYan sets the "tian_da_yan" field if the given value is not nil.
func (wgluo *WuGeLuckyUpdateOne) SetNillableTianDaYan(s *string) *WuGeLuckyUpdateOne {
	if s != nil {
		wgluo.SetTianDaYan(*s)
	}
	return wgluo
}

// ClearTianDaYan clears the value of the "tian_da_yan" field.
func (wgluo *WuGeLuckyUpdateOne) ClearTianDaYan() *WuGeLuckyUpdateOne {
	wgluo.mutation.ClearTianDaYan()
	return wgluo
}

// SetRenGe sets the "ren_ge" field.
func (wgluo *WuGeLuckyUpdateOne) SetRenGe(i int32) *WuGeLuckyUpdateOne {
	wgluo.mutation.ResetRenGe()
	wgluo.mutation.SetRenGe(i)
	return wgluo
}

// SetNillableRenGe sets the "ren_ge" field if the given value is not nil.
func (wgluo *WuGeLuckyUpdateOne) SetNillableRenGe(i *int32) *WuGeLuckyUpdateOne {
	if i != nil {
		wgluo.SetRenGe(*i)
	}
	return wgluo
}

// AddRenGe adds i to the "ren_ge" field.
func (wgluo *WuGeLuckyUpdateOne) AddRenGe(i int32) *WuGeLuckyUpdateOne {
	wgluo.mutation.AddRenGe(i)
	return wgluo
}

// ClearRenGe clears the value of the "ren_ge" field.
func (wgluo *WuGeLuckyUpdateOne) ClearRenGe() *WuGeLuckyUpdateOne {
	wgluo.mutation.ClearRenGe()
	return wgluo
}

// SetRenDaYan sets the "ren_da_yan" field.
func (wgluo *WuGeLuckyUpdateOne) SetRenDaYan(s string) *WuGeLuckyUpdateOne {
	wgluo.mutation.SetRenDaYan(s)
	return wgluo
}

// SetNillableRenDaYan sets the "ren_da_yan" field if the given value is not nil.
func (wgluo *WuGeLuckyUpdateOne) SetNillableRenDaYan(s *string) *WuGeLuckyUpdateOne {
	if s != nil {
		wgluo.SetRenDaYan(*s)
	}
	return wgluo
}

// ClearRenDaYan clears the value of the "ren_da_yan" field.
func (wgluo *WuGeLuckyUpdateOne) ClearRenDaYan() *WuGeLuckyUpdateOne {
	wgluo.mutation.ClearRenDaYan()
	return wgluo
}

// SetDiGe sets the "di_ge" field.
func (wgluo *WuGeLuckyUpdateOne) SetDiGe(i int32) *WuGeLuckyUpdateOne {
	wgluo.mutation.ResetDiGe()
	wgluo.mutation.SetDiGe(i)
	return wgluo
}

// SetNillableDiGe sets the "di_ge" field if the given value is not nil.
func (wgluo *WuGeLuckyUpdateOne) SetNillableDiGe(i *int32) *WuGeLuckyUpdateOne {
	if i != nil {
		wgluo.SetDiGe(*i)
	}
	return wgluo
}

// AddDiGe adds i to the "di_ge" field.
func (wgluo *WuGeLuckyUpdateOne) AddDiGe(i int32) *WuGeLuckyUpdateOne {
	wgluo.mutation.AddDiGe(i)
	return wgluo
}

// ClearDiGe clears the value of the "di_ge" field.
func (wgluo *WuGeLuckyUpdateOne) ClearDiGe() *WuGeLuckyUpdateOne {
	wgluo.mutation.ClearDiGe()
	return wgluo
}

// SetDiDaYan sets the "di_da_yan" field.
func (wgluo *WuGeLuckyUpdateOne) SetDiDaYan(s string) *WuGeLuckyUpdateOne {
	wgluo.mutation.SetDiDaYan(s)
	return wgluo
}

// SetNillableDiDaYan sets the "di_da_yan" field if the given value is not nil.
func (wgluo *WuGeLuckyUpdateOne) SetNillableDiDaYan(s *string) *WuGeLuckyUpdateOne {
	if s != nil {
		wgluo.SetDiDaYan(*s)
	}
	return wgluo
}

// ClearDiDaYan clears the value of the "di_da_yan" field.
func (wgluo *WuGeLuckyUpdateOne) ClearDiDaYan() *WuGeLuckyUpdateOne {
	wgluo.mutation.ClearDiDaYan()
	return wgluo
}

// SetWaiGe sets the "wai_ge" field.
func (wgluo *WuGeLuckyUpdateOne) SetWaiGe(i int32) *WuGeLuckyUpdateOne {
	wgluo.mutation.ResetWaiGe()
	wgluo.mutation.SetWaiGe(i)
	return wgluo
}

// SetNillableWaiGe sets the "wai_ge" field if the given value is not nil.
func (wgluo *WuGeLuckyUpdateOne) SetNillableWaiGe(i *int32) *WuGeLuckyUpdateOne {
	if i != nil {
		wgluo.SetWaiGe(*i)
	}
	return wgluo
}

// AddWaiGe adds i to the "wai_ge" field.
func (wgluo *WuGeLuckyUpdateOne) AddWaiGe(i int32) *WuGeLuckyUpdateOne {
	wgluo.mutation.AddWaiGe(i)
	return wgluo
}

// ClearWaiGe clears the value of the "wai_ge" field.
func (wgluo *WuGeLuckyUpdateOne) ClearWaiGe() *WuGeLuckyUpdateOne {
	wgluo.mutation.ClearWaiGe()
	return wgluo
}

// SetWaiDaYan sets the "wai_da_yan" field.
func (wgluo *WuGeLuckyUpdateOne) SetWaiDaYan(s string) *WuGeLuckyUpdateOne {
	wgluo.mutation.SetWaiDaYan(s)
	return wgluo
}

// SetNillableWaiDaYan sets the "wai_da_yan" field if the given value is not nil.
func (wgluo *WuGeLuckyUpdateOne) SetNillableWaiDaYan(s *string) *WuGeLuckyUpdateOne {
	if s != nil {
		wgluo.SetWaiDaYan(*s)
	}
	return wgluo
}

// ClearWaiDaYan clears the value of the "wai_da_yan" field.
func (wgluo *WuGeLuckyUpdateOne) ClearWaiDaYan() *WuGeLuckyUpdateOne {
	wgluo.mutation.ClearWaiDaYan()
	return wgluo
}

// SetZongGe sets the "zong_ge" field.
func (wgluo *WuGeLuckyUpdateOne) SetZongGe(i int32) *WuGeLuckyUpdateOne {
	wgluo.mutation.ResetZongGe()
	wgluo.mutation.SetZongGe(i)
	return wgluo
}

// SetNillableZongGe sets the "zong_ge" field if the given value is not nil.
func (wgluo *WuGeLuckyUpdateOne) SetNillableZongGe(i *int32) *WuGeLuckyUpdateOne {
	if i != nil {
		wgluo.SetZongGe(*i)
	}
	return wgluo
}

// AddZongGe adds i to the "zong_ge" field.
func (wgluo *WuGeLuckyUpdateOne) AddZongGe(i int32) *WuGeLuckyUpdateOne {
	wgluo.mutation.AddZongGe(i)
	return wgluo
}

// ClearZongGe clears the value of the "zong_ge" field.
func (wgluo *WuGeLuckyUpdateOne) ClearZongGe() *WuGeLuckyUpdateOne {
	wgluo.mutation.ClearZongGe()
	return wgluo
}

// SetZongDaYan sets the "zong_da_yan" field.
func (wgluo *WuGeLuckyUpdateOne) SetZongDaYan(s string) *WuGeLuckyUpdateOne {
	wgluo.mutation.SetZongDaYan(s)
	return wgluo
}

// SetNillableZongDaYan sets the "zong_da_yan" field if the given value is not nil.
func (wgluo *WuGeLuckyUpdateOne) SetNillableZongDaYan(s *string) *WuGeLuckyUpdateOne {
	if s != nil {
		wgluo.SetZongDaYan(*s)
	}
	return wgluo
}

// ClearZongDaYan clears the value of the "zong_da_yan" field.
func (wgluo *WuGeLuckyUpdateOne) ClearZongDaYan() *WuGeLuckyUpdateOne {
	wgluo.mutation.ClearZongDaYan()
	return wgluo
}

// SetZongLucky sets the "zong_lucky" field.
func (wgluo *WuGeLuckyUpdateOne) SetZongLucky(b bool) *WuGeLuckyUpdateOne {
	wgluo.mutation.SetZongLucky(b)
	return wgluo
}

// SetNillableZongLucky sets the "zong_lucky" field if the given value is not nil.
func (wgluo *WuGeLuckyUpdateOne) SetNillableZongLucky(b *bool) *WuGeLuckyUpdateOne {
	if b != nil {
		wgluo.SetZongLucky(*b)
	}
	return wgluo
}

// ClearZongLucky clears the value of the "zong_lucky" field.
func (wgluo *WuGeLuckyUpdateOne) ClearZongLucky() *WuGeLuckyUpdateOne {
	wgluo.mutation.ClearZongLucky()
	return wgluo
}

// SetZongSex sets the "zong_sex" field.
func (wgluo *WuGeLuckyUpdateOne) SetZongSex(b bool) *WuGeLuckyUpdateOne {
	wgluo.mutation.SetZongSex(b)
	return wgluo
}

// SetNillableZongSex sets the "zong_sex" field if the given value is not nil.
func (wgluo *WuGeLuckyUpdateOne) SetNillableZongSex(b *bool) *WuGeLuckyUpdateOne {
	if b != nil {
		wgluo.SetZongSex(*b)
	}
	return wgluo
}

// ClearZongSex clears the value of the "zong_sex" field.
func (wgluo *WuGeLuckyUpdateOne) ClearZongSex() *WuGeLuckyUpdateOne {
	wgluo.mutation.ClearZongSex()
	return wgluo
}

// SetZongMax sets the "zong_max" field.
func (wgluo *WuGeLuckyUpdateOne) SetZongMax(b bool) *WuGeLuckyUpdateOne {
	wgluo.mutation.SetZongMax(b)
	return wgluo
}

// SetNillableZongMax sets the "zong_max" field if the given value is not nil.
func (wgluo *WuGeLuckyUpdateOne) SetNillableZongMax(b *bool) *WuGeLuckyUpdateOne {
	if b != nil {
		wgluo.SetZongMax(*b)
	}
	return wgluo
}

// ClearZongMax clears the value of the "zong_max" field.
func (wgluo *WuGeLuckyUpdateOne) ClearZongMax() *WuGeLuckyUpdateOne {
	wgluo.mutation.ClearZongMax()
	return wgluo
}

// Mutation returns the WuGeLuckyMutation object of the builder.
func (wgluo *WuGeLuckyUpdateOne) Mutation() *WuGeLuckyMutation {
	return wgluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wgluo *WuGeLuckyUpdateOne) Select(field string, fields ...string) *WuGeLuckyUpdateOne {
	wgluo.fields = append([]string{field}, fields...)
	return wgluo
}

// Save executes the query and returns the updated WuGeLucky entity.
func (wgluo *WuGeLuckyUpdateOne) Save(ctx context.Context) (*WuGeLucky, error) {
	var (
		err  error
		node *WuGeLucky
	)
	if len(wgluo.hooks) == 0 {
		node, err = wgluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WuGeLuckyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wgluo.mutation = mutation
			node, err = wgluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wgluo.hooks) - 1; i >= 0; i-- {
			if wgluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wgluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wgluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wgluo *WuGeLuckyUpdateOne) SaveX(ctx context.Context) *WuGeLucky {
	node, err := wgluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wgluo *WuGeLuckyUpdateOne) Exec(ctx context.Context) error {
	_, err := wgluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wgluo *WuGeLuckyUpdateOne) ExecX(ctx context.Context) {
	if err := wgluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wgluo *WuGeLuckyUpdateOne) sqlSave(ctx context.Context) (_node *WuGeLucky, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   wugelucky.Table,
			Columns: wugelucky.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: wugelucky.FieldID,
			},
		},
	}
	id, ok := wgluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WuGeLucky.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wgluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wugelucky.FieldID)
		for _, f := range fields {
			if !wugelucky.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != wugelucky.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wgluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wgluo.mutation.LastStroke1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldLastStroke1,
		})
	}
	if value, ok := wgluo.mutation.AddedLastStroke1(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldLastStroke1,
		})
	}
	if wgluo.mutation.LastStroke1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: wugelucky.FieldLastStroke1,
		})
	}
	if value, ok := wgluo.mutation.LastStroke2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldLastStroke2,
		})
	}
	if value, ok := wgluo.mutation.AddedLastStroke2(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldLastStroke2,
		})
	}
	if wgluo.mutation.LastStroke2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: wugelucky.FieldLastStroke2,
		})
	}
	if value, ok := wgluo.mutation.FirstStroke1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldFirstStroke1,
		})
	}
	if value, ok := wgluo.mutation.AddedFirstStroke1(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldFirstStroke1,
		})
	}
	if wgluo.mutation.FirstStroke1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: wugelucky.FieldFirstStroke1,
		})
	}
	if value, ok := wgluo.mutation.FirstStroke2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldFirstStroke2,
		})
	}
	if value, ok := wgluo.mutation.AddedFirstStroke2(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldFirstStroke2,
		})
	}
	if wgluo.mutation.FirstStroke2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: wugelucky.FieldFirstStroke2,
		})
	}
	if value, ok := wgluo.mutation.TianGe(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldTianGe,
		})
	}
	if value, ok := wgluo.mutation.AddedTianGe(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldTianGe,
		})
	}
	if wgluo.mutation.TianGeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: wugelucky.FieldTianGe,
		})
	}
	if value, ok := wgluo.mutation.TianDaYan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wugelucky.FieldTianDaYan,
		})
	}
	if wgluo.mutation.TianDaYanCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: wugelucky.FieldTianDaYan,
		})
	}
	if value, ok := wgluo.mutation.RenGe(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldRenGe,
		})
	}
	if value, ok := wgluo.mutation.AddedRenGe(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldRenGe,
		})
	}
	if wgluo.mutation.RenGeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: wugelucky.FieldRenGe,
		})
	}
	if value, ok := wgluo.mutation.RenDaYan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wugelucky.FieldRenDaYan,
		})
	}
	if wgluo.mutation.RenDaYanCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: wugelucky.FieldRenDaYan,
		})
	}
	if value, ok := wgluo.mutation.DiGe(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldDiGe,
		})
	}
	if value, ok := wgluo.mutation.AddedDiGe(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldDiGe,
		})
	}
	if wgluo.mutation.DiGeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: wugelucky.FieldDiGe,
		})
	}
	if value, ok := wgluo.mutation.DiDaYan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wugelucky.FieldDiDaYan,
		})
	}
	if wgluo.mutation.DiDaYanCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: wugelucky.FieldDiDaYan,
		})
	}
	if value, ok := wgluo.mutation.WaiGe(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldWaiGe,
		})
	}
	if value, ok := wgluo.mutation.AddedWaiGe(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldWaiGe,
		})
	}
	if wgluo.mutation.WaiGeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: wugelucky.FieldWaiGe,
		})
	}
	if value, ok := wgluo.mutation.WaiDaYan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wugelucky.FieldWaiDaYan,
		})
	}
	if wgluo.mutation.WaiDaYanCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: wugelucky.FieldWaiDaYan,
		})
	}
	if value, ok := wgluo.mutation.ZongGe(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldZongGe,
		})
	}
	if value, ok := wgluo.mutation.AddedZongGe(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldZongGe,
		})
	}
	if wgluo.mutation.ZongGeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: wugelucky.FieldZongGe,
		})
	}
	if value, ok := wgluo.mutation.ZongDaYan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wugelucky.FieldZongDaYan,
		})
	}
	if wgluo.mutation.ZongDaYanCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: wugelucky.FieldZongDaYan,
		})
	}
	if value, ok := wgluo.mutation.ZongLucky(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: wugelucky.FieldZongLucky,
		})
	}
	if wgluo.mutation.ZongLuckyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: wugelucky.FieldZongLucky,
		})
	}
	if value, ok := wgluo.mutation.ZongSex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: wugelucky.FieldZongSex,
		})
	}
	if wgluo.mutation.ZongSexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: wugelucky.FieldZongSex,
		})
	}
	if value, ok := wgluo.mutation.ZongMax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: wugelucky.FieldZongMax,
		})
	}
	if wgluo.mutation.ZongMaxCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: wugelucky.FieldZongMax,
		})
	}
	_node = &WuGeLucky{config: wgluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wgluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wugelucky.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
