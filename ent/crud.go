// Code generated by entc, DO NOT EDIT.

package ent

func (cc *CharacterCreate) SetCharacter(input *Character) *CharacterCreate {
	cc.SetPinYin(input.PinYin)
	cc.SetCh(input.Ch)
	cc.SetRadical(input.Radical)
	cc.SetRadicalStroke(input.RadicalStroke)
	cc.SetStroke(input.Stroke)
	cc.SetIsKangXi(input.IsKangXi)
	cc.SetKangXi(input.KangXi)
	cc.SetKangXiStroke(input.KangXiStroke)
	cc.SetSimpleRadical(input.SimpleRadical)
	cc.SetSimpleRadicalStroke(input.SimpleRadicalStroke)
	cc.SetSimpleTotalStroke(input.SimpleTotalStroke)
	cc.SetTraditionalRadical(input.TraditionalRadical)
	cc.SetTraditionalRadicalStroke(input.TraditionalRadicalStroke)
	cc.SetTraditionalTotalStroke(input.TraditionalTotalStroke)
	cc.SetNameScience(input.NameScience)
	cc.SetWuXing(input.WuXing)
	cc.SetLucky(input.Lucky)
	cc.SetRegular(input.Regular)
	cc.SetTraditionalCharacter(input.TraditionalCharacter)
	cc.SetVariantCharacter(input.VariantCharacter)
	cc.SetComment(input.Comment)
	cc.SetScienceStroke(input.ScienceStroke)
	return cc
}

func (cc *CharacterCreate) SetCharacterWithOptional(input *Character) *CharacterCreate {
	cc.SetPinYin(input.PinYin)
	cc.SetCh(input.Ch)
	cc.SetRadical(input.Radical)
	cc.SetRadicalStroke(input.RadicalStroke)
	cc.SetStroke(input.Stroke)
	cc.SetIsKangXi(input.IsKangXi)
	cc.SetKangXi(input.KangXi)
	cc.SetKangXiStroke(input.KangXiStroke)
	cc.SetSimpleRadical(input.SimpleRadical)
	cc.SetSimpleRadicalStroke(input.SimpleRadicalStroke)
	cc.SetSimpleTotalStroke(input.SimpleTotalStroke)
	cc.SetTraditionalRadical(input.TraditionalRadical)
	cc.SetTraditionalRadicalStroke(input.TraditionalRadicalStroke)
	cc.SetTraditionalTotalStroke(input.TraditionalTotalStroke)
	cc.SetNameScience(input.NameScience)
	cc.SetWuXing(input.WuXing)
	cc.SetLucky(input.Lucky)
	cc.SetRegular(input.Regular)
	cc.SetTraditionalCharacter(input.TraditionalCharacter)
	cc.SetVariantCharacter(input.VariantCharacter)
	cc.SetComment(input.Comment)
	cc.SetScienceStroke(input.ScienceStroke)
	return cc
}

func (cuo *CharacterUpdateOne) SetCharacter(input *Character) *CharacterUpdateOne {
	cuo.SetPinYin(input.PinYin)
	cuo.SetCh(input.Ch)
	cuo.SetRadical(input.Radical)
	cuo.SetRadicalStroke(input.RadicalStroke)
	cuo.SetStroke(input.Stroke)
	cuo.SetIsKangXi(input.IsKangXi)
	cuo.SetKangXi(input.KangXi)
	cuo.SetKangXiStroke(input.KangXiStroke)
	cuo.SetSimpleRadical(input.SimpleRadical)
	cuo.SetSimpleRadicalStroke(input.SimpleRadicalStroke)
	cuo.SetSimpleTotalStroke(input.SimpleTotalStroke)
	cuo.SetTraditionalRadical(input.TraditionalRadical)
	cuo.SetTraditionalRadicalStroke(input.TraditionalRadicalStroke)
	cuo.SetTraditionalTotalStroke(input.TraditionalTotalStroke)
	cuo.SetNameScience(input.NameScience)
	cuo.SetWuXing(input.WuXing)
	cuo.SetLucky(input.Lucky)
	cuo.SetRegular(input.Regular)
	cuo.SetTraditionalCharacter(input.TraditionalCharacter)
	cuo.SetVariantCharacter(input.VariantCharacter)
	cuo.SetComment(input.Comment)
	cuo.SetScienceStroke(input.ScienceStroke)
	return cuo
}

func (cu *CharacterUpdate) SetCharacter(input *Character) *CharacterUpdate {
	cu.SetPinYin(input.PinYin)
	cu.SetCh(input.Ch)
	cu.SetRadical(input.Radical)
	cu.SetRadicalStroke(input.RadicalStroke)
	cu.SetStroke(input.Stroke)
	cu.SetIsKangXi(input.IsKangXi)
	cu.SetKangXi(input.KangXi)
	cu.SetKangXiStroke(input.KangXiStroke)
	cu.SetSimpleRadical(input.SimpleRadical)
	cu.SetSimpleRadicalStroke(input.SimpleRadicalStroke)
	cu.SetSimpleTotalStroke(input.SimpleTotalStroke)
	cu.SetTraditionalRadical(input.TraditionalRadical)
	cu.SetTraditionalRadicalStroke(input.TraditionalRadicalStroke)
	cu.SetTraditionalTotalStroke(input.TraditionalTotalStroke)
	cu.SetNameScience(input.NameScience)
	cu.SetWuXing(input.WuXing)
	cu.SetLucky(input.Lucky)
	cu.SetRegular(input.Regular)
	cu.SetTraditionalCharacter(input.TraditionalCharacter)
	cu.SetVariantCharacter(input.VariantCharacter)
	cu.SetComment(input.Comment)
	cu.SetScienceStroke(input.ScienceStroke)
	return cu
}

func (cu *CharacterUpdate) SetCharacterWithOptional(input *Character) *CharacterUpdate {
	cu.SetPinYin(input.PinYin)
	cu.SetCh(input.Ch)
	cu.SetRadical(input.Radical)
	cu.SetRadicalStroke(input.RadicalStroke)
	cu.SetStroke(input.Stroke)
	cu.SetIsKangXi(input.IsKangXi)
	cu.SetKangXi(input.KangXi)
	cu.SetKangXiStroke(input.KangXiStroke)
	cu.SetSimpleRadical(input.SimpleRadical)
	cu.SetSimpleRadicalStroke(input.SimpleRadicalStroke)
	cu.SetSimpleTotalStroke(input.SimpleTotalStroke)
	cu.SetTraditionalRadical(input.TraditionalRadical)
	cu.SetTraditionalRadicalStroke(input.TraditionalRadicalStroke)
	cu.SetTraditionalTotalStroke(input.TraditionalTotalStroke)
	cu.SetNameScience(input.NameScience)
	cu.SetWuXing(input.WuXing)
	cu.SetLucky(input.Lucky)
	cu.SetRegular(input.Regular)
	cu.SetTraditionalCharacter(input.TraditionalCharacter)
	cu.SetVariantCharacter(input.VariantCharacter)
	cu.SetComment(input.Comment)
	cu.SetScienceStroke(input.ScienceStroke)
	return cu
}

func (vc *VersionCreate) SetVersion(input *Version) *VersionCreate {
	vc.SetCurrentVersion(input.CurrentVersion)
	vc.SetUpdatedUnix(input.UpdatedUnix)
	return vc
}

func (vc *VersionCreate) SetVersionWithOptional(input *Version) *VersionCreate {
	vc.SetCurrentVersion(input.CurrentVersion)
	vc.SetUpdatedUnix(input.UpdatedUnix)
	return vc
}

func (vuo *VersionUpdateOne) SetVersion(input *Version) *VersionUpdateOne {
	vuo.SetCurrentVersion(input.CurrentVersion)
	vuo.SetUpdatedUnix(input.UpdatedUnix)
	return vuo
}

func (vu *VersionUpdate) SetVersion(input *Version) *VersionUpdate {
	vu.SetCurrentVersion(input.CurrentVersion)
	vu.SetUpdatedUnix(input.UpdatedUnix)
	return vu
}

func (vu *VersionUpdate) SetVersionWithOptional(input *Version) *VersionUpdate {
	vu.SetCurrentVersion(input.CurrentVersion)
	vu.SetUpdatedUnix(input.UpdatedUnix)
	return vu
}

func (wglc *WuGeLuckyCreate) SetWuGeLucky(input *WuGeLucky) *WuGeLuckyCreate {
	return wglc
}

func (wglc *WuGeLuckyCreate) SetWuGeLuckyWithOptional(input *WuGeLucky) *WuGeLuckyCreate {
	wglc.SetLastStroke1(input.LastStroke1)
	wglc.SetLastStroke2(input.LastStroke2)
	wglc.SetFirstStroke1(input.FirstStroke1)
	wglc.SetFirstStroke2(input.FirstStroke2)
	wglc.SetTianGe(input.TianGe)
	wglc.SetTianDaYan(input.TianDaYan)
	wglc.SetRenGe(input.RenGe)
	wglc.SetRenDaYan(input.RenDaYan)
	wglc.SetDiGe(input.DiGe)
	wglc.SetDiDaYan(input.DiDaYan)
	wglc.SetWaiGe(input.WaiGe)
	wglc.SetWaiDaYan(input.WaiDaYan)
	wglc.SetZongGe(input.ZongGe)
	wglc.SetZongDaYan(input.ZongDaYan)
	wglc.SetZongLucky(input.ZongLucky)
	wglc.SetZongSex(input.ZongSex)
	wglc.SetZongMax(input.ZongMax)
	return wglc
}

func (wgluo *WuGeLuckyUpdateOne) SetWuGeLucky(input *WuGeLucky) *WuGeLuckyUpdateOne {
	return wgluo
}

func (wglu *WuGeLuckyUpdate) SetWuGeLucky(input *WuGeLucky) *WuGeLuckyUpdate {
	return wglu
}

func (wglu *WuGeLuckyUpdate) SetWuGeLuckyWithOptional(input *WuGeLucky) *WuGeLuckyUpdate {
	wglu.SetLastStroke1(input.LastStroke1)
	wglu.SetLastStroke2(input.LastStroke2)
	wglu.SetFirstStroke1(input.FirstStroke1)
	wglu.SetFirstStroke2(input.FirstStroke2)
	wglu.SetTianGe(input.TianGe)
	wglu.SetTianDaYan(input.TianDaYan)
	wglu.SetRenGe(input.RenGe)
	wglu.SetRenDaYan(input.RenDaYan)
	wglu.SetDiGe(input.DiGe)
	wglu.SetDiDaYan(input.DiDaYan)
	wglu.SetWaiGe(input.WaiGe)
	wglu.SetWaiDaYan(input.WaiDaYan)
	wglu.SetZongGe(input.ZongGe)
	wglu.SetZongDaYan(input.ZongDaYan)
	wglu.SetZongLucky(input.ZongLucky)
	wglu.SetZongSex(input.ZongSex)
	wglu.SetZongMax(input.ZongMax)
	return wglu
}

func (wxc *WuXingCreate) SetWuXing(input *WuXing) *WuXingCreate {
	return wxc
}

func (wxc *WuXingCreate) SetWuXingWithOptional(input *WuXing) *WuXingCreate {
	wxc.SetCreated(input.Created)
	wxc.SetUpdated(input.Updated)
	wxc.SetDeleted(input.Deleted)
	wxc.SetVersion(input.Version)
	wxc.SetFirst(input.First)
	wxc.SetSecond(input.Second)
	wxc.SetThird(input.Third)
	wxc.SetFortune(input.Fortune)
	return wxc
}

func (wxuo *WuXingUpdateOne) SetWuXing(input *WuXing) *WuXingUpdateOne {
	return wxuo
}

func (wxu *WuXingUpdate) SetWuXing(input *WuXing) *WuXingUpdate {
	return wxu
}

func (wxu *WuXingUpdate) SetWuXingWithOptional(input *WuXing) *WuXingUpdate {
	wxu.SetCreated(input.Created)
	wxu.SetUpdated(input.Updated)
	wxu.SetDeleted(input.Deleted)
	wxu.SetVersion(input.Version)
	wxu.SetFirst(input.First)
	wxu.SetSecond(input.Second)
	wxu.SetThird(input.Third)
	wxu.SetFortune(input.Fortune)
	return wxu
}
