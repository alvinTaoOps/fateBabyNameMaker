// Code generated by ent, DO NOT EDIT.

package wuxing

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the wuxing type in the database.
	Label = "wu_xing"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreated holds the string denoting the created field in the database.
	FieldCreated = "created"
	// FieldUpdated holds the string denoting the updated field in the database.
	FieldUpdated = "updated"
	// FieldDeleted holds the string denoting the deleted field in the database.
	FieldDeleted = "deleted"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldFirst holds the string denoting the first field in the database.
	FieldFirst = "first"
	// FieldSecond holds the string denoting the second field in the database.
	FieldSecond = "second"
	// FieldThird holds the string denoting the third field in the database.
	FieldThird = "third"
	// FieldFortune holds the string denoting the fortune field in the database.
	FieldFortune = "fortune"
	// Table holds the table name of the wuxing in the database.
	Table = "wu_xing"
)

// Columns holds all SQL columns for wuxing fields.
var Columns = []string{
	FieldID,
	FieldCreated,
	FieldUpdated,
	FieldDeleted,
	FieldVersion,
	FieldFirst,
	FieldSecond,
	FieldThird,
	FieldFortune,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the WuXing queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreated orders the results by the created field.
func ByCreated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreated, opts...).ToFunc()
}

// ByUpdated orders the results by the updated field.
func ByUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdated, opts...).ToFunc()
}

// ByDeleted orders the results by the deleted field.
func ByDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleted, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByFirst orders the results by the first field.
func ByFirst(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirst, opts...).ToFunc()
}

// BySecond orders the results by the second field.
func BySecond(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecond, opts...).ToFunc()
}

// ByThird orders the results by the third field.
func ByThird(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThird, opts...).ToFunc()
}

// ByFortune orders the results by the fortune field.
func ByFortune(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFortune, opts...).ToFunc()
}
