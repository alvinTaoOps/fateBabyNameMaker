// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/babyname/fate/ent/wugelucky"
)

// WuGeLuckyCreate is the builder for creating a WuGeLucky entity.
type WuGeLuckyCreate struct {
	config
	mutation *WuGeLuckyMutation
	hooks    []Hook
}

// SetLastStroke1 sets the "last_stroke_1" field.
func (wglc *WuGeLuckyCreate) SetLastStroke1(i int32) *WuGeLuckyCreate {
	wglc.mutation.SetLastStroke1(i)
	return wglc
}

// SetNillableLastStroke1 sets the "last_stroke_1" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableLastStroke1(i *int32) *WuGeLuckyCreate {
	if i != nil {
		wglc.SetLastStroke1(*i)
	}
	return wglc
}

// SetLastStroke2 sets the "last_stroke_2" field.
func (wglc *WuGeLuckyCreate) SetLastStroke2(i int32) *WuGeLuckyCreate {
	wglc.mutation.SetLastStroke2(i)
	return wglc
}

// SetNillableLastStroke2 sets the "last_stroke_2" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableLastStroke2(i *int32) *WuGeLuckyCreate {
	if i != nil {
		wglc.SetLastStroke2(*i)
	}
	return wglc
}

// SetFirstStroke1 sets the "first_stroke_1" field.
func (wglc *WuGeLuckyCreate) SetFirstStroke1(i int32) *WuGeLuckyCreate {
	wglc.mutation.SetFirstStroke1(i)
	return wglc
}

// SetNillableFirstStroke1 sets the "first_stroke_1" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableFirstStroke1(i *int32) *WuGeLuckyCreate {
	if i != nil {
		wglc.SetFirstStroke1(*i)
	}
	return wglc
}

// SetFirstStroke2 sets the "first_stroke_2" field.
func (wglc *WuGeLuckyCreate) SetFirstStroke2(i int32) *WuGeLuckyCreate {
	wglc.mutation.SetFirstStroke2(i)
	return wglc
}

// SetNillableFirstStroke2 sets the "first_stroke_2" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableFirstStroke2(i *int32) *WuGeLuckyCreate {
	if i != nil {
		wglc.SetFirstStroke2(*i)
	}
	return wglc
}

// SetTianGe sets the "tian_ge" field.
func (wglc *WuGeLuckyCreate) SetTianGe(i int32) *WuGeLuckyCreate {
	wglc.mutation.SetTianGe(i)
	return wglc
}

// SetNillableTianGe sets the "tian_ge" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableTianGe(i *int32) *WuGeLuckyCreate {
	if i != nil {
		wglc.SetTianGe(*i)
	}
	return wglc
}

// SetTianDaYan sets the "tian_da_yan" field.
func (wglc *WuGeLuckyCreate) SetTianDaYan(s string) *WuGeLuckyCreate {
	wglc.mutation.SetTianDaYan(s)
	return wglc
}

// SetNillableTianDaYan sets the "tian_da_yan" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableTianDaYan(s *string) *WuGeLuckyCreate {
	if s != nil {
		wglc.SetTianDaYan(*s)
	}
	return wglc
}

// SetRenGe sets the "ren_ge" field.
func (wglc *WuGeLuckyCreate) SetRenGe(i int32) *WuGeLuckyCreate {
	wglc.mutation.SetRenGe(i)
	return wglc
}

// SetNillableRenGe sets the "ren_ge" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableRenGe(i *int32) *WuGeLuckyCreate {
	if i != nil {
		wglc.SetRenGe(*i)
	}
	return wglc
}

// SetRenDaYan sets the "ren_da_yan" field.
func (wglc *WuGeLuckyCreate) SetRenDaYan(s string) *WuGeLuckyCreate {
	wglc.mutation.SetRenDaYan(s)
	return wglc
}

// SetNillableRenDaYan sets the "ren_da_yan" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableRenDaYan(s *string) *WuGeLuckyCreate {
	if s != nil {
		wglc.SetRenDaYan(*s)
	}
	return wglc
}

// SetDiGe sets the "di_ge" field.
func (wglc *WuGeLuckyCreate) SetDiGe(i int32) *WuGeLuckyCreate {
	wglc.mutation.SetDiGe(i)
	return wglc
}

// SetNillableDiGe sets the "di_ge" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableDiGe(i *int32) *WuGeLuckyCreate {
	if i != nil {
		wglc.SetDiGe(*i)
	}
	return wglc
}

// SetDiDaYan sets the "di_da_yan" field.
func (wglc *WuGeLuckyCreate) SetDiDaYan(s string) *WuGeLuckyCreate {
	wglc.mutation.SetDiDaYan(s)
	return wglc
}

// SetNillableDiDaYan sets the "di_da_yan" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableDiDaYan(s *string) *WuGeLuckyCreate {
	if s != nil {
		wglc.SetDiDaYan(*s)
	}
	return wglc
}

// SetWaiGe sets the "wai_ge" field.
func (wglc *WuGeLuckyCreate) SetWaiGe(i int32) *WuGeLuckyCreate {
	wglc.mutation.SetWaiGe(i)
	return wglc
}

// SetNillableWaiGe sets the "wai_ge" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableWaiGe(i *int32) *WuGeLuckyCreate {
	if i != nil {
		wglc.SetWaiGe(*i)
	}
	return wglc
}

// SetWaiDaYan sets the "wai_da_yan" field.
func (wglc *WuGeLuckyCreate) SetWaiDaYan(s string) *WuGeLuckyCreate {
	wglc.mutation.SetWaiDaYan(s)
	return wglc
}

// SetNillableWaiDaYan sets the "wai_da_yan" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableWaiDaYan(s *string) *WuGeLuckyCreate {
	if s != nil {
		wglc.SetWaiDaYan(*s)
	}
	return wglc
}

// SetZongGe sets the "zong_ge" field.
func (wglc *WuGeLuckyCreate) SetZongGe(i int32) *WuGeLuckyCreate {
	wglc.mutation.SetZongGe(i)
	return wglc
}

// SetNillableZongGe sets the "zong_ge" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableZongGe(i *int32) *WuGeLuckyCreate {
	if i != nil {
		wglc.SetZongGe(*i)
	}
	return wglc
}

// SetZongDaYan sets the "zong_da_yan" field.
func (wglc *WuGeLuckyCreate) SetZongDaYan(s string) *WuGeLuckyCreate {
	wglc.mutation.SetZongDaYan(s)
	return wglc
}

// SetNillableZongDaYan sets the "zong_da_yan" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableZongDaYan(s *string) *WuGeLuckyCreate {
	if s != nil {
		wglc.SetZongDaYan(*s)
	}
	return wglc
}

// SetZongLucky sets the "zong_lucky" field.
func (wglc *WuGeLuckyCreate) SetZongLucky(b bool) *WuGeLuckyCreate {
	wglc.mutation.SetZongLucky(b)
	return wglc
}

// SetNillableZongLucky sets the "zong_lucky" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableZongLucky(b *bool) *WuGeLuckyCreate {
	if b != nil {
		wglc.SetZongLucky(*b)
	}
	return wglc
}

// SetZongSex sets the "zong_sex" field.
func (wglc *WuGeLuckyCreate) SetZongSex(b bool) *WuGeLuckyCreate {
	wglc.mutation.SetZongSex(b)
	return wglc
}

// SetNillableZongSex sets the "zong_sex" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableZongSex(b *bool) *WuGeLuckyCreate {
	if b != nil {
		wglc.SetZongSex(*b)
	}
	return wglc
}

// SetZongMax sets the "zong_max" field.
func (wglc *WuGeLuckyCreate) SetZongMax(b bool) *WuGeLuckyCreate {
	wglc.mutation.SetZongMax(b)
	return wglc
}

// SetNillableZongMax sets the "zong_max" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableZongMax(b *bool) *WuGeLuckyCreate {
	if b != nil {
		wglc.SetZongMax(*b)
	}
	return wglc
}

// SetID sets the "id" field.
func (wglc *WuGeLuckyCreate) SetID(s string) *WuGeLuckyCreate {
	wglc.mutation.SetID(s)
	return wglc
}

// Mutation returns the WuGeLuckyMutation object of the builder.
func (wglc *WuGeLuckyCreate) Mutation() *WuGeLuckyMutation {
	return wglc.mutation
}

// Save creates the WuGeLucky in the database.
func (wglc *WuGeLuckyCreate) Save(ctx context.Context) (*WuGeLucky, error) {
	var (
		err  error
		node *WuGeLucky
	)
	if len(wglc.hooks) == 0 {
		if err = wglc.check(); err != nil {
			return nil, err
		}
		node, err = wglc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WuGeLuckyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wglc.check(); err != nil {
				return nil, err
			}
			wglc.mutation = mutation
			if node, err = wglc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(wglc.hooks) - 1; i >= 0; i-- {
			if wglc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wglc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, wglc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*WuGeLucky)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from WuGeLuckyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wglc *WuGeLuckyCreate) SaveX(ctx context.Context) *WuGeLucky {
	v, err := wglc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wglc *WuGeLuckyCreate) Exec(ctx context.Context) error {
	_, err := wglc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wglc *WuGeLuckyCreate) ExecX(ctx context.Context) {
	if err := wglc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wglc *WuGeLuckyCreate) check() error {
	return nil
}

func (wglc *WuGeLuckyCreate) sqlSave(ctx context.Context) (*WuGeLucky, error) {
	_node, _spec := wglc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wglc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected WuGeLucky.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (wglc *WuGeLuckyCreate) createSpec() (*WuGeLucky, *sqlgraph.CreateSpec) {
	var (
		_node = &WuGeLucky{config: wglc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: wugelucky.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: wugelucky.FieldID,
			},
		}
	)
	if id, ok := wglc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wglc.mutation.LastStroke1(); ok {
		_spec.SetField(wugelucky.FieldLastStroke1, field.TypeInt32, value)
		_node.LastStroke1 = value
	}
	if value, ok := wglc.mutation.LastStroke2(); ok {
		_spec.SetField(wugelucky.FieldLastStroke2, field.TypeInt32, value)
		_node.LastStroke2 = value
	}
	if value, ok := wglc.mutation.FirstStroke1(); ok {
		_spec.SetField(wugelucky.FieldFirstStroke1, field.TypeInt32, value)
		_node.FirstStroke1 = value
	}
	if value, ok := wglc.mutation.FirstStroke2(); ok {
		_spec.SetField(wugelucky.FieldFirstStroke2, field.TypeInt32, value)
		_node.FirstStroke2 = value
	}
	if value, ok := wglc.mutation.TianGe(); ok {
		_spec.SetField(wugelucky.FieldTianGe, field.TypeInt32, value)
		_node.TianGe = value
	}
	if value, ok := wglc.mutation.TianDaYan(); ok {
		_spec.SetField(wugelucky.FieldTianDaYan, field.TypeString, value)
		_node.TianDaYan = value
	}
	if value, ok := wglc.mutation.RenGe(); ok {
		_spec.SetField(wugelucky.FieldRenGe, field.TypeInt32, value)
		_node.RenGe = value
	}
	if value, ok := wglc.mutation.RenDaYan(); ok {
		_spec.SetField(wugelucky.FieldRenDaYan, field.TypeString, value)
		_node.RenDaYan = value
	}
	if value, ok := wglc.mutation.DiGe(); ok {
		_spec.SetField(wugelucky.FieldDiGe, field.TypeInt32, value)
		_node.DiGe = value
	}
	if value, ok := wglc.mutation.DiDaYan(); ok {
		_spec.SetField(wugelucky.FieldDiDaYan, field.TypeString, value)
		_node.DiDaYan = value
	}
	if value, ok := wglc.mutation.WaiGe(); ok {
		_spec.SetField(wugelucky.FieldWaiGe, field.TypeInt32, value)
		_node.WaiGe = value
	}
	if value, ok := wglc.mutation.WaiDaYan(); ok {
		_spec.SetField(wugelucky.FieldWaiDaYan, field.TypeString, value)
		_node.WaiDaYan = value
	}
	if value, ok := wglc.mutation.ZongGe(); ok {
		_spec.SetField(wugelucky.FieldZongGe, field.TypeInt32, value)
		_node.ZongGe = value
	}
	if value, ok := wglc.mutation.ZongDaYan(); ok {
		_spec.SetField(wugelucky.FieldZongDaYan, field.TypeString, value)
		_node.ZongDaYan = value
	}
	if value, ok := wglc.mutation.ZongLucky(); ok {
		_spec.SetField(wugelucky.FieldZongLucky, field.TypeBool, value)
		_node.ZongLucky = value
	}
	if value, ok := wglc.mutation.ZongSex(); ok {
		_spec.SetField(wugelucky.FieldZongSex, field.TypeBool, value)
		_node.ZongSex = value
	}
	if value, ok := wglc.mutation.ZongMax(); ok {
		_spec.SetField(wugelucky.FieldZongMax, field.TypeBool, value)
		_node.ZongMax = value
	}
	return _node, _spec
}

// WuGeLuckyCreateBulk is the builder for creating many WuGeLucky entities in bulk.
type WuGeLuckyCreateBulk struct {
	config
	builders []*WuGeLuckyCreate
}

// Save creates the WuGeLucky entities in the database.
func (wglcb *WuGeLuckyCreateBulk) Save(ctx context.Context) ([]*WuGeLucky, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wglcb.builders))
	nodes := make([]*WuGeLucky, len(wglcb.builders))
	mutators := make([]Mutator, len(wglcb.builders))
	for i := range wglcb.builders {
		func(i int, root context.Context) {
			builder := wglcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WuGeLuckyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wglcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wglcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wglcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wglcb *WuGeLuckyCreateBulk) SaveX(ctx context.Context) []*WuGeLucky {
	v, err := wglcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wglcb *WuGeLuckyCreateBulk) Exec(ctx context.Context) error {
	_, err := wglcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wglcb *WuGeLuckyCreateBulk) ExecX(ctx context.Context) {
	if err := wglcb.Exec(ctx); err != nil {
		panic(err)
	}
}
