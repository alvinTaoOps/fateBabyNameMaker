// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/babyname/fate/ent/wugelucky"
)

// WuGeLuckyCreate is the builder for creating a WuGeLucky entity.
type WuGeLuckyCreate struct {
	config
	mutation *WuGeLuckyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetLastStroke1 sets the "last_stroke_1" field.
func (wglc *WuGeLuckyCreate) SetLastStroke1(i int32) *WuGeLuckyCreate {
	wglc.mutation.SetLastStroke1(i)
	return wglc
}

// SetNillableLastStroke1 sets the "last_stroke_1" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableLastStroke1(i *int32) *WuGeLuckyCreate {
	if i != nil {
		wglc.SetLastStroke1(*i)
	}
	return wglc
}

// SetLastStroke2 sets the "last_stroke_2" field.
func (wglc *WuGeLuckyCreate) SetLastStroke2(i int32) *WuGeLuckyCreate {
	wglc.mutation.SetLastStroke2(i)
	return wglc
}

// SetNillableLastStroke2 sets the "last_stroke_2" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableLastStroke2(i *int32) *WuGeLuckyCreate {
	if i != nil {
		wglc.SetLastStroke2(*i)
	}
	return wglc
}

// SetFirstStroke1 sets the "first_stroke_1" field.
func (wglc *WuGeLuckyCreate) SetFirstStroke1(i int32) *WuGeLuckyCreate {
	wglc.mutation.SetFirstStroke1(i)
	return wglc
}

// SetNillableFirstStroke1 sets the "first_stroke_1" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableFirstStroke1(i *int32) *WuGeLuckyCreate {
	if i != nil {
		wglc.SetFirstStroke1(*i)
	}
	return wglc
}

// SetFirstStroke2 sets the "first_stroke_2" field.
func (wglc *WuGeLuckyCreate) SetFirstStroke2(i int32) *WuGeLuckyCreate {
	wglc.mutation.SetFirstStroke2(i)
	return wglc
}

// SetNillableFirstStroke2 sets the "first_stroke_2" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableFirstStroke2(i *int32) *WuGeLuckyCreate {
	if i != nil {
		wglc.SetFirstStroke2(*i)
	}
	return wglc
}

// SetTianGe sets the "tian_ge" field.
func (wglc *WuGeLuckyCreate) SetTianGe(i int32) *WuGeLuckyCreate {
	wglc.mutation.SetTianGe(i)
	return wglc
}

// SetNillableTianGe sets the "tian_ge" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableTianGe(i *int32) *WuGeLuckyCreate {
	if i != nil {
		wglc.SetTianGe(*i)
	}
	return wglc
}

// SetTianDaYan sets the "tian_da_yan" field.
func (wglc *WuGeLuckyCreate) SetTianDaYan(s string) *WuGeLuckyCreate {
	wglc.mutation.SetTianDaYan(s)
	return wglc
}

// SetNillableTianDaYan sets the "tian_da_yan" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableTianDaYan(s *string) *WuGeLuckyCreate {
	if s != nil {
		wglc.SetTianDaYan(*s)
	}
	return wglc
}

// SetRenGe sets the "ren_ge" field.
func (wglc *WuGeLuckyCreate) SetRenGe(i int32) *WuGeLuckyCreate {
	wglc.mutation.SetRenGe(i)
	return wglc
}

// SetNillableRenGe sets the "ren_ge" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableRenGe(i *int32) *WuGeLuckyCreate {
	if i != nil {
		wglc.SetRenGe(*i)
	}
	return wglc
}

// SetRenDaYan sets the "ren_da_yan" field.
func (wglc *WuGeLuckyCreate) SetRenDaYan(s string) *WuGeLuckyCreate {
	wglc.mutation.SetRenDaYan(s)
	return wglc
}

// SetNillableRenDaYan sets the "ren_da_yan" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableRenDaYan(s *string) *WuGeLuckyCreate {
	if s != nil {
		wglc.SetRenDaYan(*s)
	}
	return wglc
}

// SetDiGe sets the "di_ge" field.
func (wglc *WuGeLuckyCreate) SetDiGe(i int32) *WuGeLuckyCreate {
	wglc.mutation.SetDiGe(i)
	return wglc
}

// SetNillableDiGe sets the "di_ge" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableDiGe(i *int32) *WuGeLuckyCreate {
	if i != nil {
		wglc.SetDiGe(*i)
	}
	return wglc
}

// SetDiDaYan sets the "di_da_yan" field.
func (wglc *WuGeLuckyCreate) SetDiDaYan(s string) *WuGeLuckyCreate {
	wglc.mutation.SetDiDaYan(s)
	return wglc
}

// SetNillableDiDaYan sets the "di_da_yan" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableDiDaYan(s *string) *WuGeLuckyCreate {
	if s != nil {
		wglc.SetDiDaYan(*s)
	}
	return wglc
}

// SetWaiGe sets the "wai_ge" field.
func (wglc *WuGeLuckyCreate) SetWaiGe(i int32) *WuGeLuckyCreate {
	wglc.mutation.SetWaiGe(i)
	return wglc
}

// SetNillableWaiGe sets the "wai_ge" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableWaiGe(i *int32) *WuGeLuckyCreate {
	if i != nil {
		wglc.SetWaiGe(*i)
	}
	return wglc
}

// SetWaiDaYan sets the "wai_da_yan" field.
func (wglc *WuGeLuckyCreate) SetWaiDaYan(s string) *WuGeLuckyCreate {
	wglc.mutation.SetWaiDaYan(s)
	return wglc
}

// SetNillableWaiDaYan sets the "wai_da_yan" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableWaiDaYan(s *string) *WuGeLuckyCreate {
	if s != nil {
		wglc.SetWaiDaYan(*s)
	}
	return wglc
}

// SetZongGe sets the "zong_ge" field.
func (wglc *WuGeLuckyCreate) SetZongGe(i int32) *WuGeLuckyCreate {
	wglc.mutation.SetZongGe(i)
	return wglc
}

// SetNillableZongGe sets the "zong_ge" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableZongGe(i *int32) *WuGeLuckyCreate {
	if i != nil {
		wglc.SetZongGe(*i)
	}
	return wglc
}

// SetZongDaYan sets the "zong_da_yan" field.
func (wglc *WuGeLuckyCreate) SetZongDaYan(s string) *WuGeLuckyCreate {
	wglc.mutation.SetZongDaYan(s)
	return wglc
}

// SetNillableZongDaYan sets the "zong_da_yan" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableZongDaYan(s *string) *WuGeLuckyCreate {
	if s != nil {
		wglc.SetZongDaYan(*s)
	}
	return wglc
}

// SetZongLucky sets the "zong_lucky" field.
func (wglc *WuGeLuckyCreate) SetZongLucky(b bool) *WuGeLuckyCreate {
	wglc.mutation.SetZongLucky(b)
	return wglc
}

// SetNillableZongLucky sets the "zong_lucky" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableZongLucky(b *bool) *WuGeLuckyCreate {
	if b != nil {
		wglc.SetZongLucky(*b)
	}
	return wglc
}

// SetZongSex sets the "zong_sex" field.
func (wglc *WuGeLuckyCreate) SetZongSex(b bool) *WuGeLuckyCreate {
	wglc.mutation.SetZongSex(b)
	return wglc
}

// SetNillableZongSex sets the "zong_sex" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableZongSex(b *bool) *WuGeLuckyCreate {
	if b != nil {
		wglc.SetZongSex(*b)
	}
	return wglc
}

// SetZongMax sets the "zong_max" field.
func (wglc *WuGeLuckyCreate) SetZongMax(b bool) *WuGeLuckyCreate {
	wglc.mutation.SetZongMax(b)
	return wglc
}

// SetNillableZongMax sets the "zong_max" field if the given value is not nil.
func (wglc *WuGeLuckyCreate) SetNillableZongMax(b *bool) *WuGeLuckyCreate {
	if b != nil {
		wglc.SetZongMax(*b)
	}
	return wglc
}

// SetID sets the "id" field.
func (wglc *WuGeLuckyCreate) SetID(s string) *WuGeLuckyCreate {
	wglc.mutation.SetID(s)
	return wglc
}

// Mutation returns the WuGeLuckyMutation object of the builder.
func (wglc *WuGeLuckyCreate) Mutation() *WuGeLuckyMutation {
	return wglc.mutation
}

// Save creates the WuGeLucky in the database.
func (wglc *WuGeLuckyCreate) Save(ctx context.Context) (*WuGeLucky, error) {
	var (
		err  error
		node *WuGeLucky
	)
	if len(wglc.hooks) == 0 {
		if err = wglc.check(); err != nil {
			return nil, err
		}
		node, err = wglc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WuGeLuckyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wglc.check(); err != nil {
				return nil, err
			}
			wglc.mutation = mutation
			if node, err = wglc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(wglc.hooks) - 1; i >= 0; i-- {
			if wglc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wglc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wglc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wglc *WuGeLuckyCreate) SaveX(ctx context.Context) *WuGeLucky {
	v, err := wglc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wglc *WuGeLuckyCreate) Exec(ctx context.Context) error {
	_, err := wglc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wglc *WuGeLuckyCreate) ExecX(ctx context.Context) {
	if err := wglc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wglc *WuGeLuckyCreate) check() error {
	return nil
}

func (wglc *WuGeLuckyCreate) sqlSave(ctx context.Context) (*WuGeLucky, error) {
	_node, _spec := wglc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wglc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected WuGeLucky.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (wglc *WuGeLuckyCreate) createSpec() (*WuGeLucky, *sqlgraph.CreateSpec) {
	var (
		_node = &WuGeLucky{config: wglc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: wugelucky.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: wugelucky.FieldID,
			},
		}
	)
	_spec.OnConflict = wglc.conflict
	if id, ok := wglc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wglc.mutation.LastStroke1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldLastStroke1,
		})
		_node.LastStroke1 = value
	}
	if value, ok := wglc.mutation.LastStroke2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldLastStroke2,
		})
		_node.LastStroke2 = value
	}
	if value, ok := wglc.mutation.FirstStroke1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldFirstStroke1,
		})
		_node.FirstStroke1 = value
	}
	if value, ok := wglc.mutation.FirstStroke2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldFirstStroke2,
		})
		_node.FirstStroke2 = value
	}
	if value, ok := wglc.mutation.TianGe(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldTianGe,
		})
		_node.TianGe = value
	}
	if value, ok := wglc.mutation.TianDaYan(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wugelucky.FieldTianDaYan,
		})
		_node.TianDaYan = value
	}
	if value, ok := wglc.mutation.RenGe(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldRenGe,
		})
		_node.RenGe = value
	}
	if value, ok := wglc.mutation.RenDaYan(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wugelucky.FieldRenDaYan,
		})
		_node.RenDaYan = value
	}
	if value, ok := wglc.mutation.DiGe(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldDiGe,
		})
		_node.DiGe = value
	}
	if value, ok := wglc.mutation.DiDaYan(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wugelucky.FieldDiDaYan,
		})
		_node.DiDaYan = value
	}
	if value, ok := wglc.mutation.WaiGe(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldWaiGe,
		})
		_node.WaiGe = value
	}
	if value, ok := wglc.mutation.WaiDaYan(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wugelucky.FieldWaiDaYan,
		})
		_node.WaiDaYan = value
	}
	if value, ok := wglc.mutation.ZongGe(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: wugelucky.FieldZongGe,
		})
		_node.ZongGe = value
	}
	if value, ok := wglc.mutation.ZongDaYan(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wugelucky.FieldZongDaYan,
		})
		_node.ZongDaYan = value
	}
	if value, ok := wglc.mutation.ZongLucky(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: wugelucky.FieldZongLucky,
		})
		_node.ZongLucky = value
	}
	if value, ok := wglc.mutation.ZongSex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: wugelucky.FieldZongSex,
		})
		_node.ZongSex = value
	}
	if value, ok := wglc.mutation.ZongMax(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: wugelucky.FieldZongMax,
		})
		_node.ZongMax = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WuGeLucky.Create().
//		SetLastStroke1(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WuGeLuckyUpsert) {
//			SetLastStroke1(v+v).
//		}).
//		Exec(ctx)
func (wglc *WuGeLuckyCreate) OnConflict(opts ...sql.ConflictOption) *WuGeLuckyUpsertOne {
	wglc.conflict = opts
	return &WuGeLuckyUpsertOne{
		create: wglc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WuGeLucky.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wglc *WuGeLuckyCreate) OnConflictColumns(columns ...string) *WuGeLuckyUpsertOne {
	wglc.conflict = append(wglc.conflict, sql.ConflictColumns(columns...))
	return &WuGeLuckyUpsertOne{
		create: wglc,
	}
}

type (
	// WuGeLuckyUpsertOne is the builder for "upsert"-ing
	//  one WuGeLucky node.
	WuGeLuckyUpsertOne struct {
		create *WuGeLuckyCreate
	}

	// WuGeLuckyUpsert is the "OnConflict" setter.
	WuGeLuckyUpsert struct {
		*sql.UpdateSet
	}
)

// SetLastStroke1 sets the "last_stroke_1" field.
func (u *WuGeLuckyUpsert) SetLastStroke1(v int32) *WuGeLuckyUpsert {
	u.Set(wugelucky.FieldLastStroke1, v)
	return u
}

// UpdateLastStroke1 sets the "last_stroke_1" field to the value that was provided on create.
func (u *WuGeLuckyUpsert) UpdateLastStroke1() *WuGeLuckyUpsert {
	u.SetExcluded(wugelucky.FieldLastStroke1)
	return u
}

// AddLastStroke1 adds v to the "last_stroke_1" field.
func (u *WuGeLuckyUpsert) AddLastStroke1(v int32) *WuGeLuckyUpsert {
	u.Add(wugelucky.FieldLastStroke1, v)
	return u
}

// ClearLastStroke1 clears the value of the "last_stroke_1" field.
func (u *WuGeLuckyUpsert) ClearLastStroke1() *WuGeLuckyUpsert {
	u.SetNull(wugelucky.FieldLastStroke1)
	return u
}

// SetLastStroke2 sets the "last_stroke_2" field.
func (u *WuGeLuckyUpsert) SetLastStroke2(v int32) *WuGeLuckyUpsert {
	u.Set(wugelucky.FieldLastStroke2, v)
	return u
}

// UpdateLastStroke2 sets the "last_stroke_2" field to the value that was provided on create.
func (u *WuGeLuckyUpsert) UpdateLastStroke2() *WuGeLuckyUpsert {
	u.SetExcluded(wugelucky.FieldLastStroke2)
	return u
}

// AddLastStroke2 adds v to the "last_stroke_2" field.
func (u *WuGeLuckyUpsert) AddLastStroke2(v int32) *WuGeLuckyUpsert {
	u.Add(wugelucky.FieldLastStroke2, v)
	return u
}

// ClearLastStroke2 clears the value of the "last_stroke_2" field.
func (u *WuGeLuckyUpsert) ClearLastStroke2() *WuGeLuckyUpsert {
	u.SetNull(wugelucky.FieldLastStroke2)
	return u
}

// SetFirstStroke1 sets the "first_stroke_1" field.
func (u *WuGeLuckyUpsert) SetFirstStroke1(v int32) *WuGeLuckyUpsert {
	u.Set(wugelucky.FieldFirstStroke1, v)
	return u
}

// UpdateFirstStroke1 sets the "first_stroke_1" field to the value that was provided on create.
func (u *WuGeLuckyUpsert) UpdateFirstStroke1() *WuGeLuckyUpsert {
	u.SetExcluded(wugelucky.FieldFirstStroke1)
	return u
}

// AddFirstStroke1 adds v to the "first_stroke_1" field.
func (u *WuGeLuckyUpsert) AddFirstStroke1(v int32) *WuGeLuckyUpsert {
	u.Add(wugelucky.FieldFirstStroke1, v)
	return u
}

// ClearFirstStroke1 clears the value of the "first_stroke_1" field.
func (u *WuGeLuckyUpsert) ClearFirstStroke1() *WuGeLuckyUpsert {
	u.SetNull(wugelucky.FieldFirstStroke1)
	return u
}

// SetFirstStroke2 sets the "first_stroke_2" field.
func (u *WuGeLuckyUpsert) SetFirstStroke2(v int32) *WuGeLuckyUpsert {
	u.Set(wugelucky.FieldFirstStroke2, v)
	return u
}

// UpdateFirstStroke2 sets the "first_stroke_2" field to the value that was provided on create.
func (u *WuGeLuckyUpsert) UpdateFirstStroke2() *WuGeLuckyUpsert {
	u.SetExcluded(wugelucky.FieldFirstStroke2)
	return u
}

// AddFirstStroke2 adds v to the "first_stroke_2" field.
func (u *WuGeLuckyUpsert) AddFirstStroke2(v int32) *WuGeLuckyUpsert {
	u.Add(wugelucky.FieldFirstStroke2, v)
	return u
}

// ClearFirstStroke2 clears the value of the "first_stroke_2" field.
func (u *WuGeLuckyUpsert) ClearFirstStroke2() *WuGeLuckyUpsert {
	u.SetNull(wugelucky.FieldFirstStroke2)
	return u
}

// SetTianGe sets the "tian_ge" field.
func (u *WuGeLuckyUpsert) SetTianGe(v int32) *WuGeLuckyUpsert {
	u.Set(wugelucky.FieldTianGe, v)
	return u
}

// UpdateTianGe sets the "tian_ge" field to the value that was provided on create.
func (u *WuGeLuckyUpsert) UpdateTianGe() *WuGeLuckyUpsert {
	u.SetExcluded(wugelucky.FieldTianGe)
	return u
}

// AddTianGe adds v to the "tian_ge" field.
func (u *WuGeLuckyUpsert) AddTianGe(v int32) *WuGeLuckyUpsert {
	u.Add(wugelucky.FieldTianGe, v)
	return u
}

// ClearTianGe clears the value of the "tian_ge" field.
func (u *WuGeLuckyUpsert) ClearTianGe() *WuGeLuckyUpsert {
	u.SetNull(wugelucky.FieldTianGe)
	return u
}

// SetTianDaYan sets the "tian_da_yan" field.
func (u *WuGeLuckyUpsert) SetTianDaYan(v string) *WuGeLuckyUpsert {
	u.Set(wugelucky.FieldTianDaYan, v)
	return u
}

// UpdateTianDaYan sets the "tian_da_yan" field to the value that was provided on create.
func (u *WuGeLuckyUpsert) UpdateTianDaYan() *WuGeLuckyUpsert {
	u.SetExcluded(wugelucky.FieldTianDaYan)
	return u
}

// ClearTianDaYan clears the value of the "tian_da_yan" field.
func (u *WuGeLuckyUpsert) ClearTianDaYan() *WuGeLuckyUpsert {
	u.SetNull(wugelucky.FieldTianDaYan)
	return u
}

// SetRenGe sets the "ren_ge" field.
func (u *WuGeLuckyUpsert) SetRenGe(v int32) *WuGeLuckyUpsert {
	u.Set(wugelucky.FieldRenGe, v)
	return u
}

// UpdateRenGe sets the "ren_ge" field to the value that was provided on create.
func (u *WuGeLuckyUpsert) UpdateRenGe() *WuGeLuckyUpsert {
	u.SetExcluded(wugelucky.FieldRenGe)
	return u
}

// AddRenGe adds v to the "ren_ge" field.
func (u *WuGeLuckyUpsert) AddRenGe(v int32) *WuGeLuckyUpsert {
	u.Add(wugelucky.FieldRenGe, v)
	return u
}

// ClearRenGe clears the value of the "ren_ge" field.
func (u *WuGeLuckyUpsert) ClearRenGe() *WuGeLuckyUpsert {
	u.SetNull(wugelucky.FieldRenGe)
	return u
}

// SetRenDaYan sets the "ren_da_yan" field.
func (u *WuGeLuckyUpsert) SetRenDaYan(v string) *WuGeLuckyUpsert {
	u.Set(wugelucky.FieldRenDaYan, v)
	return u
}

// UpdateRenDaYan sets the "ren_da_yan" field to the value that was provided on create.
func (u *WuGeLuckyUpsert) UpdateRenDaYan() *WuGeLuckyUpsert {
	u.SetExcluded(wugelucky.FieldRenDaYan)
	return u
}

// ClearRenDaYan clears the value of the "ren_da_yan" field.
func (u *WuGeLuckyUpsert) ClearRenDaYan() *WuGeLuckyUpsert {
	u.SetNull(wugelucky.FieldRenDaYan)
	return u
}

// SetDiGe sets the "di_ge" field.
func (u *WuGeLuckyUpsert) SetDiGe(v int32) *WuGeLuckyUpsert {
	u.Set(wugelucky.FieldDiGe, v)
	return u
}

// UpdateDiGe sets the "di_ge" field to the value that was provided on create.
func (u *WuGeLuckyUpsert) UpdateDiGe() *WuGeLuckyUpsert {
	u.SetExcluded(wugelucky.FieldDiGe)
	return u
}

// AddDiGe adds v to the "di_ge" field.
func (u *WuGeLuckyUpsert) AddDiGe(v int32) *WuGeLuckyUpsert {
	u.Add(wugelucky.FieldDiGe, v)
	return u
}

// ClearDiGe clears the value of the "di_ge" field.
func (u *WuGeLuckyUpsert) ClearDiGe() *WuGeLuckyUpsert {
	u.SetNull(wugelucky.FieldDiGe)
	return u
}

// SetDiDaYan sets the "di_da_yan" field.
func (u *WuGeLuckyUpsert) SetDiDaYan(v string) *WuGeLuckyUpsert {
	u.Set(wugelucky.FieldDiDaYan, v)
	return u
}

// UpdateDiDaYan sets the "di_da_yan" field to the value that was provided on create.
func (u *WuGeLuckyUpsert) UpdateDiDaYan() *WuGeLuckyUpsert {
	u.SetExcluded(wugelucky.FieldDiDaYan)
	return u
}

// ClearDiDaYan clears the value of the "di_da_yan" field.
func (u *WuGeLuckyUpsert) ClearDiDaYan() *WuGeLuckyUpsert {
	u.SetNull(wugelucky.FieldDiDaYan)
	return u
}

// SetWaiGe sets the "wai_ge" field.
func (u *WuGeLuckyUpsert) SetWaiGe(v int32) *WuGeLuckyUpsert {
	u.Set(wugelucky.FieldWaiGe, v)
	return u
}

// UpdateWaiGe sets the "wai_ge" field to the value that was provided on create.
func (u *WuGeLuckyUpsert) UpdateWaiGe() *WuGeLuckyUpsert {
	u.SetExcluded(wugelucky.FieldWaiGe)
	return u
}

// AddWaiGe adds v to the "wai_ge" field.
func (u *WuGeLuckyUpsert) AddWaiGe(v int32) *WuGeLuckyUpsert {
	u.Add(wugelucky.FieldWaiGe, v)
	return u
}

// ClearWaiGe clears the value of the "wai_ge" field.
func (u *WuGeLuckyUpsert) ClearWaiGe() *WuGeLuckyUpsert {
	u.SetNull(wugelucky.FieldWaiGe)
	return u
}

// SetWaiDaYan sets the "wai_da_yan" field.
func (u *WuGeLuckyUpsert) SetWaiDaYan(v string) *WuGeLuckyUpsert {
	u.Set(wugelucky.FieldWaiDaYan, v)
	return u
}

// UpdateWaiDaYan sets the "wai_da_yan" field to the value that was provided on create.
func (u *WuGeLuckyUpsert) UpdateWaiDaYan() *WuGeLuckyUpsert {
	u.SetExcluded(wugelucky.FieldWaiDaYan)
	return u
}

// ClearWaiDaYan clears the value of the "wai_da_yan" field.
func (u *WuGeLuckyUpsert) ClearWaiDaYan() *WuGeLuckyUpsert {
	u.SetNull(wugelucky.FieldWaiDaYan)
	return u
}

// SetZongGe sets the "zong_ge" field.
func (u *WuGeLuckyUpsert) SetZongGe(v int32) *WuGeLuckyUpsert {
	u.Set(wugelucky.FieldZongGe, v)
	return u
}

// UpdateZongGe sets the "zong_ge" field to the value that was provided on create.
func (u *WuGeLuckyUpsert) UpdateZongGe() *WuGeLuckyUpsert {
	u.SetExcluded(wugelucky.FieldZongGe)
	return u
}

// AddZongGe adds v to the "zong_ge" field.
func (u *WuGeLuckyUpsert) AddZongGe(v int32) *WuGeLuckyUpsert {
	u.Add(wugelucky.FieldZongGe, v)
	return u
}

// ClearZongGe clears the value of the "zong_ge" field.
func (u *WuGeLuckyUpsert) ClearZongGe() *WuGeLuckyUpsert {
	u.SetNull(wugelucky.FieldZongGe)
	return u
}

// SetZongDaYan sets the "zong_da_yan" field.
func (u *WuGeLuckyUpsert) SetZongDaYan(v string) *WuGeLuckyUpsert {
	u.Set(wugelucky.FieldZongDaYan, v)
	return u
}

// UpdateZongDaYan sets the "zong_da_yan" field to the value that was provided on create.
func (u *WuGeLuckyUpsert) UpdateZongDaYan() *WuGeLuckyUpsert {
	u.SetExcluded(wugelucky.FieldZongDaYan)
	return u
}

// ClearZongDaYan clears the value of the "zong_da_yan" field.
func (u *WuGeLuckyUpsert) ClearZongDaYan() *WuGeLuckyUpsert {
	u.SetNull(wugelucky.FieldZongDaYan)
	return u
}

// SetZongLucky sets the "zong_lucky" field.
func (u *WuGeLuckyUpsert) SetZongLucky(v bool) *WuGeLuckyUpsert {
	u.Set(wugelucky.FieldZongLucky, v)
	return u
}

// UpdateZongLucky sets the "zong_lucky" field to the value that was provided on create.
func (u *WuGeLuckyUpsert) UpdateZongLucky() *WuGeLuckyUpsert {
	u.SetExcluded(wugelucky.FieldZongLucky)
	return u
}

// ClearZongLucky clears the value of the "zong_lucky" field.
func (u *WuGeLuckyUpsert) ClearZongLucky() *WuGeLuckyUpsert {
	u.SetNull(wugelucky.FieldZongLucky)
	return u
}

// SetZongSex sets the "zong_sex" field.
func (u *WuGeLuckyUpsert) SetZongSex(v bool) *WuGeLuckyUpsert {
	u.Set(wugelucky.FieldZongSex, v)
	return u
}

// UpdateZongSex sets the "zong_sex" field to the value that was provided on create.
func (u *WuGeLuckyUpsert) UpdateZongSex() *WuGeLuckyUpsert {
	u.SetExcluded(wugelucky.FieldZongSex)
	return u
}

// ClearZongSex clears the value of the "zong_sex" field.
func (u *WuGeLuckyUpsert) ClearZongSex() *WuGeLuckyUpsert {
	u.SetNull(wugelucky.FieldZongSex)
	return u
}

// SetZongMax sets the "zong_max" field.
func (u *WuGeLuckyUpsert) SetZongMax(v bool) *WuGeLuckyUpsert {
	u.Set(wugelucky.FieldZongMax, v)
	return u
}

// UpdateZongMax sets the "zong_max" field to the value that was provided on create.
func (u *WuGeLuckyUpsert) UpdateZongMax() *WuGeLuckyUpsert {
	u.SetExcluded(wugelucky.FieldZongMax)
	return u
}

// ClearZongMax clears the value of the "zong_max" field.
func (u *WuGeLuckyUpsert) ClearZongMax() *WuGeLuckyUpsert {
	u.SetNull(wugelucky.FieldZongMax)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.WuGeLucky.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(wugelucky.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WuGeLuckyUpsertOne) UpdateNewValues() *WuGeLuckyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(wugelucky.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WuGeLucky.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WuGeLuckyUpsertOne) Ignore() *WuGeLuckyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WuGeLuckyUpsertOne) DoNothing() *WuGeLuckyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WuGeLuckyCreate.OnConflict
// documentation for more info.
func (u *WuGeLuckyUpsertOne) Update(set func(*WuGeLuckyUpsert)) *WuGeLuckyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WuGeLuckyUpsert{UpdateSet: update})
	}))
	return u
}

// SetLastStroke1 sets the "last_stroke_1" field.
func (u *WuGeLuckyUpsertOne) SetLastStroke1(v int32) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetLastStroke1(v)
	})
}

// AddLastStroke1 adds v to the "last_stroke_1" field.
func (u *WuGeLuckyUpsertOne) AddLastStroke1(v int32) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.AddLastStroke1(v)
	})
}

// UpdateLastStroke1 sets the "last_stroke_1" field to the value that was provided on create.
func (u *WuGeLuckyUpsertOne) UpdateLastStroke1() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateLastStroke1()
	})
}

// ClearLastStroke1 clears the value of the "last_stroke_1" field.
func (u *WuGeLuckyUpsertOne) ClearLastStroke1() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearLastStroke1()
	})
}

// SetLastStroke2 sets the "last_stroke_2" field.
func (u *WuGeLuckyUpsertOne) SetLastStroke2(v int32) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetLastStroke2(v)
	})
}

// AddLastStroke2 adds v to the "last_stroke_2" field.
func (u *WuGeLuckyUpsertOne) AddLastStroke2(v int32) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.AddLastStroke2(v)
	})
}

// UpdateLastStroke2 sets the "last_stroke_2" field to the value that was provided on create.
func (u *WuGeLuckyUpsertOne) UpdateLastStroke2() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateLastStroke2()
	})
}

// ClearLastStroke2 clears the value of the "last_stroke_2" field.
func (u *WuGeLuckyUpsertOne) ClearLastStroke2() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearLastStroke2()
	})
}

// SetFirstStroke1 sets the "first_stroke_1" field.
func (u *WuGeLuckyUpsertOne) SetFirstStroke1(v int32) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetFirstStroke1(v)
	})
}

// AddFirstStroke1 adds v to the "first_stroke_1" field.
func (u *WuGeLuckyUpsertOne) AddFirstStroke1(v int32) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.AddFirstStroke1(v)
	})
}

// UpdateFirstStroke1 sets the "first_stroke_1" field to the value that was provided on create.
func (u *WuGeLuckyUpsertOne) UpdateFirstStroke1() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateFirstStroke1()
	})
}

// ClearFirstStroke1 clears the value of the "first_stroke_1" field.
func (u *WuGeLuckyUpsertOne) ClearFirstStroke1() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearFirstStroke1()
	})
}

// SetFirstStroke2 sets the "first_stroke_2" field.
func (u *WuGeLuckyUpsertOne) SetFirstStroke2(v int32) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetFirstStroke2(v)
	})
}

// AddFirstStroke2 adds v to the "first_stroke_2" field.
func (u *WuGeLuckyUpsertOne) AddFirstStroke2(v int32) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.AddFirstStroke2(v)
	})
}

// UpdateFirstStroke2 sets the "first_stroke_2" field to the value that was provided on create.
func (u *WuGeLuckyUpsertOne) UpdateFirstStroke2() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateFirstStroke2()
	})
}

// ClearFirstStroke2 clears the value of the "first_stroke_2" field.
func (u *WuGeLuckyUpsertOne) ClearFirstStroke2() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearFirstStroke2()
	})
}

// SetTianGe sets the "tian_ge" field.
func (u *WuGeLuckyUpsertOne) SetTianGe(v int32) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetTianGe(v)
	})
}

// AddTianGe adds v to the "tian_ge" field.
func (u *WuGeLuckyUpsertOne) AddTianGe(v int32) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.AddTianGe(v)
	})
}

// UpdateTianGe sets the "tian_ge" field to the value that was provided on create.
func (u *WuGeLuckyUpsertOne) UpdateTianGe() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateTianGe()
	})
}

// ClearTianGe clears the value of the "tian_ge" field.
func (u *WuGeLuckyUpsertOne) ClearTianGe() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearTianGe()
	})
}

// SetTianDaYan sets the "tian_da_yan" field.
func (u *WuGeLuckyUpsertOne) SetTianDaYan(v string) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetTianDaYan(v)
	})
}

// UpdateTianDaYan sets the "tian_da_yan" field to the value that was provided on create.
func (u *WuGeLuckyUpsertOne) UpdateTianDaYan() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateTianDaYan()
	})
}

// ClearTianDaYan clears the value of the "tian_da_yan" field.
func (u *WuGeLuckyUpsertOne) ClearTianDaYan() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearTianDaYan()
	})
}

// SetRenGe sets the "ren_ge" field.
func (u *WuGeLuckyUpsertOne) SetRenGe(v int32) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetRenGe(v)
	})
}

// AddRenGe adds v to the "ren_ge" field.
func (u *WuGeLuckyUpsertOne) AddRenGe(v int32) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.AddRenGe(v)
	})
}

// UpdateRenGe sets the "ren_ge" field to the value that was provided on create.
func (u *WuGeLuckyUpsertOne) UpdateRenGe() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateRenGe()
	})
}

// ClearRenGe clears the value of the "ren_ge" field.
func (u *WuGeLuckyUpsertOne) ClearRenGe() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearRenGe()
	})
}

// SetRenDaYan sets the "ren_da_yan" field.
func (u *WuGeLuckyUpsertOne) SetRenDaYan(v string) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetRenDaYan(v)
	})
}

// UpdateRenDaYan sets the "ren_da_yan" field to the value that was provided on create.
func (u *WuGeLuckyUpsertOne) UpdateRenDaYan() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateRenDaYan()
	})
}

// ClearRenDaYan clears the value of the "ren_da_yan" field.
func (u *WuGeLuckyUpsertOne) ClearRenDaYan() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearRenDaYan()
	})
}

// SetDiGe sets the "di_ge" field.
func (u *WuGeLuckyUpsertOne) SetDiGe(v int32) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetDiGe(v)
	})
}

// AddDiGe adds v to the "di_ge" field.
func (u *WuGeLuckyUpsertOne) AddDiGe(v int32) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.AddDiGe(v)
	})
}

// UpdateDiGe sets the "di_ge" field to the value that was provided on create.
func (u *WuGeLuckyUpsertOne) UpdateDiGe() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateDiGe()
	})
}

// ClearDiGe clears the value of the "di_ge" field.
func (u *WuGeLuckyUpsertOne) ClearDiGe() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearDiGe()
	})
}

// SetDiDaYan sets the "di_da_yan" field.
func (u *WuGeLuckyUpsertOne) SetDiDaYan(v string) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetDiDaYan(v)
	})
}

// UpdateDiDaYan sets the "di_da_yan" field to the value that was provided on create.
func (u *WuGeLuckyUpsertOne) UpdateDiDaYan() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateDiDaYan()
	})
}

// ClearDiDaYan clears the value of the "di_da_yan" field.
func (u *WuGeLuckyUpsertOne) ClearDiDaYan() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearDiDaYan()
	})
}

// SetWaiGe sets the "wai_ge" field.
func (u *WuGeLuckyUpsertOne) SetWaiGe(v int32) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetWaiGe(v)
	})
}

// AddWaiGe adds v to the "wai_ge" field.
func (u *WuGeLuckyUpsertOne) AddWaiGe(v int32) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.AddWaiGe(v)
	})
}

// UpdateWaiGe sets the "wai_ge" field to the value that was provided on create.
func (u *WuGeLuckyUpsertOne) UpdateWaiGe() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateWaiGe()
	})
}

// ClearWaiGe clears the value of the "wai_ge" field.
func (u *WuGeLuckyUpsertOne) ClearWaiGe() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearWaiGe()
	})
}

// SetWaiDaYan sets the "wai_da_yan" field.
func (u *WuGeLuckyUpsertOne) SetWaiDaYan(v string) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetWaiDaYan(v)
	})
}

// UpdateWaiDaYan sets the "wai_da_yan" field to the value that was provided on create.
func (u *WuGeLuckyUpsertOne) UpdateWaiDaYan() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateWaiDaYan()
	})
}

// ClearWaiDaYan clears the value of the "wai_da_yan" field.
func (u *WuGeLuckyUpsertOne) ClearWaiDaYan() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearWaiDaYan()
	})
}

// SetZongGe sets the "zong_ge" field.
func (u *WuGeLuckyUpsertOne) SetZongGe(v int32) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetZongGe(v)
	})
}

// AddZongGe adds v to the "zong_ge" field.
func (u *WuGeLuckyUpsertOne) AddZongGe(v int32) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.AddZongGe(v)
	})
}

// UpdateZongGe sets the "zong_ge" field to the value that was provided on create.
func (u *WuGeLuckyUpsertOne) UpdateZongGe() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateZongGe()
	})
}

// ClearZongGe clears the value of the "zong_ge" field.
func (u *WuGeLuckyUpsertOne) ClearZongGe() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearZongGe()
	})
}

// SetZongDaYan sets the "zong_da_yan" field.
func (u *WuGeLuckyUpsertOne) SetZongDaYan(v string) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetZongDaYan(v)
	})
}

// UpdateZongDaYan sets the "zong_da_yan" field to the value that was provided on create.
func (u *WuGeLuckyUpsertOne) UpdateZongDaYan() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateZongDaYan()
	})
}

// ClearZongDaYan clears the value of the "zong_da_yan" field.
func (u *WuGeLuckyUpsertOne) ClearZongDaYan() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearZongDaYan()
	})
}

// SetZongLucky sets the "zong_lucky" field.
func (u *WuGeLuckyUpsertOne) SetZongLucky(v bool) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetZongLucky(v)
	})
}

// UpdateZongLucky sets the "zong_lucky" field to the value that was provided on create.
func (u *WuGeLuckyUpsertOne) UpdateZongLucky() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateZongLucky()
	})
}

// ClearZongLucky clears the value of the "zong_lucky" field.
func (u *WuGeLuckyUpsertOne) ClearZongLucky() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearZongLucky()
	})
}

// SetZongSex sets the "zong_sex" field.
func (u *WuGeLuckyUpsertOne) SetZongSex(v bool) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetZongSex(v)
	})
}

// UpdateZongSex sets the "zong_sex" field to the value that was provided on create.
func (u *WuGeLuckyUpsertOne) UpdateZongSex() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateZongSex()
	})
}

// ClearZongSex clears the value of the "zong_sex" field.
func (u *WuGeLuckyUpsertOne) ClearZongSex() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearZongSex()
	})
}

// SetZongMax sets the "zong_max" field.
func (u *WuGeLuckyUpsertOne) SetZongMax(v bool) *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetZongMax(v)
	})
}

// UpdateZongMax sets the "zong_max" field to the value that was provided on create.
func (u *WuGeLuckyUpsertOne) UpdateZongMax() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateZongMax()
	})
}

// ClearZongMax clears the value of the "zong_max" field.
func (u *WuGeLuckyUpsertOne) ClearZongMax() *WuGeLuckyUpsertOne {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearZongMax()
	})
}

// Exec executes the query.
func (u *WuGeLuckyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WuGeLuckyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WuGeLuckyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WuGeLuckyUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: WuGeLuckyUpsertOne.ID is not supported by MySQL driver. Use WuGeLuckyUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WuGeLuckyUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WuGeLuckyCreateBulk is the builder for creating many WuGeLucky entities in bulk.
type WuGeLuckyCreateBulk struct {
	config
	builders []*WuGeLuckyCreate
	conflict []sql.ConflictOption
}

// Save creates the WuGeLucky entities in the database.
func (wglcb *WuGeLuckyCreateBulk) Save(ctx context.Context) ([]*WuGeLucky, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wglcb.builders))
	nodes := make([]*WuGeLucky, len(wglcb.builders))
	mutators := make([]Mutator, len(wglcb.builders))
	for i := range wglcb.builders {
		func(i int, root context.Context) {
			builder := wglcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WuGeLuckyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wglcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wglcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wglcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wglcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wglcb *WuGeLuckyCreateBulk) SaveX(ctx context.Context) []*WuGeLucky {
	v, err := wglcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wglcb *WuGeLuckyCreateBulk) Exec(ctx context.Context) error {
	_, err := wglcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wglcb *WuGeLuckyCreateBulk) ExecX(ctx context.Context) {
	if err := wglcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WuGeLucky.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WuGeLuckyUpsert) {
//			SetLastStroke1(v+v).
//		}).
//		Exec(ctx)
func (wglcb *WuGeLuckyCreateBulk) OnConflict(opts ...sql.ConflictOption) *WuGeLuckyUpsertBulk {
	wglcb.conflict = opts
	return &WuGeLuckyUpsertBulk{
		create: wglcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WuGeLucky.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wglcb *WuGeLuckyCreateBulk) OnConflictColumns(columns ...string) *WuGeLuckyUpsertBulk {
	wglcb.conflict = append(wglcb.conflict, sql.ConflictColumns(columns...))
	return &WuGeLuckyUpsertBulk{
		create: wglcb,
	}
}

// WuGeLuckyUpsertBulk is the builder for "upsert"-ing
// a bulk of WuGeLucky nodes.
type WuGeLuckyUpsertBulk struct {
	create *WuGeLuckyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WuGeLucky.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(wugelucky.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WuGeLuckyUpsertBulk) UpdateNewValues() *WuGeLuckyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(wugelucky.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WuGeLucky.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WuGeLuckyUpsertBulk) Ignore() *WuGeLuckyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WuGeLuckyUpsertBulk) DoNothing() *WuGeLuckyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WuGeLuckyCreateBulk.OnConflict
// documentation for more info.
func (u *WuGeLuckyUpsertBulk) Update(set func(*WuGeLuckyUpsert)) *WuGeLuckyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WuGeLuckyUpsert{UpdateSet: update})
	}))
	return u
}

// SetLastStroke1 sets the "last_stroke_1" field.
func (u *WuGeLuckyUpsertBulk) SetLastStroke1(v int32) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetLastStroke1(v)
	})
}

// AddLastStroke1 adds v to the "last_stroke_1" field.
func (u *WuGeLuckyUpsertBulk) AddLastStroke1(v int32) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.AddLastStroke1(v)
	})
}

// UpdateLastStroke1 sets the "last_stroke_1" field to the value that was provided on create.
func (u *WuGeLuckyUpsertBulk) UpdateLastStroke1() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateLastStroke1()
	})
}

// ClearLastStroke1 clears the value of the "last_stroke_1" field.
func (u *WuGeLuckyUpsertBulk) ClearLastStroke1() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearLastStroke1()
	})
}

// SetLastStroke2 sets the "last_stroke_2" field.
func (u *WuGeLuckyUpsertBulk) SetLastStroke2(v int32) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetLastStroke2(v)
	})
}

// AddLastStroke2 adds v to the "last_stroke_2" field.
func (u *WuGeLuckyUpsertBulk) AddLastStroke2(v int32) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.AddLastStroke2(v)
	})
}

// UpdateLastStroke2 sets the "last_stroke_2" field to the value that was provided on create.
func (u *WuGeLuckyUpsertBulk) UpdateLastStroke2() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateLastStroke2()
	})
}

// ClearLastStroke2 clears the value of the "last_stroke_2" field.
func (u *WuGeLuckyUpsertBulk) ClearLastStroke2() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearLastStroke2()
	})
}

// SetFirstStroke1 sets the "first_stroke_1" field.
func (u *WuGeLuckyUpsertBulk) SetFirstStroke1(v int32) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetFirstStroke1(v)
	})
}

// AddFirstStroke1 adds v to the "first_stroke_1" field.
func (u *WuGeLuckyUpsertBulk) AddFirstStroke1(v int32) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.AddFirstStroke1(v)
	})
}

// UpdateFirstStroke1 sets the "first_stroke_1" field to the value that was provided on create.
func (u *WuGeLuckyUpsertBulk) UpdateFirstStroke1() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateFirstStroke1()
	})
}

// ClearFirstStroke1 clears the value of the "first_stroke_1" field.
func (u *WuGeLuckyUpsertBulk) ClearFirstStroke1() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearFirstStroke1()
	})
}

// SetFirstStroke2 sets the "first_stroke_2" field.
func (u *WuGeLuckyUpsertBulk) SetFirstStroke2(v int32) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetFirstStroke2(v)
	})
}

// AddFirstStroke2 adds v to the "first_stroke_2" field.
func (u *WuGeLuckyUpsertBulk) AddFirstStroke2(v int32) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.AddFirstStroke2(v)
	})
}

// UpdateFirstStroke2 sets the "first_stroke_2" field to the value that was provided on create.
func (u *WuGeLuckyUpsertBulk) UpdateFirstStroke2() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateFirstStroke2()
	})
}

// ClearFirstStroke2 clears the value of the "first_stroke_2" field.
func (u *WuGeLuckyUpsertBulk) ClearFirstStroke2() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearFirstStroke2()
	})
}

// SetTianGe sets the "tian_ge" field.
func (u *WuGeLuckyUpsertBulk) SetTianGe(v int32) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetTianGe(v)
	})
}

// AddTianGe adds v to the "tian_ge" field.
func (u *WuGeLuckyUpsertBulk) AddTianGe(v int32) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.AddTianGe(v)
	})
}

// UpdateTianGe sets the "tian_ge" field to the value that was provided on create.
func (u *WuGeLuckyUpsertBulk) UpdateTianGe() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateTianGe()
	})
}

// ClearTianGe clears the value of the "tian_ge" field.
func (u *WuGeLuckyUpsertBulk) ClearTianGe() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearTianGe()
	})
}

// SetTianDaYan sets the "tian_da_yan" field.
func (u *WuGeLuckyUpsertBulk) SetTianDaYan(v string) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetTianDaYan(v)
	})
}

// UpdateTianDaYan sets the "tian_da_yan" field to the value that was provided on create.
func (u *WuGeLuckyUpsertBulk) UpdateTianDaYan() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateTianDaYan()
	})
}

// ClearTianDaYan clears the value of the "tian_da_yan" field.
func (u *WuGeLuckyUpsertBulk) ClearTianDaYan() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearTianDaYan()
	})
}

// SetRenGe sets the "ren_ge" field.
func (u *WuGeLuckyUpsertBulk) SetRenGe(v int32) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetRenGe(v)
	})
}

// AddRenGe adds v to the "ren_ge" field.
func (u *WuGeLuckyUpsertBulk) AddRenGe(v int32) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.AddRenGe(v)
	})
}

// UpdateRenGe sets the "ren_ge" field to the value that was provided on create.
func (u *WuGeLuckyUpsertBulk) UpdateRenGe() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateRenGe()
	})
}

// ClearRenGe clears the value of the "ren_ge" field.
func (u *WuGeLuckyUpsertBulk) ClearRenGe() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearRenGe()
	})
}

// SetRenDaYan sets the "ren_da_yan" field.
func (u *WuGeLuckyUpsertBulk) SetRenDaYan(v string) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetRenDaYan(v)
	})
}

// UpdateRenDaYan sets the "ren_da_yan" field to the value that was provided on create.
func (u *WuGeLuckyUpsertBulk) UpdateRenDaYan() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateRenDaYan()
	})
}

// ClearRenDaYan clears the value of the "ren_da_yan" field.
func (u *WuGeLuckyUpsertBulk) ClearRenDaYan() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearRenDaYan()
	})
}

// SetDiGe sets the "di_ge" field.
func (u *WuGeLuckyUpsertBulk) SetDiGe(v int32) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetDiGe(v)
	})
}

// AddDiGe adds v to the "di_ge" field.
func (u *WuGeLuckyUpsertBulk) AddDiGe(v int32) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.AddDiGe(v)
	})
}

// UpdateDiGe sets the "di_ge" field to the value that was provided on create.
func (u *WuGeLuckyUpsertBulk) UpdateDiGe() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateDiGe()
	})
}

// ClearDiGe clears the value of the "di_ge" field.
func (u *WuGeLuckyUpsertBulk) ClearDiGe() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearDiGe()
	})
}

// SetDiDaYan sets the "di_da_yan" field.
func (u *WuGeLuckyUpsertBulk) SetDiDaYan(v string) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetDiDaYan(v)
	})
}

// UpdateDiDaYan sets the "di_da_yan" field to the value that was provided on create.
func (u *WuGeLuckyUpsertBulk) UpdateDiDaYan() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateDiDaYan()
	})
}

// ClearDiDaYan clears the value of the "di_da_yan" field.
func (u *WuGeLuckyUpsertBulk) ClearDiDaYan() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearDiDaYan()
	})
}

// SetWaiGe sets the "wai_ge" field.
func (u *WuGeLuckyUpsertBulk) SetWaiGe(v int32) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetWaiGe(v)
	})
}

// AddWaiGe adds v to the "wai_ge" field.
func (u *WuGeLuckyUpsertBulk) AddWaiGe(v int32) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.AddWaiGe(v)
	})
}

// UpdateWaiGe sets the "wai_ge" field to the value that was provided on create.
func (u *WuGeLuckyUpsertBulk) UpdateWaiGe() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateWaiGe()
	})
}

// ClearWaiGe clears the value of the "wai_ge" field.
func (u *WuGeLuckyUpsertBulk) ClearWaiGe() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearWaiGe()
	})
}

// SetWaiDaYan sets the "wai_da_yan" field.
func (u *WuGeLuckyUpsertBulk) SetWaiDaYan(v string) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetWaiDaYan(v)
	})
}

// UpdateWaiDaYan sets the "wai_da_yan" field to the value that was provided on create.
func (u *WuGeLuckyUpsertBulk) UpdateWaiDaYan() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateWaiDaYan()
	})
}

// ClearWaiDaYan clears the value of the "wai_da_yan" field.
func (u *WuGeLuckyUpsertBulk) ClearWaiDaYan() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearWaiDaYan()
	})
}

// SetZongGe sets the "zong_ge" field.
func (u *WuGeLuckyUpsertBulk) SetZongGe(v int32) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetZongGe(v)
	})
}

// AddZongGe adds v to the "zong_ge" field.
func (u *WuGeLuckyUpsertBulk) AddZongGe(v int32) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.AddZongGe(v)
	})
}

// UpdateZongGe sets the "zong_ge" field to the value that was provided on create.
func (u *WuGeLuckyUpsertBulk) UpdateZongGe() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateZongGe()
	})
}

// ClearZongGe clears the value of the "zong_ge" field.
func (u *WuGeLuckyUpsertBulk) ClearZongGe() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearZongGe()
	})
}

// SetZongDaYan sets the "zong_da_yan" field.
func (u *WuGeLuckyUpsertBulk) SetZongDaYan(v string) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetZongDaYan(v)
	})
}

// UpdateZongDaYan sets the "zong_da_yan" field to the value that was provided on create.
func (u *WuGeLuckyUpsertBulk) UpdateZongDaYan() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateZongDaYan()
	})
}

// ClearZongDaYan clears the value of the "zong_da_yan" field.
func (u *WuGeLuckyUpsertBulk) ClearZongDaYan() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearZongDaYan()
	})
}

// SetZongLucky sets the "zong_lucky" field.
func (u *WuGeLuckyUpsertBulk) SetZongLucky(v bool) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetZongLucky(v)
	})
}

// UpdateZongLucky sets the "zong_lucky" field to the value that was provided on create.
func (u *WuGeLuckyUpsertBulk) UpdateZongLucky() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateZongLucky()
	})
}

// ClearZongLucky clears the value of the "zong_lucky" field.
func (u *WuGeLuckyUpsertBulk) ClearZongLucky() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearZongLucky()
	})
}

// SetZongSex sets the "zong_sex" field.
func (u *WuGeLuckyUpsertBulk) SetZongSex(v bool) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetZongSex(v)
	})
}

// UpdateZongSex sets the "zong_sex" field to the value that was provided on create.
func (u *WuGeLuckyUpsertBulk) UpdateZongSex() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateZongSex()
	})
}

// ClearZongSex clears the value of the "zong_sex" field.
func (u *WuGeLuckyUpsertBulk) ClearZongSex() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearZongSex()
	})
}

// SetZongMax sets the "zong_max" field.
func (u *WuGeLuckyUpsertBulk) SetZongMax(v bool) *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.SetZongMax(v)
	})
}

// UpdateZongMax sets the "zong_max" field to the value that was provided on create.
func (u *WuGeLuckyUpsertBulk) UpdateZongMax() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.UpdateZongMax()
	})
}

// ClearZongMax clears the value of the "zong_max" field.
func (u *WuGeLuckyUpsertBulk) ClearZongMax() *WuGeLuckyUpsertBulk {
	return u.Update(func(s *WuGeLuckyUpsert) {
		s.ClearZongMax()
	})
}

// Exec executes the query.
func (u *WuGeLuckyUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WuGeLuckyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WuGeLuckyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WuGeLuckyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
