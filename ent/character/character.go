// Code generated by ent, DO NOT EDIT.

package character

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the character type in the database.
	Label = "character"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "hash"
	// FieldPinYin holds the string denoting the pin_yin field in the database.
	FieldPinYin = "pin_yin"
	// FieldCh holds the string denoting the ch field in the database.
	FieldCh = "ch"
	// FieldRadical holds the string denoting the radical field in the database.
	FieldRadical = "radical"
	// FieldRadicalStroke holds the string denoting the radical_stroke field in the database.
	FieldRadicalStroke = "radical_stroke"
	// FieldStroke holds the string denoting the stroke field in the database.
	FieldStroke = "stroke"
	// FieldIsKangXi holds the string denoting the is_kang_xi field in the database.
	FieldIsKangXi = "is_kang_xi"
	// FieldKangXi holds the string denoting the kang_xi field in the database.
	FieldKangXi = "kang_xi"
	// FieldKangXiStroke holds the string denoting the kang_xi_stroke field in the database.
	FieldKangXiStroke = "kang_xi_stroke"
	// FieldSimpleRadical holds the string denoting the simple_radical field in the database.
	FieldSimpleRadical = "simple_radical"
	// FieldSimpleRadicalStroke holds the string denoting the simple_radical_stroke field in the database.
	FieldSimpleRadicalStroke = "simple_radical_stroke"
	// FieldSimpleTotalStroke holds the string denoting the simple_total_stroke field in the database.
	FieldSimpleTotalStroke = "simple_total_stroke"
	// FieldTraditionalRadical holds the string denoting the traditional_radical field in the database.
	FieldTraditionalRadical = "traditional_radical"
	// FieldTraditionalRadicalStroke holds the string denoting the traditional_radical_stroke field in the database.
	FieldTraditionalRadicalStroke = "traditional_radical_stroke"
	// FieldTraditionalTotalStroke holds the string denoting the traditional_total_stroke field in the database.
	FieldTraditionalTotalStroke = "traditional_total_stroke"
	// FieldNameScience holds the string denoting the name_science field in the database.
	FieldNameScience = "name_science"
	// FieldWuXing holds the string denoting the wu_xing field in the database.
	FieldWuXing = "wu_xing"
	// FieldLucky holds the string denoting the lucky field in the database.
	FieldLucky = "lucky"
	// FieldRegular holds the string denoting the regular field in the database.
	FieldRegular = "regular"
	// FieldTraditionalCharacter holds the string denoting the traditional_character field in the database.
	FieldTraditionalCharacter = "traditional_character"
	// FieldVariantCharacter holds the string denoting the variant_character field in the database.
	FieldVariantCharacter = "variant_character"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldScienceStroke holds the string denoting the science_stroke field in the database.
	FieldScienceStroke = "science_stroke"
	// Table holds the table name of the character in the database.
	Table = "character"
)

// Columns holds all SQL columns for character fields.
var Columns = []string{
	FieldID,
	FieldPinYin,
	FieldCh,
	FieldRadical,
	FieldRadicalStroke,
	FieldStroke,
	FieldIsKangXi,
	FieldKangXi,
	FieldKangXiStroke,
	FieldSimpleRadical,
	FieldSimpleRadicalStroke,
	FieldSimpleTotalStroke,
	FieldTraditionalRadical,
	FieldTraditionalRadicalStroke,
	FieldTraditionalTotalStroke,
	FieldNameScience,
	FieldWuXing,
	FieldLucky,
	FieldRegular,
	FieldTraditionalCharacter,
	FieldVariantCharacter,
	FieldComment,
	FieldScienceStroke,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Character queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPinYin orders the results by the pin_yin field.
func ByPinYin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPinYin, opts...).ToFunc()
}

// ByCh orders the results by the ch field.
func ByCh(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCh, opts...).ToFunc()
}

// ByRadical orders the results by the radical field.
func ByRadical(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRadical, opts...).ToFunc()
}

// ByRadicalStroke orders the results by the radical_stroke field.
func ByRadicalStroke(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRadicalStroke, opts...).ToFunc()
}

// ByStroke orders the results by the stroke field.
func ByStroke(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStroke, opts...).ToFunc()
}

// ByIsKangXi orders the results by the is_kang_xi field.
func ByIsKangXi(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsKangXi, opts...).ToFunc()
}

// ByKangXi orders the results by the kang_xi field.
func ByKangXi(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKangXi, opts...).ToFunc()
}

// ByKangXiStroke orders the results by the kang_xi_stroke field.
func ByKangXiStroke(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKangXiStroke, opts...).ToFunc()
}

// BySimpleRadical orders the results by the simple_radical field.
func BySimpleRadical(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSimpleRadical, opts...).ToFunc()
}

// BySimpleRadicalStroke orders the results by the simple_radical_stroke field.
func BySimpleRadicalStroke(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSimpleRadicalStroke, opts...).ToFunc()
}

// BySimpleTotalStroke orders the results by the simple_total_stroke field.
func BySimpleTotalStroke(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSimpleTotalStroke, opts...).ToFunc()
}

// ByTraditionalRadical orders the results by the traditional_radical field.
func ByTraditionalRadical(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTraditionalRadical, opts...).ToFunc()
}

// ByTraditionalRadicalStroke orders the results by the traditional_radical_stroke field.
func ByTraditionalRadicalStroke(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTraditionalRadicalStroke, opts...).ToFunc()
}

// ByTraditionalTotalStroke orders the results by the traditional_total_stroke field.
func ByTraditionalTotalStroke(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTraditionalTotalStroke, opts...).ToFunc()
}

// ByNameScience orders the results by the name_science field.
func ByNameScience(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameScience, opts...).ToFunc()
}

// ByWuXing orders the results by the wu_xing field.
func ByWuXing(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWuXing, opts...).ToFunc()
}

// ByLucky orders the results by the lucky field.
func ByLucky(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLucky, opts...).ToFunc()
}

// ByRegular orders the results by the regular field.
func ByRegular(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegular, opts...).ToFunc()
}

// ByTraditionalCharacter orders the results by the traditional_character field.
func ByTraditionalCharacter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTraditionalCharacter, opts...).ToFunc()
}

// ByVariantCharacter orders the results by the variant_character field.
func ByVariantCharacter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVariantCharacter, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByScienceStroke orders the results by the science_stroke field.
func ByScienceStroke(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScienceStroke, opts...).ToFunc()
}
