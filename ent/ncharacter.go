// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/babyname/fate/ent/ncharacter"
)

// NCharacter is the model entity for the NCharacter schema.
type NCharacter struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// PinYin holds the value of the "pin_yin" field.
	PinYin string `json:"pin_yin,omitempty"`
	// ChID holds the value of the "ch_id" field.
	ChID int64 `json:"ch_id,omitempty"`
	// Ch holds the value of the "ch" field.
	Ch string `json:"ch,omitempty"`
	// Radical holds the value of the "radical" field.
	Radical string `json:"radical,omitempty"`
	// RadicalStroke holds the value of the "radical_stroke" field.
	RadicalStroke int `json:"radical_stroke,omitempty"`
	// TotalStroke holds the value of the "total_stroke" field.
	TotalStroke int `json:"total_stroke,omitempty"`
	// IsKangXi holds the value of the "is_kang_xi" field.
	IsKangXi bool `json:"is_kang_xi,omitempty"`
	// RelateKangXi holds the value of the "relate_kang_xi" field.
	RelateKangXi string `json:"relate_kang_xi,omitempty"`
	// RelateSimple holds the value of the "relate_simple" field.
	RelateSimple string `json:"relate_simple,omitempty"`
	// RelateTraditional holds the value of the "relate_traditional" field.
	RelateTraditional string `json:"relate_traditional,omitempty"`
	// RelateVariant holds the value of the "relate_variant" field.
	RelateVariant string `json:"relate_variant,omitempty"`
	// NameScience holds the value of the "name_science" field.
	NameScience bool `json:"name_science,omitempty"`
	// ScienceStroke holds the value of the "science_stroke" field.
	ScienceStroke int `json:"science_stroke,omitempty"`
	// WuXing holds the value of the "wu_xing" field.
	WuXing string `json:"wu_xing,omitempty"`
	// Lucky holds the value of the "lucky" field.
	Lucky string `json:"lucky,omitempty"`
	// Regular holds the value of the "regular" field.
	Regular bool `json:"regular,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment      string `json:"comment,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NCharacter) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ncharacter.FieldIsKangXi, ncharacter.FieldNameScience, ncharacter.FieldRegular:
			values[i] = new(sql.NullBool)
		case ncharacter.FieldChID, ncharacter.FieldRadicalStroke, ncharacter.FieldTotalStroke, ncharacter.FieldScienceStroke:
			values[i] = new(sql.NullInt64)
		case ncharacter.FieldID, ncharacter.FieldPinYin, ncharacter.FieldCh, ncharacter.FieldRadical, ncharacter.FieldRelateKangXi, ncharacter.FieldRelateSimple, ncharacter.FieldRelateTraditional, ncharacter.FieldRelateVariant, ncharacter.FieldWuXing, ncharacter.FieldLucky, ncharacter.FieldComment:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NCharacter fields.
func (n *NCharacter) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ncharacter.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				n.ID = value.String
			}
		case ncharacter.FieldPinYin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pin_yin", values[i])
			} else if value.Valid {
				n.PinYin = value.String
			}
		case ncharacter.FieldChID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ch_id", values[i])
			} else if value.Valid {
				n.ChID = value.Int64
			}
		case ncharacter.FieldCh:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ch", values[i])
			} else if value.Valid {
				n.Ch = value.String
			}
		case ncharacter.FieldRadical:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field radical", values[i])
			} else if value.Valid {
				n.Radical = value.String
			}
		case ncharacter.FieldRadicalStroke:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field radical_stroke", values[i])
			} else if value.Valid {
				n.RadicalStroke = int(value.Int64)
			}
		case ncharacter.FieldTotalStroke:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_stroke", values[i])
			} else if value.Valid {
				n.TotalStroke = int(value.Int64)
			}
		case ncharacter.FieldIsKangXi:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_kang_xi", values[i])
			} else if value.Valid {
				n.IsKangXi = value.Bool
			}
		case ncharacter.FieldRelateKangXi:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field relate_kang_xi", values[i])
			} else if value.Valid {
				n.RelateKangXi = value.String
			}
		case ncharacter.FieldRelateSimple:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field relate_simple", values[i])
			} else if value.Valid {
				n.RelateSimple = value.String
			}
		case ncharacter.FieldRelateTraditional:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field relate_traditional", values[i])
			} else if value.Valid {
				n.RelateTraditional = value.String
			}
		case ncharacter.FieldRelateVariant:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field relate_variant", values[i])
			} else if value.Valid {
				n.RelateVariant = value.String
			}
		case ncharacter.FieldNameScience:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field name_science", values[i])
			} else if value.Valid {
				n.NameScience = value.Bool
			}
		case ncharacter.FieldScienceStroke:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field science_stroke", values[i])
			} else if value.Valid {
				n.ScienceStroke = int(value.Int64)
			}
		case ncharacter.FieldWuXing:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wu_xing", values[i])
			} else if value.Valid {
				n.WuXing = value.String
			}
		case ncharacter.FieldLucky:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lucky", values[i])
			} else if value.Valid {
				n.Lucky = value.String
			}
		case ncharacter.FieldRegular:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field regular", values[i])
			} else if value.Valid {
				n.Regular = value.Bool
			}
		case ncharacter.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				n.Comment = value.String
			}
		default:
			n.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NCharacter.
// This includes values selected through modifiers, order, etc.
func (n *NCharacter) Value(name string) (ent.Value, error) {
	return n.selectValues.Get(name)
}

// Update returns a builder for updating this NCharacter.
// Note that you need to call NCharacter.Unwrap() before calling this method if this NCharacter
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *NCharacter) Update() *NCharacterUpdateOne {
	return NewNCharacterClient(n.config).UpdateOne(n)
}

// Unwrap unwraps the NCharacter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *NCharacter) Unwrap() *NCharacter {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: NCharacter is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *NCharacter) String() string {
	var builder strings.Builder
	builder.WriteString("NCharacter(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("pin_yin=")
	builder.WriteString(n.PinYin)
	builder.WriteString(", ")
	builder.WriteString("ch_id=")
	builder.WriteString(fmt.Sprintf("%v", n.ChID))
	builder.WriteString(", ")
	builder.WriteString("ch=")
	builder.WriteString(n.Ch)
	builder.WriteString(", ")
	builder.WriteString("radical=")
	builder.WriteString(n.Radical)
	builder.WriteString(", ")
	builder.WriteString("radical_stroke=")
	builder.WriteString(fmt.Sprintf("%v", n.RadicalStroke))
	builder.WriteString(", ")
	builder.WriteString("total_stroke=")
	builder.WriteString(fmt.Sprintf("%v", n.TotalStroke))
	builder.WriteString(", ")
	builder.WriteString("is_kang_xi=")
	builder.WriteString(fmt.Sprintf("%v", n.IsKangXi))
	builder.WriteString(", ")
	builder.WriteString("relate_kang_xi=")
	builder.WriteString(n.RelateKangXi)
	builder.WriteString(", ")
	builder.WriteString("relate_simple=")
	builder.WriteString(n.RelateSimple)
	builder.WriteString(", ")
	builder.WriteString("relate_traditional=")
	builder.WriteString(n.RelateTraditional)
	builder.WriteString(", ")
	builder.WriteString("relate_variant=")
	builder.WriteString(n.RelateVariant)
	builder.WriteString(", ")
	builder.WriteString("name_science=")
	builder.WriteString(fmt.Sprintf("%v", n.NameScience))
	builder.WriteString(", ")
	builder.WriteString("science_stroke=")
	builder.WriteString(fmt.Sprintf("%v", n.ScienceStroke))
	builder.WriteString(", ")
	builder.WriteString("wu_xing=")
	builder.WriteString(n.WuXing)
	builder.WriteString(", ")
	builder.WriteString("lucky=")
	builder.WriteString(n.Lucky)
	builder.WriteString(", ")
	builder.WriteString("regular=")
	builder.WriteString(fmt.Sprintf("%v", n.Regular))
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(n.Comment)
	builder.WriteByte(')')
	return builder.String()
}

// NCharacters is a parsable slice of NCharacter.
type NCharacters []*NCharacter
