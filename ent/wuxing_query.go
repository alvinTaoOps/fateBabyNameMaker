// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/babyname/fate/ent/predicate"
	"github.com/babyname/fate/ent/wuxing"
)

// WuXingQuery is the builder for querying WuXing entities.
type WuXingQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.WuXing
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WuXingQuery builder.
func (wxq *WuXingQuery) Where(ps ...predicate.WuXing) *WuXingQuery {
	wxq.predicates = append(wxq.predicates, ps...)
	return wxq
}

// Limit adds a limit step to the query.
func (wxq *WuXingQuery) Limit(limit int) *WuXingQuery {
	wxq.limit = &limit
	return wxq
}

// Offset adds an offset step to the query.
func (wxq *WuXingQuery) Offset(offset int) *WuXingQuery {
	wxq.offset = &offset
	return wxq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (wxq *WuXingQuery) Unique(unique bool) *WuXingQuery {
	wxq.unique = &unique
	return wxq
}

// Order adds an order step to the query.
func (wxq *WuXingQuery) Order(o ...OrderFunc) *WuXingQuery {
	wxq.order = append(wxq.order, o...)
	return wxq
}

// First returns the first WuXing entity from the query.
// Returns a *NotFoundError when no WuXing was found.
func (wxq *WuXingQuery) First(ctx context.Context) (*WuXing, error) {
	nodes, err := wxq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{wuxing.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wxq *WuXingQuery) FirstX(ctx context.Context) *WuXing {
	node, err := wxq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WuXing ID from the query.
// Returns a *NotFoundError when no WuXing ID was found.
func (wxq *WuXingQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = wxq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{wuxing.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (wxq *WuXingQuery) FirstIDX(ctx context.Context) string {
	id, err := wxq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WuXing entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WuXing entity is found.
// Returns a *NotFoundError when no WuXing entities are found.
func (wxq *WuXingQuery) Only(ctx context.Context) (*WuXing, error) {
	nodes, err := wxq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{wuxing.Label}
	default:
		return nil, &NotSingularError{wuxing.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wxq *WuXingQuery) OnlyX(ctx context.Context) *WuXing {
	node, err := wxq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WuXing ID in the query.
// Returns a *NotSingularError when more than one WuXing ID is found.
// Returns a *NotFoundError when no entities are found.
func (wxq *WuXingQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = wxq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{wuxing.Label}
	default:
		err = &NotSingularError{wuxing.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (wxq *WuXingQuery) OnlyIDX(ctx context.Context) string {
	id, err := wxq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WuXings.
func (wxq *WuXingQuery) All(ctx context.Context) ([]*WuXing, error) {
	if err := wxq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return wxq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (wxq *WuXingQuery) AllX(ctx context.Context) []*WuXing {
	nodes, err := wxq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WuXing IDs.
func (wxq *WuXingQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := wxq.Select(wuxing.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wxq *WuXingQuery) IDsX(ctx context.Context) []string {
	ids, err := wxq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wxq *WuXingQuery) Count(ctx context.Context) (int, error) {
	if err := wxq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return wxq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (wxq *WuXingQuery) CountX(ctx context.Context) int {
	count, err := wxq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wxq *WuXingQuery) Exist(ctx context.Context) (bool, error) {
	if err := wxq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return wxq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (wxq *WuXingQuery) ExistX(ctx context.Context) bool {
	exist, err := wxq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WuXingQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wxq *WuXingQuery) Clone() *WuXingQuery {
	if wxq == nil {
		return nil
	}
	return &WuXingQuery{
		config:     wxq.config,
		limit:      wxq.limit,
		offset:     wxq.offset,
		order:      append([]OrderFunc{}, wxq.order...),
		predicates: append([]predicate.WuXing{}, wxq.predicates...),
		// clone intermediate query.
		sql:    wxq.sql.Clone(),
		path:   wxq.path,
		unique: wxq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Created time.Time `json:"created,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WuXing.Query().
//		GroupBy(wuxing.FieldCreated).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (wxq *WuXingQuery) GroupBy(field string, fields ...string) *WuXingGroupBy {
	grbuild := &WuXingGroupBy{config: wxq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := wxq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return wxq.sqlQuery(ctx), nil
	}
	grbuild.label = wuxing.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Created time.Time `json:"created,omitempty"`
//	}
//
//	client.WuXing.Query().
//		Select(wuxing.FieldCreated).
//		Scan(ctx, &v)
func (wxq *WuXingQuery) Select(fields ...string) *WuXingSelect {
	wxq.fields = append(wxq.fields, fields...)
	selbuild := &WuXingSelect{WuXingQuery: wxq}
	selbuild.label = wuxing.Label
	selbuild.flds, selbuild.scan = &wxq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a WuXingSelect configured with the given aggregations.
func (wxq *WuXingQuery) Aggregate(fns ...AggregateFunc) *WuXingSelect {
	return wxq.Select().Aggregate(fns...)
}

func (wxq *WuXingQuery) prepareQuery(ctx context.Context) error {
	for _, f := range wxq.fields {
		if !wuxing.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if wxq.path != nil {
		prev, err := wxq.path(ctx)
		if err != nil {
			return err
		}
		wxq.sql = prev
	}
	return nil
}

func (wxq *WuXingQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*WuXing, error) {
	var (
		nodes = []*WuXing{}
		_spec = wxq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*WuXing).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &WuXing{config: wxq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, wxq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (wxq *WuXingQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wxq.querySpec()
	_spec.Node.Columns = wxq.fields
	if len(wxq.fields) > 0 {
		_spec.Unique = wxq.unique != nil && *wxq.unique
	}
	return sqlgraph.CountNodes(ctx, wxq.driver, _spec)
}

func (wxq *WuXingQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := wxq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (wxq *WuXingQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   wuxing.Table,
			Columns: wuxing.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: wuxing.FieldID,
			},
		},
		From:   wxq.sql,
		Unique: true,
	}
	if unique := wxq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := wxq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wuxing.FieldID)
		for i := range fields {
			if fields[i] != wuxing.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := wxq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wxq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wxq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wxq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (wxq *WuXingQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(wxq.driver.Dialect())
	t1 := builder.Table(wuxing.Table)
	columns := wxq.fields
	if len(columns) == 0 {
		columns = wuxing.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wxq.sql != nil {
		selector = wxq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if wxq.unique != nil && *wxq.unique {
		selector.Distinct()
	}
	for _, p := range wxq.predicates {
		p(selector)
	}
	for _, p := range wxq.order {
		p(selector)
	}
	if offset := wxq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wxq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WuXingGroupBy is the group-by builder for WuXing entities.
type WuXingGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wxgb *WuXingGroupBy) Aggregate(fns ...AggregateFunc) *WuXingGroupBy {
	wxgb.fns = append(wxgb.fns, fns...)
	return wxgb
}

// Scan applies the group-by query and scans the result into the given value.
func (wxgb *WuXingGroupBy) Scan(ctx context.Context, v any) error {
	query, err := wxgb.path(ctx)
	if err != nil {
		return err
	}
	wxgb.sql = query
	return wxgb.sqlScan(ctx, v)
}

func (wxgb *WuXingGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range wxgb.fields {
		if !wuxing.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := wxgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wxgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (wxgb *WuXingGroupBy) sqlQuery() *sql.Selector {
	selector := wxgb.sql.Select()
	aggregation := make([]string, 0, len(wxgb.fns))
	for _, fn := range wxgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(wxgb.fields)+len(wxgb.fns))
		for _, f := range wxgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(wxgb.fields...)...)
}

// WuXingSelect is the builder for selecting fields of WuXing entities.
type WuXingSelect struct {
	*WuXingQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (wxs *WuXingSelect) Aggregate(fns ...AggregateFunc) *WuXingSelect {
	wxs.fns = append(wxs.fns, fns...)
	return wxs
}

// Scan applies the selector query and scans the result into the given value.
func (wxs *WuXingSelect) Scan(ctx context.Context, v any) error {
	if err := wxs.prepareQuery(ctx); err != nil {
		return err
	}
	wxs.sql = wxs.WuXingQuery.sqlQuery(ctx)
	return wxs.sqlScan(ctx, v)
}

func (wxs *WuXingSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(wxs.fns))
	for _, fn := range wxs.fns {
		aggregation = append(aggregation, fn(wxs.sql))
	}
	switch n := len(*wxs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		wxs.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		wxs.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := wxs.sql.Query()
	if err := wxs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
