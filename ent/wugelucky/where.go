// Code generated by ent, DO NOT EDIT.

package wugelucky

import (
	"entgo.io/ent/dialect/sql"
	"github.com/babyname/fate/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// LastStroke1 applies equality check predicate on the "last_stroke_1" field. It's identical to LastStroke1EQ.
func LastStroke1(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastStroke1), v))
	})
}

// LastStroke2 applies equality check predicate on the "last_stroke_2" field. It's identical to LastStroke2EQ.
func LastStroke2(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastStroke2), v))
	})
}

// FirstStroke1 applies equality check predicate on the "first_stroke_1" field. It's identical to FirstStroke1EQ.
func FirstStroke1(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstStroke1), v))
	})
}

// FirstStroke2 applies equality check predicate on the "first_stroke_2" field. It's identical to FirstStroke2EQ.
func FirstStroke2(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstStroke2), v))
	})
}

// TianGe applies equality check predicate on the "tian_ge" field. It's identical to TianGeEQ.
func TianGe(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTianGe), v))
	})
}

// TianDaYan applies equality check predicate on the "tian_da_yan" field. It's identical to TianDaYanEQ.
func TianDaYan(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTianDaYan), v))
	})
}

// RenGe applies equality check predicate on the "ren_ge" field. It's identical to RenGeEQ.
func RenGe(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRenGe), v))
	})
}

// RenDaYan applies equality check predicate on the "ren_da_yan" field. It's identical to RenDaYanEQ.
func RenDaYan(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRenDaYan), v))
	})
}

// DiGe applies equality check predicate on the "di_ge" field. It's identical to DiGeEQ.
func DiGe(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiGe), v))
	})
}

// DiDaYan applies equality check predicate on the "di_da_yan" field. It's identical to DiDaYanEQ.
func DiDaYan(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiDaYan), v))
	})
}

// WaiGe applies equality check predicate on the "wai_ge" field. It's identical to WaiGeEQ.
func WaiGe(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWaiGe), v))
	})
}

// WaiDaYan applies equality check predicate on the "wai_da_yan" field. It's identical to WaiDaYanEQ.
func WaiDaYan(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWaiDaYan), v))
	})
}

// ZongGe applies equality check predicate on the "zong_ge" field. It's identical to ZongGeEQ.
func ZongGe(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZongGe), v))
	})
}

// ZongDaYan applies equality check predicate on the "zong_da_yan" field. It's identical to ZongDaYanEQ.
func ZongDaYan(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZongDaYan), v))
	})
}

// ZongLucky applies equality check predicate on the "zong_lucky" field. It's identical to ZongLuckyEQ.
func ZongLucky(v bool) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZongLucky), v))
	})
}

// ZongSex applies equality check predicate on the "zong_sex" field. It's identical to ZongSexEQ.
func ZongSex(v bool) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZongSex), v))
	})
}

// ZongMax applies equality check predicate on the "zong_max" field. It's identical to ZongMaxEQ.
func ZongMax(v bool) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZongMax), v))
	})
}

// LastStroke1EQ applies the EQ predicate on the "last_stroke_1" field.
func LastStroke1EQ(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastStroke1), v))
	})
}

// LastStroke1NEQ applies the NEQ predicate on the "last_stroke_1" field.
func LastStroke1NEQ(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastStroke1), v))
	})
}

// LastStroke1In applies the In predicate on the "last_stroke_1" field.
func LastStroke1In(vs ...int32) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastStroke1), v...))
	})
}

// LastStroke1NotIn applies the NotIn predicate on the "last_stroke_1" field.
func LastStroke1NotIn(vs ...int32) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastStroke1), v...))
	})
}

// LastStroke1GT applies the GT predicate on the "last_stroke_1" field.
func LastStroke1GT(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastStroke1), v))
	})
}

// LastStroke1GTE applies the GTE predicate on the "last_stroke_1" field.
func LastStroke1GTE(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastStroke1), v))
	})
}

// LastStroke1LT applies the LT predicate on the "last_stroke_1" field.
func LastStroke1LT(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastStroke1), v))
	})
}

// LastStroke1LTE applies the LTE predicate on the "last_stroke_1" field.
func LastStroke1LTE(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastStroke1), v))
	})
}

// LastStroke1IsNil applies the IsNil predicate on the "last_stroke_1" field.
func LastStroke1IsNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastStroke1)))
	})
}

// LastStroke1NotNil applies the NotNil predicate on the "last_stroke_1" field.
func LastStroke1NotNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastStroke1)))
	})
}

// LastStroke2EQ applies the EQ predicate on the "last_stroke_2" field.
func LastStroke2EQ(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastStroke2), v))
	})
}

// LastStroke2NEQ applies the NEQ predicate on the "last_stroke_2" field.
func LastStroke2NEQ(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastStroke2), v))
	})
}

// LastStroke2In applies the In predicate on the "last_stroke_2" field.
func LastStroke2In(vs ...int32) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastStroke2), v...))
	})
}

// LastStroke2NotIn applies the NotIn predicate on the "last_stroke_2" field.
func LastStroke2NotIn(vs ...int32) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastStroke2), v...))
	})
}

// LastStroke2GT applies the GT predicate on the "last_stroke_2" field.
func LastStroke2GT(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastStroke2), v))
	})
}

// LastStroke2GTE applies the GTE predicate on the "last_stroke_2" field.
func LastStroke2GTE(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastStroke2), v))
	})
}

// LastStroke2LT applies the LT predicate on the "last_stroke_2" field.
func LastStroke2LT(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastStroke2), v))
	})
}

// LastStroke2LTE applies the LTE predicate on the "last_stroke_2" field.
func LastStroke2LTE(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastStroke2), v))
	})
}

// LastStroke2IsNil applies the IsNil predicate on the "last_stroke_2" field.
func LastStroke2IsNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastStroke2)))
	})
}

// LastStroke2NotNil applies the NotNil predicate on the "last_stroke_2" field.
func LastStroke2NotNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastStroke2)))
	})
}

// FirstStroke1EQ applies the EQ predicate on the "first_stroke_1" field.
func FirstStroke1EQ(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstStroke1), v))
	})
}

// FirstStroke1NEQ applies the NEQ predicate on the "first_stroke_1" field.
func FirstStroke1NEQ(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstStroke1), v))
	})
}

// FirstStroke1In applies the In predicate on the "first_stroke_1" field.
func FirstStroke1In(vs ...int32) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFirstStroke1), v...))
	})
}

// FirstStroke1NotIn applies the NotIn predicate on the "first_stroke_1" field.
func FirstStroke1NotIn(vs ...int32) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFirstStroke1), v...))
	})
}

// FirstStroke1GT applies the GT predicate on the "first_stroke_1" field.
func FirstStroke1GT(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstStroke1), v))
	})
}

// FirstStroke1GTE applies the GTE predicate on the "first_stroke_1" field.
func FirstStroke1GTE(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstStroke1), v))
	})
}

// FirstStroke1LT applies the LT predicate on the "first_stroke_1" field.
func FirstStroke1LT(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstStroke1), v))
	})
}

// FirstStroke1LTE applies the LTE predicate on the "first_stroke_1" field.
func FirstStroke1LTE(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstStroke1), v))
	})
}

// FirstStroke1IsNil applies the IsNil predicate on the "first_stroke_1" field.
func FirstStroke1IsNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFirstStroke1)))
	})
}

// FirstStroke1NotNil applies the NotNil predicate on the "first_stroke_1" field.
func FirstStroke1NotNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFirstStroke1)))
	})
}

// FirstStroke2EQ applies the EQ predicate on the "first_stroke_2" field.
func FirstStroke2EQ(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstStroke2), v))
	})
}

// FirstStroke2NEQ applies the NEQ predicate on the "first_stroke_2" field.
func FirstStroke2NEQ(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstStroke2), v))
	})
}

// FirstStroke2In applies the In predicate on the "first_stroke_2" field.
func FirstStroke2In(vs ...int32) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFirstStroke2), v...))
	})
}

// FirstStroke2NotIn applies the NotIn predicate on the "first_stroke_2" field.
func FirstStroke2NotIn(vs ...int32) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFirstStroke2), v...))
	})
}

// FirstStroke2GT applies the GT predicate on the "first_stroke_2" field.
func FirstStroke2GT(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstStroke2), v))
	})
}

// FirstStroke2GTE applies the GTE predicate on the "first_stroke_2" field.
func FirstStroke2GTE(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstStroke2), v))
	})
}

// FirstStroke2LT applies the LT predicate on the "first_stroke_2" field.
func FirstStroke2LT(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstStroke2), v))
	})
}

// FirstStroke2LTE applies the LTE predicate on the "first_stroke_2" field.
func FirstStroke2LTE(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstStroke2), v))
	})
}

// FirstStroke2IsNil applies the IsNil predicate on the "first_stroke_2" field.
func FirstStroke2IsNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFirstStroke2)))
	})
}

// FirstStroke2NotNil applies the NotNil predicate on the "first_stroke_2" field.
func FirstStroke2NotNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFirstStroke2)))
	})
}

// TianGeEQ applies the EQ predicate on the "tian_ge" field.
func TianGeEQ(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTianGe), v))
	})
}

// TianGeNEQ applies the NEQ predicate on the "tian_ge" field.
func TianGeNEQ(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTianGe), v))
	})
}

// TianGeIn applies the In predicate on the "tian_ge" field.
func TianGeIn(vs ...int32) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTianGe), v...))
	})
}

// TianGeNotIn applies the NotIn predicate on the "tian_ge" field.
func TianGeNotIn(vs ...int32) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTianGe), v...))
	})
}

// TianGeGT applies the GT predicate on the "tian_ge" field.
func TianGeGT(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTianGe), v))
	})
}

// TianGeGTE applies the GTE predicate on the "tian_ge" field.
func TianGeGTE(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTianGe), v))
	})
}

// TianGeLT applies the LT predicate on the "tian_ge" field.
func TianGeLT(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTianGe), v))
	})
}

// TianGeLTE applies the LTE predicate on the "tian_ge" field.
func TianGeLTE(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTianGe), v))
	})
}

// TianGeIsNil applies the IsNil predicate on the "tian_ge" field.
func TianGeIsNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTianGe)))
	})
}

// TianGeNotNil applies the NotNil predicate on the "tian_ge" field.
func TianGeNotNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTianGe)))
	})
}

// TianDaYanEQ applies the EQ predicate on the "tian_da_yan" field.
func TianDaYanEQ(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTianDaYan), v))
	})
}

// TianDaYanNEQ applies the NEQ predicate on the "tian_da_yan" field.
func TianDaYanNEQ(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTianDaYan), v))
	})
}

// TianDaYanIn applies the In predicate on the "tian_da_yan" field.
func TianDaYanIn(vs ...string) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTianDaYan), v...))
	})
}

// TianDaYanNotIn applies the NotIn predicate on the "tian_da_yan" field.
func TianDaYanNotIn(vs ...string) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTianDaYan), v...))
	})
}

// TianDaYanGT applies the GT predicate on the "tian_da_yan" field.
func TianDaYanGT(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTianDaYan), v))
	})
}

// TianDaYanGTE applies the GTE predicate on the "tian_da_yan" field.
func TianDaYanGTE(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTianDaYan), v))
	})
}

// TianDaYanLT applies the LT predicate on the "tian_da_yan" field.
func TianDaYanLT(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTianDaYan), v))
	})
}

// TianDaYanLTE applies the LTE predicate on the "tian_da_yan" field.
func TianDaYanLTE(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTianDaYan), v))
	})
}

// TianDaYanContains applies the Contains predicate on the "tian_da_yan" field.
func TianDaYanContains(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTianDaYan), v))
	})
}

// TianDaYanHasPrefix applies the HasPrefix predicate on the "tian_da_yan" field.
func TianDaYanHasPrefix(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTianDaYan), v))
	})
}

// TianDaYanHasSuffix applies the HasSuffix predicate on the "tian_da_yan" field.
func TianDaYanHasSuffix(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTianDaYan), v))
	})
}

// TianDaYanIsNil applies the IsNil predicate on the "tian_da_yan" field.
func TianDaYanIsNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTianDaYan)))
	})
}

// TianDaYanNotNil applies the NotNil predicate on the "tian_da_yan" field.
func TianDaYanNotNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTianDaYan)))
	})
}

// TianDaYanEqualFold applies the EqualFold predicate on the "tian_da_yan" field.
func TianDaYanEqualFold(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTianDaYan), v))
	})
}

// TianDaYanContainsFold applies the ContainsFold predicate on the "tian_da_yan" field.
func TianDaYanContainsFold(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTianDaYan), v))
	})
}

// RenGeEQ applies the EQ predicate on the "ren_ge" field.
func RenGeEQ(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRenGe), v))
	})
}

// RenGeNEQ applies the NEQ predicate on the "ren_ge" field.
func RenGeNEQ(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRenGe), v))
	})
}

// RenGeIn applies the In predicate on the "ren_ge" field.
func RenGeIn(vs ...int32) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRenGe), v...))
	})
}

// RenGeNotIn applies the NotIn predicate on the "ren_ge" field.
func RenGeNotIn(vs ...int32) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRenGe), v...))
	})
}

// RenGeGT applies the GT predicate on the "ren_ge" field.
func RenGeGT(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRenGe), v))
	})
}

// RenGeGTE applies the GTE predicate on the "ren_ge" field.
func RenGeGTE(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRenGe), v))
	})
}

// RenGeLT applies the LT predicate on the "ren_ge" field.
func RenGeLT(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRenGe), v))
	})
}

// RenGeLTE applies the LTE predicate on the "ren_ge" field.
func RenGeLTE(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRenGe), v))
	})
}

// RenGeIsNil applies the IsNil predicate on the "ren_ge" field.
func RenGeIsNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRenGe)))
	})
}

// RenGeNotNil applies the NotNil predicate on the "ren_ge" field.
func RenGeNotNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRenGe)))
	})
}

// RenDaYanEQ applies the EQ predicate on the "ren_da_yan" field.
func RenDaYanEQ(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRenDaYan), v))
	})
}

// RenDaYanNEQ applies the NEQ predicate on the "ren_da_yan" field.
func RenDaYanNEQ(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRenDaYan), v))
	})
}

// RenDaYanIn applies the In predicate on the "ren_da_yan" field.
func RenDaYanIn(vs ...string) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRenDaYan), v...))
	})
}

// RenDaYanNotIn applies the NotIn predicate on the "ren_da_yan" field.
func RenDaYanNotIn(vs ...string) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRenDaYan), v...))
	})
}

// RenDaYanGT applies the GT predicate on the "ren_da_yan" field.
func RenDaYanGT(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRenDaYan), v))
	})
}

// RenDaYanGTE applies the GTE predicate on the "ren_da_yan" field.
func RenDaYanGTE(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRenDaYan), v))
	})
}

// RenDaYanLT applies the LT predicate on the "ren_da_yan" field.
func RenDaYanLT(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRenDaYan), v))
	})
}

// RenDaYanLTE applies the LTE predicate on the "ren_da_yan" field.
func RenDaYanLTE(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRenDaYan), v))
	})
}

// RenDaYanContains applies the Contains predicate on the "ren_da_yan" field.
func RenDaYanContains(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRenDaYan), v))
	})
}

// RenDaYanHasPrefix applies the HasPrefix predicate on the "ren_da_yan" field.
func RenDaYanHasPrefix(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRenDaYan), v))
	})
}

// RenDaYanHasSuffix applies the HasSuffix predicate on the "ren_da_yan" field.
func RenDaYanHasSuffix(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRenDaYan), v))
	})
}

// RenDaYanIsNil applies the IsNil predicate on the "ren_da_yan" field.
func RenDaYanIsNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRenDaYan)))
	})
}

// RenDaYanNotNil applies the NotNil predicate on the "ren_da_yan" field.
func RenDaYanNotNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRenDaYan)))
	})
}

// RenDaYanEqualFold applies the EqualFold predicate on the "ren_da_yan" field.
func RenDaYanEqualFold(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRenDaYan), v))
	})
}

// RenDaYanContainsFold applies the ContainsFold predicate on the "ren_da_yan" field.
func RenDaYanContainsFold(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRenDaYan), v))
	})
}

// DiGeEQ applies the EQ predicate on the "di_ge" field.
func DiGeEQ(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiGe), v))
	})
}

// DiGeNEQ applies the NEQ predicate on the "di_ge" field.
func DiGeNEQ(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiGe), v))
	})
}

// DiGeIn applies the In predicate on the "di_ge" field.
func DiGeIn(vs ...int32) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDiGe), v...))
	})
}

// DiGeNotIn applies the NotIn predicate on the "di_ge" field.
func DiGeNotIn(vs ...int32) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDiGe), v...))
	})
}

// DiGeGT applies the GT predicate on the "di_ge" field.
func DiGeGT(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiGe), v))
	})
}

// DiGeGTE applies the GTE predicate on the "di_ge" field.
func DiGeGTE(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiGe), v))
	})
}

// DiGeLT applies the LT predicate on the "di_ge" field.
func DiGeLT(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiGe), v))
	})
}

// DiGeLTE applies the LTE predicate on the "di_ge" field.
func DiGeLTE(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiGe), v))
	})
}

// DiGeIsNil applies the IsNil predicate on the "di_ge" field.
func DiGeIsNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDiGe)))
	})
}

// DiGeNotNil applies the NotNil predicate on the "di_ge" field.
func DiGeNotNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDiGe)))
	})
}

// DiDaYanEQ applies the EQ predicate on the "di_da_yan" field.
func DiDaYanEQ(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiDaYan), v))
	})
}

// DiDaYanNEQ applies the NEQ predicate on the "di_da_yan" field.
func DiDaYanNEQ(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiDaYan), v))
	})
}

// DiDaYanIn applies the In predicate on the "di_da_yan" field.
func DiDaYanIn(vs ...string) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDiDaYan), v...))
	})
}

// DiDaYanNotIn applies the NotIn predicate on the "di_da_yan" field.
func DiDaYanNotIn(vs ...string) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDiDaYan), v...))
	})
}

// DiDaYanGT applies the GT predicate on the "di_da_yan" field.
func DiDaYanGT(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiDaYan), v))
	})
}

// DiDaYanGTE applies the GTE predicate on the "di_da_yan" field.
func DiDaYanGTE(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiDaYan), v))
	})
}

// DiDaYanLT applies the LT predicate on the "di_da_yan" field.
func DiDaYanLT(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiDaYan), v))
	})
}

// DiDaYanLTE applies the LTE predicate on the "di_da_yan" field.
func DiDaYanLTE(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiDaYan), v))
	})
}

// DiDaYanContains applies the Contains predicate on the "di_da_yan" field.
func DiDaYanContains(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDiDaYan), v))
	})
}

// DiDaYanHasPrefix applies the HasPrefix predicate on the "di_da_yan" field.
func DiDaYanHasPrefix(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDiDaYan), v))
	})
}

// DiDaYanHasSuffix applies the HasSuffix predicate on the "di_da_yan" field.
func DiDaYanHasSuffix(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDiDaYan), v))
	})
}

// DiDaYanIsNil applies the IsNil predicate on the "di_da_yan" field.
func DiDaYanIsNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDiDaYan)))
	})
}

// DiDaYanNotNil applies the NotNil predicate on the "di_da_yan" field.
func DiDaYanNotNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDiDaYan)))
	})
}

// DiDaYanEqualFold applies the EqualFold predicate on the "di_da_yan" field.
func DiDaYanEqualFold(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDiDaYan), v))
	})
}

// DiDaYanContainsFold applies the ContainsFold predicate on the "di_da_yan" field.
func DiDaYanContainsFold(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDiDaYan), v))
	})
}

// WaiGeEQ applies the EQ predicate on the "wai_ge" field.
func WaiGeEQ(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWaiGe), v))
	})
}

// WaiGeNEQ applies the NEQ predicate on the "wai_ge" field.
func WaiGeNEQ(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWaiGe), v))
	})
}

// WaiGeIn applies the In predicate on the "wai_ge" field.
func WaiGeIn(vs ...int32) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWaiGe), v...))
	})
}

// WaiGeNotIn applies the NotIn predicate on the "wai_ge" field.
func WaiGeNotIn(vs ...int32) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWaiGe), v...))
	})
}

// WaiGeGT applies the GT predicate on the "wai_ge" field.
func WaiGeGT(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWaiGe), v))
	})
}

// WaiGeGTE applies the GTE predicate on the "wai_ge" field.
func WaiGeGTE(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWaiGe), v))
	})
}

// WaiGeLT applies the LT predicate on the "wai_ge" field.
func WaiGeLT(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWaiGe), v))
	})
}

// WaiGeLTE applies the LTE predicate on the "wai_ge" field.
func WaiGeLTE(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWaiGe), v))
	})
}

// WaiGeIsNil applies the IsNil predicate on the "wai_ge" field.
func WaiGeIsNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWaiGe)))
	})
}

// WaiGeNotNil applies the NotNil predicate on the "wai_ge" field.
func WaiGeNotNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWaiGe)))
	})
}

// WaiDaYanEQ applies the EQ predicate on the "wai_da_yan" field.
func WaiDaYanEQ(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWaiDaYan), v))
	})
}

// WaiDaYanNEQ applies the NEQ predicate on the "wai_da_yan" field.
func WaiDaYanNEQ(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWaiDaYan), v))
	})
}

// WaiDaYanIn applies the In predicate on the "wai_da_yan" field.
func WaiDaYanIn(vs ...string) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWaiDaYan), v...))
	})
}

// WaiDaYanNotIn applies the NotIn predicate on the "wai_da_yan" field.
func WaiDaYanNotIn(vs ...string) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWaiDaYan), v...))
	})
}

// WaiDaYanGT applies the GT predicate on the "wai_da_yan" field.
func WaiDaYanGT(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWaiDaYan), v))
	})
}

// WaiDaYanGTE applies the GTE predicate on the "wai_da_yan" field.
func WaiDaYanGTE(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWaiDaYan), v))
	})
}

// WaiDaYanLT applies the LT predicate on the "wai_da_yan" field.
func WaiDaYanLT(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWaiDaYan), v))
	})
}

// WaiDaYanLTE applies the LTE predicate on the "wai_da_yan" field.
func WaiDaYanLTE(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWaiDaYan), v))
	})
}

// WaiDaYanContains applies the Contains predicate on the "wai_da_yan" field.
func WaiDaYanContains(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWaiDaYan), v))
	})
}

// WaiDaYanHasPrefix applies the HasPrefix predicate on the "wai_da_yan" field.
func WaiDaYanHasPrefix(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWaiDaYan), v))
	})
}

// WaiDaYanHasSuffix applies the HasSuffix predicate on the "wai_da_yan" field.
func WaiDaYanHasSuffix(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWaiDaYan), v))
	})
}

// WaiDaYanIsNil applies the IsNil predicate on the "wai_da_yan" field.
func WaiDaYanIsNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWaiDaYan)))
	})
}

// WaiDaYanNotNil applies the NotNil predicate on the "wai_da_yan" field.
func WaiDaYanNotNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWaiDaYan)))
	})
}

// WaiDaYanEqualFold applies the EqualFold predicate on the "wai_da_yan" field.
func WaiDaYanEqualFold(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWaiDaYan), v))
	})
}

// WaiDaYanContainsFold applies the ContainsFold predicate on the "wai_da_yan" field.
func WaiDaYanContainsFold(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWaiDaYan), v))
	})
}

// ZongGeEQ applies the EQ predicate on the "zong_ge" field.
func ZongGeEQ(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZongGe), v))
	})
}

// ZongGeNEQ applies the NEQ predicate on the "zong_ge" field.
func ZongGeNEQ(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldZongGe), v))
	})
}

// ZongGeIn applies the In predicate on the "zong_ge" field.
func ZongGeIn(vs ...int32) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldZongGe), v...))
	})
}

// ZongGeNotIn applies the NotIn predicate on the "zong_ge" field.
func ZongGeNotIn(vs ...int32) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldZongGe), v...))
	})
}

// ZongGeGT applies the GT predicate on the "zong_ge" field.
func ZongGeGT(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldZongGe), v))
	})
}

// ZongGeGTE applies the GTE predicate on the "zong_ge" field.
func ZongGeGTE(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldZongGe), v))
	})
}

// ZongGeLT applies the LT predicate on the "zong_ge" field.
func ZongGeLT(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldZongGe), v))
	})
}

// ZongGeLTE applies the LTE predicate on the "zong_ge" field.
func ZongGeLTE(v int32) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldZongGe), v))
	})
}

// ZongGeIsNil applies the IsNil predicate on the "zong_ge" field.
func ZongGeIsNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldZongGe)))
	})
}

// ZongGeNotNil applies the NotNil predicate on the "zong_ge" field.
func ZongGeNotNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldZongGe)))
	})
}

// ZongDaYanEQ applies the EQ predicate on the "zong_da_yan" field.
func ZongDaYanEQ(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZongDaYan), v))
	})
}

// ZongDaYanNEQ applies the NEQ predicate on the "zong_da_yan" field.
func ZongDaYanNEQ(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldZongDaYan), v))
	})
}

// ZongDaYanIn applies the In predicate on the "zong_da_yan" field.
func ZongDaYanIn(vs ...string) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldZongDaYan), v...))
	})
}

// ZongDaYanNotIn applies the NotIn predicate on the "zong_da_yan" field.
func ZongDaYanNotIn(vs ...string) predicate.WuGeLucky {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldZongDaYan), v...))
	})
}

// ZongDaYanGT applies the GT predicate on the "zong_da_yan" field.
func ZongDaYanGT(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldZongDaYan), v))
	})
}

// ZongDaYanGTE applies the GTE predicate on the "zong_da_yan" field.
func ZongDaYanGTE(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldZongDaYan), v))
	})
}

// ZongDaYanLT applies the LT predicate on the "zong_da_yan" field.
func ZongDaYanLT(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldZongDaYan), v))
	})
}

// ZongDaYanLTE applies the LTE predicate on the "zong_da_yan" field.
func ZongDaYanLTE(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldZongDaYan), v))
	})
}

// ZongDaYanContains applies the Contains predicate on the "zong_da_yan" field.
func ZongDaYanContains(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldZongDaYan), v))
	})
}

// ZongDaYanHasPrefix applies the HasPrefix predicate on the "zong_da_yan" field.
func ZongDaYanHasPrefix(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldZongDaYan), v))
	})
}

// ZongDaYanHasSuffix applies the HasSuffix predicate on the "zong_da_yan" field.
func ZongDaYanHasSuffix(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldZongDaYan), v))
	})
}

// ZongDaYanIsNil applies the IsNil predicate on the "zong_da_yan" field.
func ZongDaYanIsNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldZongDaYan)))
	})
}

// ZongDaYanNotNil applies the NotNil predicate on the "zong_da_yan" field.
func ZongDaYanNotNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldZongDaYan)))
	})
}

// ZongDaYanEqualFold applies the EqualFold predicate on the "zong_da_yan" field.
func ZongDaYanEqualFold(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldZongDaYan), v))
	})
}

// ZongDaYanContainsFold applies the ContainsFold predicate on the "zong_da_yan" field.
func ZongDaYanContainsFold(v string) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldZongDaYan), v))
	})
}

// ZongLuckyEQ applies the EQ predicate on the "zong_lucky" field.
func ZongLuckyEQ(v bool) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZongLucky), v))
	})
}

// ZongLuckyNEQ applies the NEQ predicate on the "zong_lucky" field.
func ZongLuckyNEQ(v bool) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldZongLucky), v))
	})
}

// ZongLuckyIsNil applies the IsNil predicate on the "zong_lucky" field.
func ZongLuckyIsNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldZongLucky)))
	})
}

// ZongLuckyNotNil applies the NotNil predicate on the "zong_lucky" field.
func ZongLuckyNotNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldZongLucky)))
	})
}

// ZongSexEQ applies the EQ predicate on the "zong_sex" field.
func ZongSexEQ(v bool) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZongSex), v))
	})
}

// ZongSexNEQ applies the NEQ predicate on the "zong_sex" field.
func ZongSexNEQ(v bool) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldZongSex), v))
	})
}

// ZongSexIsNil applies the IsNil predicate on the "zong_sex" field.
func ZongSexIsNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldZongSex)))
	})
}

// ZongSexNotNil applies the NotNil predicate on the "zong_sex" field.
func ZongSexNotNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldZongSex)))
	})
}

// ZongMaxEQ applies the EQ predicate on the "zong_max" field.
func ZongMaxEQ(v bool) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZongMax), v))
	})
}

// ZongMaxNEQ applies the NEQ predicate on the "zong_max" field.
func ZongMaxNEQ(v bool) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldZongMax), v))
	})
}

// ZongMaxIsNil applies the IsNil predicate on the "zong_max" field.
func ZongMaxIsNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldZongMax)))
	})
}

// ZongMaxNotNil applies the NotNil predicate on the "zong_max" field.
func ZongMaxNotNil() predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldZongMax)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WuGeLucky) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WuGeLucky) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WuGeLucky) predicate.WuGeLucky {
	return predicate.WuGeLucky(func(s *sql.Selector) {
		p(s.Not())
	})
}
