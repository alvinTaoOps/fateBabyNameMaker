// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/godcong/fate/ent/character"
	"github.com/godcong/fate/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCharacter = "Character"
)

// CharacterMutation represents an operation that mutates the Character nodes in the graph.
type CharacterMutation struct {
	config
	op                            Op
	typ                           string
	id                            *string
	pin_yin                       *[]string
	ch                            *string
	science_stroke                *int
	addscience_stroke             *int
	radical                       *string
	radical_stroke                *int
	addradical_stroke             *int
	stroke                        *int
	addstroke                     *int
	is_kangxi                     *bool
	kangxi                        *string
	kangxi_stroke                 *int
	addkangxi_stroke              *int
	simple_radical                *string
	simple_radical_stroke         *int
	addsimple_radical_stroke      *int
	simple_total_stroke           *int
	addsimple_total_stroke        *int
	traditional_radical           *string
	traditional_radical_stroke    *int
	addtraditional_radical_stroke *int
	traditional_total_stroke      *int
	addtraditional_total_stroke   *int
	is_name_science               *bool
	wu_xing                       *string
	lucky                         *string
	is_regular                    *bool
	traditional_character         *[]string
	variant_character             *[]string
	comment                       *string
	clearedFields                 map[string]struct{}
	done                          bool
	oldValue                      func(context.Context) (*Character, error)
	predicates                    []predicate.Character
}

var _ ent.Mutation = (*CharacterMutation)(nil)

// characterOption allows management of the mutation configuration using functional options.
type characterOption func(*CharacterMutation)

// newCharacterMutation creates new mutation for the Character entity.
func newCharacterMutation(c config, op Op, opts ...characterOption) *CharacterMutation {
	m := &CharacterMutation{
		config:        c,
		op:            op,
		typ:           TypeCharacter,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCharacterID sets the ID field of the mutation.
func withCharacterID(id string) characterOption {
	return func(m *CharacterMutation) {
		var (
			err   error
			once  sync.Once
			value *Character
		)
		m.oldValue = func(ctx context.Context) (*Character, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Character.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCharacter sets the old Character of the mutation.
func withCharacter(node *Character) characterOption {
	return func(m *CharacterMutation) {
		m.oldValue = func(context.Context) (*Character, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CharacterMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CharacterMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Character entities.
func (m *CharacterMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *CharacterMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPinYin sets the "pin_yin" field.
func (m *CharacterMutation) SetPinYin(s []string) {
	m.pin_yin = &s
}

// PinYin returns the value of the "pin_yin" field in the mutation.
func (m *CharacterMutation) PinYin() (r []string, exists bool) {
	v := m.pin_yin
	if v == nil {
		return
	}
	return *v, true
}

// OldPinYin returns the old "pin_yin" field's value of the Character entity.
// If the Character object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharacterMutation) OldPinYin(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPinYin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPinYin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPinYin: %w", err)
	}
	return oldValue.PinYin, nil
}

// ResetPinYin resets all changes to the "pin_yin" field.
func (m *CharacterMutation) ResetPinYin() {
	m.pin_yin = nil
}

// SetCh sets the "ch" field.
func (m *CharacterMutation) SetCh(s string) {
	m.ch = &s
}

// Ch returns the value of the "ch" field in the mutation.
func (m *CharacterMutation) Ch() (r string, exists bool) {
	v := m.ch
	if v == nil {
		return
	}
	return *v, true
}

// OldCh returns the old "ch" field's value of the Character entity.
// If the Character object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharacterMutation) OldCh(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCh: %w", err)
	}
	return oldValue.Ch, nil
}

// ResetCh resets all changes to the "ch" field.
func (m *CharacterMutation) ResetCh() {
	m.ch = nil
}

// SetScienceStroke sets the "science_stroke" field.
func (m *CharacterMutation) SetScienceStroke(i int) {
	m.science_stroke = &i
	m.addscience_stroke = nil
}

// ScienceStroke returns the value of the "science_stroke" field in the mutation.
func (m *CharacterMutation) ScienceStroke() (r int, exists bool) {
	v := m.science_stroke
	if v == nil {
		return
	}
	return *v, true
}

// OldScienceStroke returns the old "science_stroke" field's value of the Character entity.
// If the Character object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharacterMutation) OldScienceStroke(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldScienceStroke is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldScienceStroke requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScienceStroke: %w", err)
	}
	return oldValue.ScienceStroke, nil
}

// AddScienceStroke adds i to the "science_stroke" field.
func (m *CharacterMutation) AddScienceStroke(i int) {
	if m.addscience_stroke != nil {
		*m.addscience_stroke += i
	} else {
		m.addscience_stroke = &i
	}
}

// AddedScienceStroke returns the value that was added to the "science_stroke" field in this mutation.
func (m *CharacterMutation) AddedScienceStroke() (r int, exists bool) {
	v := m.addscience_stroke
	if v == nil {
		return
	}
	return *v, true
}

// ResetScienceStroke resets all changes to the "science_stroke" field.
func (m *CharacterMutation) ResetScienceStroke() {
	m.science_stroke = nil
	m.addscience_stroke = nil
}

// SetRadical sets the "radical" field.
func (m *CharacterMutation) SetRadical(s string) {
	m.radical = &s
}

// Radical returns the value of the "radical" field in the mutation.
func (m *CharacterMutation) Radical() (r string, exists bool) {
	v := m.radical
	if v == nil {
		return
	}
	return *v, true
}

// OldRadical returns the old "radical" field's value of the Character entity.
// If the Character object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharacterMutation) OldRadical(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRadical is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRadical requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRadical: %w", err)
	}
	return oldValue.Radical, nil
}

// ResetRadical resets all changes to the "radical" field.
func (m *CharacterMutation) ResetRadical() {
	m.radical = nil
}

// SetRadicalStroke sets the "radical_stroke" field.
func (m *CharacterMutation) SetRadicalStroke(i int) {
	m.radical_stroke = &i
	m.addradical_stroke = nil
}

// RadicalStroke returns the value of the "radical_stroke" field in the mutation.
func (m *CharacterMutation) RadicalStroke() (r int, exists bool) {
	v := m.radical_stroke
	if v == nil {
		return
	}
	return *v, true
}

// OldRadicalStroke returns the old "radical_stroke" field's value of the Character entity.
// If the Character object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharacterMutation) OldRadicalStroke(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRadicalStroke is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRadicalStroke requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRadicalStroke: %w", err)
	}
	return oldValue.RadicalStroke, nil
}

// AddRadicalStroke adds i to the "radical_stroke" field.
func (m *CharacterMutation) AddRadicalStroke(i int) {
	if m.addradical_stroke != nil {
		*m.addradical_stroke += i
	} else {
		m.addradical_stroke = &i
	}
}

// AddedRadicalStroke returns the value that was added to the "radical_stroke" field in this mutation.
func (m *CharacterMutation) AddedRadicalStroke() (r int, exists bool) {
	v := m.addradical_stroke
	if v == nil {
		return
	}
	return *v, true
}

// ResetRadicalStroke resets all changes to the "radical_stroke" field.
func (m *CharacterMutation) ResetRadicalStroke() {
	m.radical_stroke = nil
	m.addradical_stroke = nil
}

// SetStroke sets the "stroke" field.
func (m *CharacterMutation) SetStroke(i int) {
	m.stroke = &i
	m.addstroke = nil
}

// Stroke returns the value of the "stroke" field in the mutation.
func (m *CharacterMutation) Stroke() (r int, exists bool) {
	v := m.stroke
	if v == nil {
		return
	}
	return *v, true
}

// OldStroke returns the old "stroke" field's value of the Character entity.
// If the Character object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharacterMutation) OldStroke(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStroke is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStroke requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStroke: %w", err)
	}
	return oldValue.Stroke, nil
}

// AddStroke adds i to the "stroke" field.
func (m *CharacterMutation) AddStroke(i int) {
	if m.addstroke != nil {
		*m.addstroke += i
	} else {
		m.addstroke = &i
	}
}

// AddedStroke returns the value that was added to the "stroke" field in this mutation.
func (m *CharacterMutation) AddedStroke() (r int, exists bool) {
	v := m.addstroke
	if v == nil {
		return
	}
	return *v, true
}

// ResetStroke resets all changes to the "stroke" field.
func (m *CharacterMutation) ResetStroke() {
	m.stroke = nil
	m.addstroke = nil
}

// SetIsKangxi sets the "is_kangxi" field.
func (m *CharacterMutation) SetIsKangxi(b bool) {
	m.is_kangxi = &b
}

// IsKangxi returns the value of the "is_kangxi" field in the mutation.
func (m *CharacterMutation) IsKangxi() (r bool, exists bool) {
	v := m.is_kangxi
	if v == nil {
		return
	}
	return *v, true
}

// OldIsKangxi returns the old "is_kangxi" field's value of the Character entity.
// If the Character object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharacterMutation) OldIsKangxi(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsKangxi is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsKangxi requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsKangxi: %w", err)
	}
	return oldValue.IsKangxi, nil
}

// ResetIsKangxi resets all changes to the "is_kangxi" field.
func (m *CharacterMutation) ResetIsKangxi() {
	m.is_kangxi = nil
}

// SetKangxi sets the "kangxi" field.
func (m *CharacterMutation) SetKangxi(s string) {
	m.kangxi = &s
}

// Kangxi returns the value of the "kangxi" field in the mutation.
func (m *CharacterMutation) Kangxi() (r string, exists bool) {
	v := m.kangxi
	if v == nil {
		return
	}
	return *v, true
}

// OldKangxi returns the old "kangxi" field's value of the Character entity.
// If the Character object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharacterMutation) OldKangxi(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldKangxi is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldKangxi requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKangxi: %w", err)
	}
	return oldValue.Kangxi, nil
}

// ResetKangxi resets all changes to the "kangxi" field.
func (m *CharacterMutation) ResetKangxi() {
	m.kangxi = nil
}

// SetKangxiStroke sets the "kangxi_stroke" field.
func (m *CharacterMutation) SetKangxiStroke(i int) {
	m.kangxi_stroke = &i
	m.addkangxi_stroke = nil
}

// KangxiStroke returns the value of the "kangxi_stroke" field in the mutation.
func (m *CharacterMutation) KangxiStroke() (r int, exists bool) {
	v := m.kangxi_stroke
	if v == nil {
		return
	}
	return *v, true
}

// OldKangxiStroke returns the old "kangxi_stroke" field's value of the Character entity.
// If the Character object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharacterMutation) OldKangxiStroke(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldKangxiStroke is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldKangxiStroke requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKangxiStroke: %w", err)
	}
	return oldValue.KangxiStroke, nil
}

// AddKangxiStroke adds i to the "kangxi_stroke" field.
func (m *CharacterMutation) AddKangxiStroke(i int) {
	if m.addkangxi_stroke != nil {
		*m.addkangxi_stroke += i
	} else {
		m.addkangxi_stroke = &i
	}
}

// AddedKangxiStroke returns the value that was added to the "kangxi_stroke" field in this mutation.
func (m *CharacterMutation) AddedKangxiStroke() (r int, exists bool) {
	v := m.addkangxi_stroke
	if v == nil {
		return
	}
	return *v, true
}

// ResetKangxiStroke resets all changes to the "kangxi_stroke" field.
func (m *CharacterMutation) ResetKangxiStroke() {
	m.kangxi_stroke = nil
	m.addkangxi_stroke = nil
}

// SetSimpleRadical sets the "simple_radical" field.
func (m *CharacterMutation) SetSimpleRadical(s string) {
	m.simple_radical = &s
}

// SimpleRadical returns the value of the "simple_radical" field in the mutation.
func (m *CharacterMutation) SimpleRadical() (r string, exists bool) {
	v := m.simple_radical
	if v == nil {
		return
	}
	return *v, true
}

// OldSimpleRadical returns the old "simple_radical" field's value of the Character entity.
// If the Character object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharacterMutation) OldSimpleRadical(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSimpleRadical is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSimpleRadical requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSimpleRadical: %w", err)
	}
	return oldValue.SimpleRadical, nil
}

// ResetSimpleRadical resets all changes to the "simple_radical" field.
func (m *CharacterMutation) ResetSimpleRadical() {
	m.simple_radical = nil
}

// SetSimpleRadicalStroke sets the "simple_radical_stroke" field.
func (m *CharacterMutation) SetSimpleRadicalStroke(i int) {
	m.simple_radical_stroke = &i
	m.addsimple_radical_stroke = nil
}

// SimpleRadicalStroke returns the value of the "simple_radical_stroke" field in the mutation.
func (m *CharacterMutation) SimpleRadicalStroke() (r int, exists bool) {
	v := m.simple_radical_stroke
	if v == nil {
		return
	}
	return *v, true
}

// OldSimpleRadicalStroke returns the old "simple_radical_stroke" field's value of the Character entity.
// If the Character object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharacterMutation) OldSimpleRadicalStroke(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSimpleRadicalStroke is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSimpleRadicalStroke requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSimpleRadicalStroke: %w", err)
	}
	return oldValue.SimpleRadicalStroke, nil
}

// AddSimpleRadicalStroke adds i to the "simple_radical_stroke" field.
func (m *CharacterMutation) AddSimpleRadicalStroke(i int) {
	if m.addsimple_radical_stroke != nil {
		*m.addsimple_radical_stroke += i
	} else {
		m.addsimple_radical_stroke = &i
	}
}

// AddedSimpleRadicalStroke returns the value that was added to the "simple_radical_stroke" field in this mutation.
func (m *CharacterMutation) AddedSimpleRadicalStroke() (r int, exists bool) {
	v := m.addsimple_radical_stroke
	if v == nil {
		return
	}
	return *v, true
}

// ResetSimpleRadicalStroke resets all changes to the "simple_radical_stroke" field.
func (m *CharacterMutation) ResetSimpleRadicalStroke() {
	m.simple_radical_stroke = nil
	m.addsimple_radical_stroke = nil
}

// SetSimpleTotalStroke sets the "simple_total_stroke" field.
func (m *CharacterMutation) SetSimpleTotalStroke(i int) {
	m.simple_total_stroke = &i
	m.addsimple_total_stroke = nil
}

// SimpleTotalStroke returns the value of the "simple_total_stroke" field in the mutation.
func (m *CharacterMutation) SimpleTotalStroke() (r int, exists bool) {
	v := m.simple_total_stroke
	if v == nil {
		return
	}
	return *v, true
}

// OldSimpleTotalStroke returns the old "simple_total_stroke" field's value of the Character entity.
// If the Character object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharacterMutation) OldSimpleTotalStroke(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSimpleTotalStroke is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSimpleTotalStroke requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSimpleTotalStroke: %w", err)
	}
	return oldValue.SimpleTotalStroke, nil
}

// AddSimpleTotalStroke adds i to the "simple_total_stroke" field.
func (m *CharacterMutation) AddSimpleTotalStroke(i int) {
	if m.addsimple_total_stroke != nil {
		*m.addsimple_total_stroke += i
	} else {
		m.addsimple_total_stroke = &i
	}
}

// AddedSimpleTotalStroke returns the value that was added to the "simple_total_stroke" field in this mutation.
func (m *CharacterMutation) AddedSimpleTotalStroke() (r int, exists bool) {
	v := m.addsimple_total_stroke
	if v == nil {
		return
	}
	return *v, true
}

// ResetSimpleTotalStroke resets all changes to the "simple_total_stroke" field.
func (m *CharacterMutation) ResetSimpleTotalStroke() {
	m.simple_total_stroke = nil
	m.addsimple_total_stroke = nil
}

// SetTraditionalRadical sets the "traditional_radical" field.
func (m *CharacterMutation) SetTraditionalRadical(s string) {
	m.traditional_radical = &s
}

// TraditionalRadical returns the value of the "traditional_radical" field in the mutation.
func (m *CharacterMutation) TraditionalRadical() (r string, exists bool) {
	v := m.traditional_radical
	if v == nil {
		return
	}
	return *v, true
}

// OldTraditionalRadical returns the old "traditional_radical" field's value of the Character entity.
// If the Character object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharacterMutation) OldTraditionalRadical(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTraditionalRadical is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTraditionalRadical requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTraditionalRadical: %w", err)
	}
	return oldValue.TraditionalRadical, nil
}

// ResetTraditionalRadical resets all changes to the "traditional_radical" field.
func (m *CharacterMutation) ResetTraditionalRadical() {
	m.traditional_radical = nil
}

// SetTraditionalRadicalStroke sets the "traditional_radical_stroke" field.
func (m *CharacterMutation) SetTraditionalRadicalStroke(i int) {
	m.traditional_radical_stroke = &i
	m.addtraditional_radical_stroke = nil
}

// TraditionalRadicalStroke returns the value of the "traditional_radical_stroke" field in the mutation.
func (m *CharacterMutation) TraditionalRadicalStroke() (r int, exists bool) {
	v := m.traditional_radical_stroke
	if v == nil {
		return
	}
	return *v, true
}

// OldTraditionalRadicalStroke returns the old "traditional_radical_stroke" field's value of the Character entity.
// If the Character object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharacterMutation) OldTraditionalRadicalStroke(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTraditionalRadicalStroke is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTraditionalRadicalStroke requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTraditionalRadicalStroke: %w", err)
	}
	return oldValue.TraditionalRadicalStroke, nil
}

// AddTraditionalRadicalStroke adds i to the "traditional_radical_stroke" field.
func (m *CharacterMutation) AddTraditionalRadicalStroke(i int) {
	if m.addtraditional_radical_stroke != nil {
		*m.addtraditional_radical_stroke += i
	} else {
		m.addtraditional_radical_stroke = &i
	}
}

// AddedTraditionalRadicalStroke returns the value that was added to the "traditional_radical_stroke" field in this mutation.
func (m *CharacterMutation) AddedTraditionalRadicalStroke() (r int, exists bool) {
	v := m.addtraditional_radical_stroke
	if v == nil {
		return
	}
	return *v, true
}

// ResetTraditionalRadicalStroke resets all changes to the "traditional_radical_stroke" field.
func (m *CharacterMutation) ResetTraditionalRadicalStroke() {
	m.traditional_radical_stroke = nil
	m.addtraditional_radical_stroke = nil
}

// SetTraditionalTotalStroke sets the "traditional_total_stroke" field.
func (m *CharacterMutation) SetTraditionalTotalStroke(i int) {
	m.traditional_total_stroke = &i
	m.addtraditional_total_stroke = nil
}

// TraditionalTotalStroke returns the value of the "traditional_total_stroke" field in the mutation.
func (m *CharacterMutation) TraditionalTotalStroke() (r int, exists bool) {
	v := m.traditional_total_stroke
	if v == nil {
		return
	}
	return *v, true
}

// OldTraditionalTotalStroke returns the old "traditional_total_stroke" field's value of the Character entity.
// If the Character object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharacterMutation) OldTraditionalTotalStroke(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTraditionalTotalStroke is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTraditionalTotalStroke requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTraditionalTotalStroke: %w", err)
	}
	return oldValue.TraditionalTotalStroke, nil
}

// AddTraditionalTotalStroke adds i to the "traditional_total_stroke" field.
func (m *CharacterMutation) AddTraditionalTotalStroke(i int) {
	if m.addtraditional_total_stroke != nil {
		*m.addtraditional_total_stroke += i
	} else {
		m.addtraditional_total_stroke = &i
	}
}

// AddedTraditionalTotalStroke returns the value that was added to the "traditional_total_stroke" field in this mutation.
func (m *CharacterMutation) AddedTraditionalTotalStroke() (r int, exists bool) {
	v := m.addtraditional_total_stroke
	if v == nil {
		return
	}
	return *v, true
}

// ResetTraditionalTotalStroke resets all changes to the "traditional_total_stroke" field.
func (m *CharacterMutation) ResetTraditionalTotalStroke() {
	m.traditional_total_stroke = nil
	m.addtraditional_total_stroke = nil
}

// SetIsNameScience sets the "is_name_science" field.
func (m *CharacterMutation) SetIsNameScience(b bool) {
	m.is_name_science = &b
}

// IsNameScience returns the value of the "is_name_science" field in the mutation.
func (m *CharacterMutation) IsNameScience() (r bool, exists bool) {
	v := m.is_name_science
	if v == nil {
		return
	}
	return *v, true
}

// OldIsNameScience returns the old "is_name_science" field's value of the Character entity.
// If the Character object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharacterMutation) OldIsNameScience(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsNameScience is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsNameScience requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsNameScience: %w", err)
	}
	return oldValue.IsNameScience, nil
}

// ResetIsNameScience resets all changes to the "is_name_science" field.
func (m *CharacterMutation) ResetIsNameScience() {
	m.is_name_science = nil
}

// SetWuXing sets the "wu_xing" field.
func (m *CharacterMutation) SetWuXing(s string) {
	m.wu_xing = &s
}

// WuXing returns the value of the "wu_xing" field in the mutation.
func (m *CharacterMutation) WuXing() (r string, exists bool) {
	v := m.wu_xing
	if v == nil {
		return
	}
	return *v, true
}

// OldWuXing returns the old "wu_xing" field's value of the Character entity.
// If the Character object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharacterMutation) OldWuXing(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWuXing is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWuXing requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWuXing: %w", err)
	}
	return oldValue.WuXing, nil
}

// ResetWuXing resets all changes to the "wu_xing" field.
func (m *CharacterMutation) ResetWuXing() {
	m.wu_xing = nil
}

// SetLucky sets the "lucky" field.
func (m *CharacterMutation) SetLucky(s string) {
	m.lucky = &s
}

// Lucky returns the value of the "lucky" field in the mutation.
func (m *CharacterMutation) Lucky() (r string, exists bool) {
	v := m.lucky
	if v == nil {
		return
	}
	return *v, true
}

// OldLucky returns the old "lucky" field's value of the Character entity.
// If the Character object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharacterMutation) OldLucky(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLucky is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLucky requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLucky: %w", err)
	}
	return oldValue.Lucky, nil
}

// ResetLucky resets all changes to the "lucky" field.
func (m *CharacterMutation) ResetLucky() {
	m.lucky = nil
}

// SetIsRegular sets the "is_regular" field.
func (m *CharacterMutation) SetIsRegular(b bool) {
	m.is_regular = &b
}

// IsRegular returns the value of the "is_regular" field in the mutation.
func (m *CharacterMutation) IsRegular() (r bool, exists bool) {
	v := m.is_regular
	if v == nil {
		return
	}
	return *v, true
}

// OldIsRegular returns the old "is_regular" field's value of the Character entity.
// If the Character object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharacterMutation) OldIsRegular(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsRegular is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsRegular requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsRegular: %w", err)
	}
	return oldValue.IsRegular, nil
}

// ResetIsRegular resets all changes to the "is_regular" field.
func (m *CharacterMutation) ResetIsRegular() {
	m.is_regular = nil
}

// SetTraditionalCharacter sets the "traditional_character" field.
func (m *CharacterMutation) SetTraditionalCharacter(s []string) {
	m.traditional_character = &s
}

// TraditionalCharacter returns the value of the "traditional_character" field in the mutation.
func (m *CharacterMutation) TraditionalCharacter() (r []string, exists bool) {
	v := m.traditional_character
	if v == nil {
		return
	}
	return *v, true
}

// OldTraditionalCharacter returns the old "traditional_character" field's value of the Character entity.
// If the Character object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharacterMutation) OldTraditionalCharacter(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTraditionalCharacter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTraditionalCharacter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTraditionalCharacter: %w", err)
	}
	return oldValue.TraditionalCharacter, nil
}

// ResetTraditionalCharacter resets all changes to the "traditional_character" field.
func (m *CharacterMutation) ResetTraditionalCharacter() {
	m.traditional_character = nil
}

// SetVariantCharacter sets the "variant_character" field.
func (m *CharacterMutation) SetVariantCharacter(s []string) {
	m.variant_character = &s
}

// VariantCharacter returns the value of the "variant_character" field in the mutation.
func (m *CharacterMutation) VariantCharacter() (r []string, exists bool) {
	v := m.variant_character
	if v == nil {
		return
	}
	return *v, true
}

// OldVariantCharacter returns the old "variant_character" field's value of the Character entity.
// If the Character object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharacterMutation) OldVariantCharacter(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVariantCharacter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVariantCharacter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVariantCharacter: %w", err)
	}
	return oldValue.VariantCharacter, nil
}

// ResetVariantCharacter resets all changes to the "variant_character" field.
func (m *CharacterMutation) ResetVariantCharacter() {
	m.variant_character = nil
}

// SetComment sets the "comment" field.
func (m *CharacterMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *CharacterMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the Character entity.
// If the Character object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharacterMutation) OldComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ResetComment resets all changes to the "comment" field.
func (m *CharacterMutation) ResetComment() {
	m.comment = nil
}

// Op returns the operation name.
func (m *CharacterMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Character).
func (m *CharacterMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CharacterMutation) Fields() []string {
	fields := make([]string, 0, 22)
	if m.pin_yin != nil {
		fields = append(fields, character.FieldPinYin)
	}
	if m.ch != nil {
		fields = append(fields, character.FieldCh)
	}
	if m.science_stroke != nil {
		fields = append(fields, character.FieldScienceStroke)
	}
	if m.radical != nil {
		fields = append(fields, character.FieldRadical)
	}
	if m.radical_stroke != nil {
		fields = append(fields, character.FieldRadicalStroke)
	}
	if m.stroke != nil {
		fields = append(fields, character.FieldStroke)
	}
	if m.is_kangxi != nil {
		fields = append(fields, character.FieldIsKangxi)
	}
	if m.kangxi != nil {
		fields = append(fields, character.FieldKangxi)
	}
	if m.kangxi_stroke != nil {
		fields = append(fields, character.FieldKangxiStroke)
	}
	if m.simple_radical != nil {
		fields = append(fields, character.FieldSimpleRadical)
	}
	if m.simple_radical_stroke != nil {
		fields = append(fields, character.FieldSimpleRadicalStroke)
	}
	if m.simple_total_stroke != nil {
		fields = append(fields, character.FieldSimpleTotalStroke)
	}
	if m.traditional_radical != nil {
		fields = append(fields, character.FieldTraditionalRadical)
	}
	if m.traditional_radical_stroke != nil {
		fields = append(fields, character.FieldTraditionalRadicalStroke)
	}
	if m.traditional_total_stroke != nil {
		fields = append(fields, character.FieldTraditionalTotalStroke)
	}
	if m.is_name_science != nil {
		fields = append(fields, character.FieldIsNameScience)
	}
	if m.wu_xing != nil {
		fields = append(fields, character.FieldWuXing)
	}
	if m.lucky != nil {
		fields = append(fields, character.FieldLucky)
	}
	if m.is_regular != nil {
		fields = append(fields, character.FieldIsRegular)
	}
	if m.traditional_character != nil {
		fields = append(fields, character.FieldTraditionalCharacter)
	}
	if m.variant_character != nil {
		fields = append(fields, character.FieldVariantCharacter)
	}
	if m.comment != nil {
		fields = append(fields, character.FieldComment)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CharacterMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case character.FieldPinYin:
		return m.PinYin()
	case character.FieldCh:
		return m.Ch()
	case character.FieldScienceStroke:
		return m.ScienceStroke()
	case character.FieldRadical:
		return m.Radical()
	case character.FieldRadicalStroke:
		return m.RadicalStroke()
	case character.FieldStroke:
		return m.Stroke()
	case character.FieldIsKangxi:
		return m.IsKangxi()
	case character.FieldKangxi:
		return m.Kangxi()
	case character.FieldKangxiStroke:
		return m.KangxiStroke()
	case character.FieldSimpleRadical:
		return m.SimpleRadical()
	case character.FieldSimpleRadicalStroke:
		return m.SimpleRadicalStroke()
	case character.FieldSimpleTotalStroke:
		return m.SimpleTotalStroke()
	case character.FieldTraditionalRadical:
		return m.TraditionalRadical()
	case character.FieldTraditionalRadicalStroke:
		return m.TraditionalRadicalStroke()
	case character.FieldTraditionalTotalStroke:
		return m.TraditionalTotalStroke()
	case character.FieldIsNameScience:
		return m.IsNameScience()
	case character.FieldWuXing:
		return m.WuXing()
	case character.FieldLucky:
		return m.Lucky()
	case character.FieldIsRegular:
		return m.IsRegular()
	case character.FieldTraditionalCharacter:
		return m.TraditionalCharacter()
	case character.FieldVariantCharacter:
		return m.VariantCharacter()
	case character.FieldComment:
		return m.Comment()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CharacterMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case character.FieldPinYin:
		return m.OldPinYin(ctx)
	case character.FieldCh:
		return m.OldCh(ctx)
	case character.FieldScienceStroke:
		return m.OldScienceStroke(ctx)
	case character.FieldRadical:
		return m.OldRadical(ctx)
	case character.FieldRadicalStroke:
		return m.OldRadicalStroke(ctx)
	case character.FieldStroke:
		return m.OldStroke(ctx)
	case character.FieldIsKangxi:
		return m.OldIsKangxi(ctx)
	case character.FieldKangxi:
		return m.OldKangxi(ctx)
	case character.FieldKangxiStroke:
		return m.OldKangxiStroke(ctx)
	case character.FieldSimpleRadical:
		return m.OldSimpleRadical(ctx)
	case character.FieldSimpleRadicalStroke:
		return m.OldSimpleRadicalStroke(ctx)
	case character.FieldSimpleTotalStroke:
		return m.OldSimpleTotalStroke(ctx)
	case character.FieldTraditionalRadical:
		return m.OldTraditionalRadical(ctx)
	case character.FieldTraditionalRadicalStroke:
		return m.OldTraditionalRadicalStroke(ctx)
	case character.FieldTraditionalTotalStroke:
		return m.OldTraditionalTotalStroke(ctx)
	case character.FieldIsNameScience:
		return m.OldIsNameScience(ctx)
	case character.FieldWuXing:
		return m.OldWuXing(ctx)
	case character.FieldLucky:
		return m.OldLucky(ctx)
	case character.FieldIsRegular:
		return m.OldIsRegular(ctx)
	case character.FieldTraditionalCharacter:
		return m.OldTraditionalCharacter(ctx)
	case character.FieldVariantCharacter:
		return m.OldVariantCharacter(ctx)
	case character.FieldComment:
		return m.OldComment(ctx)
	}
	return nil, fmt.Errorf("unknown Character field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CharacterMutation) SetField(name string, value ent.Value) error {
	switch name {
	case character.FieldPinYin:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPinYin(v)
		return nil
	case character.FieldCh:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCh(v)
		return nil
	case character.FieldScienceStroke:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScienceStroke(v)
		return nil
	case character.FieldRadical:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRadical(v)
		return nil
	case character.FieldRadicalStroke:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRadicalStroke(v)
		return nil
	case character.FieldStroke:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStroke(v)
		return nil
	case character.FieldIsKangxi:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsKangxi(v)
		return nil
	case character.FieldKangxi:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKangxi(v)
		return nil
	case character.FieldKangxiStroke:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKangxiStroke(v)
		return nil
	case character.FieldSimpleRadical:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSimpleRadical(v)
		return nil
	case character.FieldSimpleRadicalStroke:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSimpleRadicalStroke(v)
		return nil
	case character.FieldSimpleTotalStroke:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSimpleTotalStroke(v)
		return nil
	case character.FieldTraditionalRadical:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTraditionalRadical(v)
		return nil
	case character.FieldTraditionalRadicalStroke:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTraditionalRadicalStroke(v)
		return nil
	case character.FieldTraditionalTotalStroke:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTraditionalTotalStroke(v)
		return nil
	case character.FieldIsNameScience:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsNameScience(v)
		return nil
	case character.FieldWuXing:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWuXing(v)
		return nil
	case character.FieldLucky:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLucky(v)
		return nil
	case character.FieldIsRegular:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsRegular(v)
		return nil
	case character.FieldTraditionalCharacter:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTraditionalCharacter(v)
		return nil
	case character.FieldVariantCharacter:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVariantCharacter(v)
		return nil
	case character.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	}
	return fmt.Errorf("unknown Character field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CharacterMutation) AddedFields() []string {
	var fields []string
	if m.addscience_stroke != nil {
		fields = append(fields, character.FieldScienceStroke)
	}
	if m.addradical_stroke != nil {
		fields = append(fields, character.FieldRadicalStroke)
	}
	if m.addstroke != nil {
		fields = append(fields, character.FieldStroke)
	}
	if m.addkangxi_stroke != nil {
		fields = append(fields, character.FieldKangxiStroke)
	}
	if m.addsimple_radical_stroke != nil {
		fields = append(fields, character.FieldSimpleRadicalStroke)
	}
	if m.addsimple_total_stroke != nil {
		fields = append(fields, character.FieldSimpleTotalStroke)
	}
	if m.addtraditional_radical_stroke != nil {
		fields = append(fields, character.FieldTraditionalRadicalStroke)
	}
	if m.addtraditional_total_stroke != nil {
		fields = append(fields, character.FieldTraditionalTotalStroke)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CharacterMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case character.FieldScienceStroke:
		return m.AddedScienceStroke()
	case character.FieldRadicalStroke:
		return m.AddedRadicalStroke()
	case character.FieldStroke:
		return m.AddedStroke()
	case character.FieldKangxiStroke:
		return m.AddedKangxiStroke()
	case character.FieldSimpleRadicalStroke:
		return m.AddedSimpleRadicalStroke()
	case character.FieldSimpleTotalStroke:
		return m.AddedSimpleTotalStroke()
	case character.FieldTraditionalRadicalStroke:
		return m.AddedTraditionalRadicalStroke()
	case character.FieldTraditionalTotalStroke:
		return m.AddedTraditionalTotalStroke()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CharacterMutation) AddField(name string, value ent.Value) error {
	switch name {
	case character.FieldScienceStroke:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddScienceStroke(v)
		return nil
	case character.FieldRadicalStroke:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRadicalStroke(v)
		return nil
	case character.FieldStroke:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStroke(v)
		return nil
	case character.FieldKangxiStroke:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddKangxiStroke(v)
		return nil
	case character.FieldSimpleRadicalStroke:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSimpleRadicalStroke(v)
		return nil
	case character.FieldSimpleTotalStroke:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSimpleTotalStroke(v)
		return nil
	case character.FieldTraditionalRadicalStroke:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTraditionalRadicalStroke(v)
		return nil
	case character.FieldTraditionalTotalStroke:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTraditionalTotalStroke(v)
		return nil
	}
	return fmt.Errorf("unknown Character numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CharacterMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CharacterMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CharacterMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Character nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CharacterMutation) ResetField(name string) error {
	switch name {
	case character.FieldPinYin:
		m.ResetPinYin()
		return nil
	case character.FieldCh:
		m.ResetCh()
		return nil
	case character.FieldScienceStroke:
		m.ResetScienceStroke()
		return nil
	case character.FieldRadical:
		m.ResetRadical()
		return nil
	case character.FieldRadicalStroke:
		m.ResetRadicalStroke()
		return nil
	case character.FieldStroke:
		m.ResetStroke()
		return nil
	case character.FieldIsKangxi:
		m.ResetIsKangxi()
		return nil
	case character.FieldKangxi:
		m.ResetKangxi()
		return nil
	case character.FieldKangxiStroke:
		m.ResetKangxiStroke()
		return nil
	case character.FieldSimpleRadical:
		m.ResetSimpleRadical()
		return nil
	case character.FieldSimpleRadicalStroke:
		m.ResetSimpleRadicalStroke()
		return nil
	case character.FieldSimpleTotalStroke:
		m.ResetSimpleTotalStroke()
		return nil
	case character.FieldTraditionalRadical:
		m.ResetTraditionalRadical()
		return nil
	case character.FieldTraditionalRadicalStroke:
		m.ResetTraditionalRadicalStroke()
		return nil
	case character.FieldTraditionalTotalStroke:
		m.ResetTraditionalTotalStroke()
		return nil
	case character.FieldIsNameScience:
		m.ResetIsNameScience()
		return nil
	case character.FieldWuXing:
		m.ResetWuXing()
		return nil
	case character.FieldLucky:
		m.ResetLucky()
		return nil
	case character.FieldIsRegular:
		m.ResetIsRegular()
		return nil
	case character.FieldTraditionalCharacter:
		m.ResetTraditionalCharacter()
		return nil
	case character.FieldVariantCharacter:
		m.ResetVariantCharacter()
		return nil
	case character.FieldComment:
		m.ResetComment()
		return nil
	}
	return fmt.Errorf("unknown Character field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CharacterMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CharacterMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CharacterMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CharacterMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CharacterMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CharacterMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CharacterMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Character unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CharacterMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Character edge %s", name)
}
